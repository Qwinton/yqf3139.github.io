<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Yqf's Blog]]></title>
  <subtitle><![CDATA[Day day up.]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://yqf3139.github.io/"/>
  <updated>2015-12-13T14:51:22.189Z</updated>
  <id>http://yqf3139.github.io/</id>
  
  <author>
    <name><![CDATA[yqf]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[在外置SSD上体验 Windows 10 to go]]></title>
    <link href="http://yqf3139.github.io/2015/12/12/windows-to-go-with-SSD/"/>
    <id>http://yqf3139.github.io/2015/12/12/windows-to-go-with-SSD/</id>
    <published>2015-12-12T03:16:08.000Z</published>
    <updated>2015-12-13T14:51:22.189Z</updated>
    <content type="html"><![CDATA[<h1 id="为什么需要这么折腾？">为什么需要这么折腾？</h1><p>我在主系统转为Linux后，虽然轻量级的Office编辑和图片/视频编辑是可以进行的，比如利用免费的LibreOffice、Kdenlive、Inkscape。对于图片处理，某些命令行工具如<code>convert</code>，可以直接脚本调用，灵活行和自动性反而比GUI软件更高。</p>
<p>但不得不承认，偶尔正式场合编辑文档表格和幻灯、PS、网银操作，还是逃脱不了更加普适的Windows。对于标准的Office套件，Adobe套件和Visual Studio等神一般的Windows软件，还是需要找一个解决方案来愉快地使用的。然而并没有入Mac的打算，所以我还是准备采用各种方法使用Windows。正好这样的话，也有机会再摸一摸Windows上的软件，比如微信电脑版等等。</p>
<p>所以对于我80%以上是直接使用Linux，一个纯粹的系统即可，有时需要使用Office等时需要短时间密集的Windows使用。</p>
<p>首先有两个方案也不错，但我不是很想使用，一个是Wine，兼容性总是永远的痛，一个是双系统，需要比较大的硬盘，而且相对比较麻烦，再后期与Windows to go对比后，我也抛弃了这个方案。</p>
<h1 id="方案一:_虚拟机">方案一: 虚拟机</h1><p>虚拟机对于高性能的主机适用，对于我2012年的笔记本，运行XP非常流畅，但Win7比较吃力。虚拟机的优点很明显，做好系统后，几个文件组成的虚拟机可以任意备份与拷贝，所以我常备着几个干净的Xp和Win7虚拟机，和装有Office的。</p>
<p><img src="/images/windows-to-go-with-SSD/vm.png" alt="vm"></p>
<h1 id="方案二:_远程桌面">方案二: 远程桌面</h1><p>在实验室有了高性能主机入驻后（研究生的开发机，非常眼馋），我便一直寻求办法远程使用它。在争取得到学长同意后，我登记了账号，并网上查询到方法，可以让多人同时登入一台Windows主机操作，这样当学长使用电脑的时候，我还是可以远程登陆进行操作。</p>
<p>关于操作顺畅的问题，Microsoft的RDP远程桌面协议已经十分高效，再加上如果是校园以太网连接，操作顺滑，甚至可以看视频。</p>
<p>使用远程桌面的好处也有不少：</p>
<ol>
<li>不占用我本地的计算/存储资源，我可以同时开发与处理文档。</li>
<li>系统和我本机无关，我可以是Windows/Linux/Mac/iOS/Android，登陆即可享用主机资源。</li>
<li>只要网络通畅，随时随地登录。 </li>
</ol>
<p>当然也有一些弊端，比如受他人限制，远程桌面使用的虚拟显卡驱动会造成某些软件问题，需要插U盘的话比较麻烦（可以直接挂载本地硬盘共享）。</p>
<p>推荐一个Linux上的开源远程桌面客户端，<a href="https://github.com/FreeRDP/FreeRDP" target="_blank" rel="external">FreeRdp</a>，可以添加剪贴板共享、挂载本地磁盘等功能，其他平台微软均有提供。<br><img src="/images/windows-to-go-with-SSD/freerdp.png" alt="vm"></p>
<h1 id="方案三:_外置SSD安装Windows_to_go">方案三: 外置SSD安装Windows to go</h1><p>不过虚拟机在我笔记本上总是跑不畅快，远程桌面也并不是随时都能享用，怎样才能一直运行我的Windows（各种环境齐全），但又不受机器的限制，也就是不写死在一台主机中呢？</p>
<p>事实证明<code>Windows to go</code>就是符合我的期望的，它可以直接将Windows装在外置硬盘和U盘中。这样我只需要将这个外置存储设备插入一台主机，便选择从外置存储直接启动了，这里具体请参考微软的<a href="">说明</a>，其会在启动时判别硬件并加载驱动，就算不是同一机器，也能进入同一个Windows实例。<code>Chrome OS</code>则更方便，登录即可，不过现在还不适用于我的情况，技术上也不成熟。</p>
<p>USB3.0可以达到5Gb/s的传输速率，高于Sata3的极限，所以普通Sata3硬盘是可以这样用的，也可以弄一个高速USB3.0 U盘，但为了以后硬盘可以重用于其他，我还是牺牲了便携性。</p>
<h2 id="Windows_8_+_HDD_+_USB_3-0">Windows 8 + HDD + USB 3.0</h2><p>于是我在十一期间立马找了一个320G的硬盘，配合一个USB3的外置盒，边体验了一番。<br>事实证明体验很差，不是因为系统不好用，而是因为HDD加劣质的外置盒太慢了。</p>
<p>两秒的延时，太慢了。<br><img src="/images/windows-to-go-with-SSD/winsys-hdd.jpg" alt="lantency"></p>
<p>在看到<a href="https://luolei.org/imac-5k-external-usb-ssd-update/" target="_blank" rel="external">其他人用外置SSD做iMac系统盘后</a>，我才终于决定一定需要弄一个入门的SSD来做Windows to go，这样IO便不是瓶颈，如果有高性能的主机的话，我便可以直接占领其计算资源，作图渲染视频就能节省很多时间。</p>
<h2 id="Windows_10_+_SSD_+_USB3-0（UASP支持）">Windows 10 + SSD + USB3.0（UASP支持）</h2><h3 id="购买">购买</h3><p>硬盘性能、USB3.0协议、外置盒的主控芯片的性能，支持UASP协议都是值得考虑的，综合经济实力和使用频率考虑，由于只要装系统/Office/Adobe，120G足够，如果需要编辑的文件很大（如视频），可以后再加移动固态硬盘。</p>
<blockquote>
<p>USAP是USB-IF所制定的一个新传输协议用于透过USB接口连接序列设备，提供大容量储存设备的传输速度高达20％，并降低CPU的利用率、数据延迟和等待时间，USAP协议提供了高性能主机及设备之间的数据传输。 </p>
</blockquote>
<p>最终选择：<br>SSD   ： 入门级120G Sandisk加强版，京东购入比较放心。<br>外置盒： ORICO 2589S3，USB3.0并支持UASP，淘宝购入。</p>
<p>共356元。</p>
<h3 id="安装">安装</h3><ol>
<li>安装SSD，盒子是免工具拆卸，立马搞定。</li>
<li>格式化为NTFS，测速发现不错。</li>
<li>使用<a href="https://rufus.akeo.ie/" target="_blank" rel="external">rufus</a>工具，选择Windows 10镜像，并勾选<code>Windows to go</code>，过程非常傻瓜。</li>
<li>重启选择外置SSD启动。</li>
</ol>
<p><img src="/images/windows-to-go-with-SSD/rufus_en.png" alt="rufus"></p>
<h3 id="使用">使用</h3><p>装完各种常用应用后硬盘使用不超一半，测速满意，和同学的低端SSD系统盘对比后发现差距不大。</p>
<p><img src="/images/windows-to-go-with-SSD/as-ssd-test.jpg" alt="rufus"><br><img src="/images/windows-to-go-with-SSD/winsys-ssd.jpg" alt="rufus"></p>
<p>相比之下原来硬盘的顺序读写不到50MB/s，4K根本跑不完。</p>
<p>正好开发机性能不错，只安装了Ubuntu，也启动尝试了一下。</p>
<p><img src="/images/windows-to-go-with-SSD/winsys-info.jpg" alt="rufus"><br><img src="/images/windows-to-go-with-SSD/winsys-cpu.jpg" alt="rufus"></p>
<p>最终认为这次折腾是值得的，终于可以再次畅快地玩玩Windows 10了，并且所有环境都在一个随时硬盘中，节省了重复布置环境的麻烦。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="为什么需要这么折腾？">为什么需要这么折腾？</h1><p>我在主系统转为Linux后，虽然轻量级的Office编辑和图片/视频编辑是可以进行的，比如利用免费的LibreOffice、Kdenlive、Inkscape。对于图片处理，某些命令行工具如<code>c]]>
    </summary>
    
      <category term="linux" scheme="http://yqf3139.github.io/tags/linux/"/>
    
      <category term="ssd" scheme="http://yqf3139.github.io/tags/ssd/"/>
    
      <category term="windows" scheme="http://yqf3139.github.io/tags/windows/"/>
    
      <category term="tech" scheme="http://yqf3139.github.io/categories/tech/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[检测Javascript中变量的修改]]></title>
    <link href="http://yqf3139.github.io/2015/11/28/check-js-var-update/"/>
    <id>http://yqf3139.github.io/2015/11/28/check-js-var-update/</id>
    <published>2015-11-28T08:20:08.000Z</published>
    <updated>2015-11-28T11:53:05.118Z</updated>
    <content type="html"><![CDATA[<h1 id="问题描述">问题描述</h1><p>目前在做的小项目中，我们在浏览器中通过Hook浏览器的API，截获目标程序对浏览器API的调用。比如对于Webgl的网页程序，我们就能截获所有的gl指令，这其中主要是截获参数列表。把这些gl指令翻译为Opengl ES标准的话便可以编译为一个其他设备上的原生应用了。</p>
<p>图形的绘制过程中经常会有大量的数组需要传递入GPU，这就造成了我们截获了大量的数组。如果想直接把这些数据保存在浏览器内存中，压力很大，实时流到其他服务器上的话也带来了stringfy瓶颈和传输瓶颈。虽然对于Javascript中的Typed Array，我们现在直接二进制传输到服务器上，是否能只传输变化的数组，或者是只传输数组的delta，这个是一个潜在的优化。当然，如果发现大部分要传输的数组都是改变过的话，或者是检测改变的开销大于直接传输的开销（毕竟是CPU时间对抗IO时间，而且由于检测比如会使目标程序运行变慢），完全便可以不考虑进行数组改变的检测了。</p>
<p>对于给定Javascript的TypedArray，我们的目标便是当截获到的gl指令需要使用它的时候，我们需要能知道它是否内容发生了改动，更进一步能记录出上次截获到这次截获间的delta。<br>花了一些时间进行探索，然而最后还是无解，并也没有方法能占用资源尽量少地做到标记修改，记录如下。</p>
<h1 id="暴力检测">暴力检测</h1><p>这个方法不需要多说，不过检测的时间消耗太多，由于消耗了Webgl每帧的CPU时间，很容易造成CPU性能瓶颈，导致Fps下降。</p>
<h1 id="Object-observe()_/_Array-observe()">Object.observe() / Array.observe()</h1><p>最先查询到的便是两个内建的API，直接来看MDN上的使用：<br><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">var obj = &#123;</span><br><span class="line">    foo: <span class="number">0</span>,</span><br><span class="line">    bar: <span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Object.observe(obj, <span class="keyword">function</span>(changes) &#123;</span><br><span class="line">    console.log(changes);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">obj.baz = <span class="number">2</span>;</span><br><span class="line">// [&#123;name: <span class="string">'baz'</span>, object: &lt;obj&gt;, type: <span class="string">'add'</span>&#125;]</span><br><span class="line"></span><br><span class="line">obj.foo = <span class="string">'hello'</span>;</span><br><span class="line">// [&#123;name: <span class="string">'foo'</span>, object: &lt;obj&gt;, type: <span class="string">'update'</span>, oldValue: <span class="number">0</span>&#125;]</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> obj.baz;</span><br><span class="line">// [&#123;name: <span class="string">'baz'</span>, object: &lt;obj&gt;, type: <span class="string">'delete'</span>, oldValue: <span class="number">2</span>&#125;]</span><br></pre></td></tr></table></figure></p>
<p>一开始看到的时候感觉非常符合我的需求，并且还区分了改动的类型，比如<code>update</code>、<code>add</code>、<code>delete</code>类型。<br>应该现在很多前端的工具就使用Observe便可以完全数据到显示的单向同步了。<br>于是尝试了一下在Typed Array上的操作：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var obj = <span class="keyword">new</span> Int16Array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]);</span><br><span class="line">Object.observe(obj, function(changes) &#123;</span><br><span class="line">    console.<span class="built_in">log</span>(changes);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">obj[<span class="number">0</span>] = <span class="number">9</span>; <span class="comment">// changed</span></span><br><span class="line">obj[<span class="number">0</span>] = <span class="number">9</span>; <span class="comment">// unchanged</span></span><br><span class="line">obj.sort(); <span class="comment">// changed</span></span><br></pre></td></tr></table></figure>
<p>不过后来看到这么一个解释:</p>
<blockquote>
<p>The Object.observe() method is used for asynchronously observing the changes<br>to an object. It provides a stream of changes in the order in which they<br>occur.</p>
</blockquote>
<p>说明变更事件是异步通知的，比如可以这样实验一下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="built_in">Int16Array</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]);</span><br><span class="line">a.isDirty = <span class="literal">false</span>;</span><br><span class="line"><span class="built_in">Object</span>.observe(a, <span class="function"><span class="keyword">function</span>(<span class="params">changes</span>) </span>&#123;</span><br><span class="line">      a.isDirty = <span class="literal">true</span>;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'c'</span>);</span><br><span class="line">&#125;);</span><br><span class="line">a[<span class="number">0</span>]=<span class="number">9</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a.isDirty);</span><br><span class="line">setTimeout(<span class="string">'console.log(a.isDirty);'</span>,<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">output:</span><br><span class="line"><span class="literal">false</span></span><br><span class="line">c</span><br><span class="line"><span class="literal">true</span></span><br></pre></td></tr></table></figure></p>
<p>这就带来了问题，由于Javascript执行是单线程的，可能在webgl程序刚修改完后便被我截获了这个数组，但修改通知没到，我就已经错误判断数组未改变了，由于我相当于是对每个gl命令的参数进行快照，无法在未来进行记录，如果停止我当前线程的，会带来严重的性能问题。</p>
<h1 id="Object-defineProperty">Object.defineProperty</h1><p>这个方法可以为对象定义属性，并能对属性的访问进行详细的控制，最简单的话我们给定义get和set函数，举例说明：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> shadow = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(arr, <span class="string">'0'</span>, &#123;</span><br><span class="line">  get: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'get'</span>);</span><br><span class="line">    <span class="keyword">return</span> shadow[<span class="string">'0'</span>];</span><br><span class="line">  &#125;,</span><br><span class="line">  set: <span class="function"><span class="keyword">function</span>(<span class="params">v</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'set'</span>);</span><br><span class="line">    shadow[<span class="string">'0'</span>] = v;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>通常对外暴露的get，set中要访问一个内部的变量，以防止递归访问属性的get或是set。<br>这个方法其实是多加入了一个proxy的对象。并且TypedArray并不能重写数字属性的get/set，只能通过一个proxy对象了。</p>
<p>一个简陋的实现，直接替换浏览器中提供的API:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> _Float32Array = <span class="built_in">Float32Array</span>;</span><br><span class="line"><span class="built_in">Float32Array</span> = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 这里需要罗列出内部的属性和函数名</span></span><br><span class="line">  <span class="comment">// 因为数组类型只能for遍历数字属性</span></span><br><span class="line">  <span class="keyword">var</span> list = [</span><br><span class="line">    <span class="string">"BYTES_PER_ELEMENT"</span>,</span><br><span class="line">    <span class="string">"__defineGetter__"</span>,</span><br><span class="line">    <span class="string">"__defineSetter__"</span>,</span><br><span class="line">    <span class="string">"__lookupGetter__"</span>,</span><br><span class="line">    <span class="string">"__lookupSetter__"</span>,</span><br><span class="line">    <span class="string">"constructor"</span>,</span><br><span class="line">    <span class="string">"buffer"</span>,</span><br><span class="line">    <span class="string">"byteLength"</span>,</span><br><span class="line">    <span class="string">"byteOffset"</span>,</span><br><span class="line">    <span class="string">"entries"</span>,</span><br><span class="line">    <span class="string">"hasOwnProperty"</span>,</span><br><span class="line">    <span class="string">"isPrototypeOf"</span>,</span><br><span class="line">    <span class="string">"keys"</span>,</span><br><span class="line">    <span class="string">"length"</span>,</span><br><span class="line">    <span class="string">"propertyIsEnumerable"</span>,</span><br><span class="line">    <span class="string">"set"</span>,</span><br><span class="line">    <span class="string">"subarray"</span>,</span><br><span class="line">    <span class="string">"toLocaleString"</span>,</span><br><span class="line">    <span class="string">"toString"</span>,</span><br><span class="line">    <span class="string">"valueOf"</span>,</span><br><span class="line">    <span class="string">"values"</span>,</span><br><span class="line">  ]</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 初始化的函数可能会有三个参数，还未处理</span></span><br><span class="line">  <span class="keyword">var</span> a = <span class="keyword">new</span> _Float32Array(<span class="built_in">arguments</span>[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.a = a;</span><br><span class="line">  <span class="keyword">var</span> b = <span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">this</span>.isDirty = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">  list.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">key</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span>(a[key]) == <span class="string">'function'</span>) &#123;</span><br><span class="line">      b[key] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        b.isDirty = <span class="literal">true</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'invoke'</span>, key);</span><br><span class="line">        <span class="keyword">return</span> a[key].apply(a, <span class="built_in">arguments</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">Object</span>.defineProperty(b, key, &#123;</span><br><span class="line">        configurable: <span class="literal">true</span>,</span><br><span class="line">        enumerable: <span class="literal">true</span>,</span><br><span class="line">        get: <span class="function"><span class="keyword">function</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'get member'</span>,i);</span><br><span class="line">            <span class="keyword">return</span> a[i];</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;(key),</span><br><span class="line">        set: <span class="function"><span class="keyword">function</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">v</span>) </span>&#123;</span><br><span class="line">            b.isDirty = <span class="literal">true</span>;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'set member'</span>,i);</span><br><span class="line">            a[i] = v;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;(key)</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.constructor = a.constructor;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> idx <span class="keyword">in</span> a) &#123;</span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(b, idx, &#123;</span><br><span class="line">      configurable: <span class="literal">true</span>,</span><br><span class="line">      enumerable: <span class="literal">true</span>,</span><br><span class="line">      get: <span class="function"><span class="keyword">function</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">'get index'</span>,i);</span><br><span class="line">          <span class="keyword">return</span> a[i];</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;(idx),</span><br><span class="line">      set: <span class="function"><span class="keyword">function</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">v</span>) </span>&#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">'set index'</span>,i);</span><br><span class="line">          b.isDirty = <span class="literal">true</span>;</span><br><span class="line">          a[i] = v;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;(idx)</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line">&gt;&gt;a = <span class="keyword">new</span> <span class="built_in">Float32Array</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">&lt;&lt;<span class="built_in">Float32Array</span> &#123;a: <span class="built_in">Float32Array</span>[<span class="number">3</span>], isDirty: <span class="literal">false</span>&#125;</span><br><span class="line">&gt;&gt;a.toString()</span><br><span class="line">&lt;&lt;t.js:<span class="number">64</span> invoke toString</span><br><span class="line">&lt;&lt;<span class="string">"1,2,3"</span></span><br><span class="line">&gt;&gt;a[<span class="number">0</span>]=<span class="number">1</span></span><br><span class="line">&lt;&lt;t.js:<span class="number">100</span> set index <span class="number">0</span></span><br><span class="line">&lt;&lt;<span class="number">1</span></span><br><span class="line">&gt;&gt;a[<span class="number">2</span>]</span><br><span class="line">&lt;&lt;t.js:<span class="number">94</span> get index <span class="number">2</span></span><br><span class="line">&lt;&lt;<span class="number">3</span></span><br><span class="line">&gt;&gt;a.constructor</span><br><span class="line">&lt;&lt;<span class="built_in">Float32Array</span>() &#123; [native code]  &#125;</span><br></pre></td></tr></table></figure></p>
<p>本做法应该还有以下局限：</p>
<h2 id="性能">性能</h2><p>大规模下创建一个1000000的数组内存占用飙升，因为创建了太多的get/set函数。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ori = <span class="keyword">new</span> _Float32Array(<span class="number">1000000</span>)</span><br><span class="line">Float32Array[<span class="number">1000000</span>]</span><br><span class="line">mod = <span class="keyword">new</span> Float32Array(<span class="number">1000000</span>)</span><br><span class="line">Float32Array &#123;a: Float32Array[<span class="number">1000000</span>], isDirty: <span class="literal">false</span>&#125;</span><br><span class="line"></span><br><span class="line">console.time(<span class="string">'a'</span>);<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">1000000</span>;i++)&#123;var t = mod[i];t++;mod[i]=t;&#125;;console.timeEnd(<span class="string">'a'</span>);</span><br><span class="line">VM741:<span class="number">2</span> a: <span class="number">5313.409</span>ms</span><br><span class="line"></span><br><span class="line">console.time(<span class="string">'a'</span>);<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">1000000</span>;i++)&#123;var t=ori[i];t++;ori[i]=t;&#125;;console.timeEnd(<span class="string">'a'</span>);</span><br><span class="line">VM743:<span class="number">2</span> a: <span class="number">3884.074</span>ms</span><br></pre></td></tr></table></figure>
<h2 id="内部创建并返回的TypedArray无法Hook">内部创建并返回的TypedArray无法Hook</h2><p>比如类似<code>subarray()</code>函数，返回值便是原生的TypedArray了，需要在Proxy对象中特殊处理一下。</p>
<h2 id="在某些场景下不能完全替代原有的TypedArray">在某些场景下不能完全替代原有的TypedArray</h2><p>可以尽量模拟原生TypedArray的对外Api，不过还是有些场景可能照顾不到。</p>
<p>如果还有更好的方法，欢迎讨论。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="问题描述">问题描述</h1><p>目前在做的小项目中，我们在浏览器中通过Hook浏览器的API，截获目标程序对浏览器API的调用。比如对于Webgl的网页程序，我们就能截获所有的gl指令，这其中主要是截获参数列表。把这些gl指令翻译为Opengl ES标准的话便]]>
    </summary>
    
      <category term="frontend" scheme="http://yqf3139.github.io/tags/frontend/"/>
    
      <category term="javascript" scheme="http://yqf3139.github.io/tags/javascript/"/>
    
      <category term="programming" scheme="http://yqf3139.github.io/categories/programming/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用 Web Page Replay]]></title>
    <link href="http://yqf3139.github.io/2015/11/21/use-web-page-replay/"/>
    <id>http://yqf3139.github.io/2015/11/21/use-web-page-replay/</id>
    <published>2015-11-21T14:24:47.000Z</published>
    <updated>2015-11-28T08:36:22.802Z</updated>
    <content type="html"><![CDATA[<h1 id="为什么需要使用_Web_Page_Replay？">为什么需要使用 Web Page Replay？</h1><h2 id="需求的产生">需求的产生</h2><p>实习期间，我们经常用各种Workload对浏览器进行测试，初期大量的Workload都是手工收集或是开源的，再整理到小组内的服务器上。<br>后期产生了抓取浏览器中Javascript Trace并实时送至后端分析的需求，例如我们希望将某些网页的Webgl调用全部记录下来，或者是将用户的各种互动事件记录下来，又不用手工地修改Workload，便有了我目前写的代理服务器，它能对我们关注的Workload注入Javascript脚本，比和后端代理服务器建立通信，高效地把Trace发送到后端，并易于扩展各种功能的后端。</p>
<p>一个更加常见的需求便是Localize Real life Workload，我们需要自动化地测试很多网上不开源的Workload，虽然通过我的代理服务器，注入分析不需要人工干预了，不过在公司内连接外网Workload是痛苦的。尤其是某些Workload每次需要加载50M的资源文件，一旦浏览器cache失效便要登上很长时间。而且网上的Workload在不断变动，无法直接进行组内Workload的统一化，针对浏览器测试时很难做到组内环境一致。</p>
<p>所以一个最基本的需求就是我们访问该Workload一次，就将所有经过代理服务器的request和response本地存档，称为record；等到下次重复测试时，匹配所有的request，直接发回对应的response，这样便能做到本地replay该workload了。</p>
<p>最近进哥说想加入这个功能在我们的代理服务器上，但由于当初没有考虑到这个功能，并且组内提出可以复用Telemetry中的Webpage Replay功能，可以将其加在我代理服务器的外层，便可以像是管道一样进行功能的扩展。正好我最近在看的Webgl Workload需要加载的资源很多，进行Replay极大加快了我自测的速度。</p>
<h2 id="HTTP/HTTPS代理服务器的妙用">HTTP/HTTPS代理服务器的妙用</h2><p>刚才说的两个需求只是代理服务器的一个很小的用处，还有大量的妙用如下：</p>
<ul>
<li>科学上网，不过HTTP代理一般只能作为国内跳板。</li>
<li>反向代理，做网站的入口，自动后端负载均衡、流量审查、压缩、简单的逻辑直接部署等等功能。</li>
<li>测试平台，之前看到阿里的Anyproxy便是这个作用，可以记录下所有接入终端（手机、平板）的HTTP网路请求，方便修改Header，Cookie，进行颠簸的网路环境的模拟等等，也提供Replay。</li>
<li>内网上网，公司内部方便屏蔽外界的攻击，并限制员工上网，审查上网记录，当然有福利便是可以直接提供梯子。</li>
</ul>
<h1 id="Web_Page_Replay_实现原理的简单理解">Web Page Replay 实现原理的简单理解</h1><p>Replay工具可以运行在DNS劫持和HTTP代理两种模式下，实质上DNS劫持简化了设置浏览器代理的过程。</p>
<p><img src="/images/WebPageReplayDiagram.png" alt="replay"></p>
<p>盗图一张，可以看出Replay劫持模式便是在本机启动一个DNS服务器和Web服务器，分别占用53和80端口。<br>一般情况下，浏览器访问一个页面先进行域名的DNS解析，然后先目标服务器发送request。Record时，DNS全部返回127.0.0.1，浏览器便将请求发送给本机的服务器，服务器随后便代理请求后返回，并记录下本次request和response。Replay时本机服务器直接匹配存档文件。<br>DNS劫持的好处便是不用设置浏览器代理了，缺点也很明显：</p>
<ul>
<li>如果request写明ip时，便绕过了本地的DNS请求（类似Host梯子），便无法实现replay。</li>
<li>访问端口不是标准的80和443也会直接在record环节出错。</li>
<li>需要占用本机的53,80,443端口，影响本机的原有的服务。</li>
</ul>
<p>所以这个工具也支持直接设置代理的模式，如果只是浏览器的话使用比较简单。想将多个代理服务器管道化，设置每一层的代理为上一层代理就可以了。</p>
<p>接下来粗略了解一下代理服务器的工作方式。</p>
<p>对于HTTP:</p>
<p>代理服务器通过TCP Socket接收到来自客户端的请求。它从HTTP的Header中解析出host和port，如果是域名的话先DNS解析，然后就是Roundtrip最终返回真实的response，这里所有的内容都是代理服务器可见的，可以随意修改。</p>
<p>如果我们这里使用nc，可以首先不通过代理访问百度：<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ nc baidu.<span class="keyword">com</span> <span class="number">80</span></span><br><span class="line">  GET / HTTP/<span class="number">1.1</span></span><br><span class="line">  Hos<span class="variable">t:</span> baidu.<span class="keyword">com</span></span><br></pre></td></tr></table></figure></p>
<p>可以看见返回的response：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">HTTP/<span class="number">1.1</span> <span class="number">200</span> OK</span><br><span class="line">Date: Fri, <span class="number">14</span> Aug <span class="number">2015</span> <span class="number">07</span>:<span class="number">55</span>:<span class="number">26</span> GMT</span><br><span class="line">......</span><br></pre></td></tr></table></figure></p>
<p>如果通过本机8080代理服务器：<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ nc localhost <span class="number">8080</span></span><br><span class="line">  <span class="preprocessor">GET</span> http://<span class="keyword">baidu.com </span>HTTP/<span class="number">1</span>.<span class="number">1</span></span><br><span class="line"><span class="label">  Host:</span> <span class="keyword">baidu.com</span></span><br></pre></td></tr></table></figure></p>
<p>代理服务器可能会输出如下日志：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">INFO:</span> Got request  baidu.com GET <span class="string">http:</span><span class="comment">//baidu.com</span></span><br><span class="line"><span class="string">INFO:</span> Sending request GET <span class="string">http:</span><span class="comment">//baidu.com</span></span><br><span class="line"><span class="string">INFO:</span> Received response <span class="number">200</span> OK</span><br></pre></td></tr></table></figure></p>
<p>对于HTTPS:<br>代理服务收到客户端的CONNECT请求，但只可见host和port，代理服务器只能在客户端和服务器中建立起socket连接并相互双工传递，如果需要修改内容的话，需要进行中间人攻击。</p>
<h1 id="Web_Page_Replay_使用实战">Web Page Replay 使用实战</h1><h2 id="使用DNS劫持模式">使用DNS劫持模式</h2><h2 id="使用直接代理模式">使用直接代理模式</h2><h1 id="源码分析">源码分析</h1>]]></content>
    <summary type="html">
    <![CDATA[<h1 id="为什么需要使用_Web_Page_Replay？">为什么需要使用 Web Page Replay？</h1><h2 id="需求的产生">需求的产生</h2><p>实习期间，我们经常用各种Workload对浏览器进行测试，初期大量的Workload都是手工收集或]]>
    </summary>
    
      <category term="browser" scheme="http://yqf3139.github.io/tags/browser/"/>
    
      <category term="network" scheme="http://yqf3139.github.io/tags/network/"/>
    
      <category term="proxy" scheme="http://yqf3139.github.io/tags/proxy/"/>
    
      <category term="testing" scheme="http://yqf3139.github.io/tags/testing/"/>
    
      <category term="programming" scheme="http://yqf3139.github.io/categories/programming/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[初尝 C++ 11]]></title>
    <link href="http://yqf3139.github.io/2015/11/15/new-in-cpp11/"/>
    <id>http://yqf3139.github.io/2015/11/15/new-in-cpp11/</id>
    <published>2015-11-15T06:50:31.000Z</published>
    <updated>2015-11-28T08:36:06.978Z</updated>
    <content type="html"><![CDATA[<p>我学的第一门语言便是C++，不过由于后期一直没有使用C++写过较大的项目，一直处于入门阶段。最近实习，第一个小项目便是搭建一个代理服务器，Manager处于对性能的要求，希望我用C++实现。当时比较懒，觉得用C++重写代理服务器进展会比较慢，便说服Manager让我使用Golang，配合一些现有的框架实现。现在看起来达到了预期效果，但也缺少了锻炼C++能力的机会。</p>
<p>现有的项目中，Android App几乎都是使用NDK进行开发的，近期我们有进行重构和性能优化的打算。恰逢其机，进哥在每周的Code Study上进行了 <code>C++11</code> 新标准的分享，我也借助周末的机会稍作整理。</p>
<h1 id="概览">概览</h1><p><img src="/images/cpp-timeline.png" alt="timeline"></p>
<p>C++自98标准化后，变动不大。直到近年开始不断推出新的标准，我们现在似乎还处在不断改进的中期。</p>
<p>按照Manager的说法，改动可以被划分入如下几类：</p>
<ul>
<li>语法糖类。让代码更加简洁，易于理解。</li>
<li>显式地进行语义申明。填之前留下的坑，并让代码更加符合最佳实践。</li>
<li>其他语言的新特性。</li>
<li>标准库的完善。</li>
</ul>
<p>Manager之前是做编译器的，所以他觉得大部分修改是标准委员会拍拍大脑制定的。的确，语言的设计不是大杂烩，维持一个简洁规范的语法规则是很有必要的，C++由于需要向前兼容，看起来便不简洁了。</p>
<h1 id="语法糖">语法糖</h1><p>这部分是Manager痛斥的，不过也是我们大家喜闻乐见的一些小改进。</p>
<h2 id="Auto关键字">Auto关键字</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> x = <span class="number">144000000000000</span>;</span><br><span class="line"><span class="keyword">auto</span> y = <span class="built_in">string</span>(<span class="string">"hello"</span>);</span><br><span class="line"><span class="keyword">auto</span> z = y + <span class="string">", world"</span>;</span><br><span class="line"><span class="keyword">auto</span> a = someFunc();</span><br></pre></td></tr></table></figure>
<p>这里主要的便利还是减少了类型申明的冗余，不过对于他人来说可读性会很差。比如<code>auto x = 0;</code>只会推断为int，可能会带来不必要的内存占用（比如范围只需要-128-127），或是溢出。如果需要使用STL的string也需要使用类名，不然会被推断为char数组。</p>
<p>最佳实践还是在能明显看出变量类型的时候使用，如容器的迭代器申明。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::const_iterator ci = vi.begin();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> i = vec.begin();i != vec.end();i++) &#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; (*i) &lt;&lt; <span class="built_in">std</span>::endl; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>不过还是有坑，配合新出的for loop时注意引用的问题,默认是一个拷贝。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">for</span> (<span class="tag">auto</span> &amp;<span class="rule"><span class="attribute">i </span>:<span class="value"> vec) &#123;</span><br><span class="line">    i++</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="decltype自动化推导">decltype自动化推导</h2><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">typedef decltype<span class="list">(<span class="keyword">someFunc</span><span class="list">()</span>)</span> ITER</span><br><span class="line">auto a = someFunc<span class="list">()</span><span class="comment">; // 比如返回值为vector&lt;int&gt;::const_iterator</span></span><br><span class="line">decltype<span class="list">(<span class="keyword">a</span>)</span> b<span class="comment">;       // 自动推导为和a一样的类型</span></span><br></pre></td></tr></table></figure>
<p>看到定义函数指针的用法，比较实用<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">myfunc</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">decltype</span>(&amp;myfunc) pfunc = myfunc;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; (*pfunc)(<span class="number">0</span>) &lt;&lt;<span class="built_in">std</span>::endl;</span><br><span class="line">    pfunc = [](<span class="keyword">int</span> a)&#123;<span class="keyword">return</span> a+<span class="number">1</span>;&#125;;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; (*pfunc)(<span class="number">0</span>) &lt;&lt;<span class="built_in">std</span>::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="初始化语法">初始化语法</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">C c &#123;<span class="number">0</span>,<span class="number">0</span>&#125;; <span class="comment">//C++11 only. 相当于: C c(0,0);</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span>* a = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>] &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>  &#125;; /C++<span class="number">11</span> only</span><br><span class="line">  </span><br><span class="line"><span class="keyword">class</span> X &#123;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">4</span>];</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    X() : a&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125; &#123;&#125; <span class="comment">//C++11, member array initializer</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>看完上面几个例子，似乎很多类型的初始化都可以使用{}来统一了。<br>不过Manager指出其实只是新增加了<code>new int[3]{1,2,3};</code>这一类的，其他的方法是为了大一统加上的。这样看来，初始化的方法的确比较混乱了。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">(C c)</span></span>&#123;&#125;</span><br><span class="line">foo(&#123;<span class="number">0</span>,<span class="number">0</span>&#125;);</span><br></pre></td></tr></table></figure>
<p>其实可以这样写，进行自动化推导后初始化传入的结构体。不过不太易于阅读。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; vs=&#123; <span class="string">"first"</span>, <span class="string">"second"</span>, <span class="string">"third"</span> &#125;;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt; singers =</span><br><span class="line">&#123; &#123;<span class="string">"Lady Gaga"</span>, <span class="string">"+1 (212) 555-7890"</span>&#125;,</span><br><span class="line">&#123;<span class="string">"Beyonce Knowles"</span>, <span class="string">"+1 (212) 555-0987"</span>&#125;&#125;;</span><br></pre></td></tr></table></figure>
<p>适合进行容器初始化。以前map的初始化不友好。</p>
<p>map和表达式配合，有一种Javascript的感觉。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">handler</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="keyword">decltype</span>(&amp;handler)&gt; handlers =</span><br><span class="line">    &#123; </span><br><span class="line">        &#123;<span class="string">"ori"</span>, [](<span class="keyword">int</span> a)&#123;<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="built_in">std</span>::endl;&#125;&#125;,</span><br><span class="line">        &#123;<span class="string">"plusone"</span>, [](<span class="keyword">int</span> a)&#123;<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; a+<span class="number">1</span> &lt;&lt; <span class="built_in">std</span>::endl;&#125;&#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    (*handlers[<span class="string">"ori"</span>])(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="明晰语义的改动">明晰语义的改动</h1><h2 id="delete/default修饰">delete/default修饰</h2><p>我们经常需要单例模式需要<code>private</code>构造函数，可以使用<code>delete</code>告诉编译器不生成默认的构造函数。<br>不过可以申明为<code>private</code>，似乎不是特别的必要。</p>
<p>下面例子是一个比较好的实践：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">double</span>)</span> </span>= <span class="keyword">delete</span>;</span><br></pre></td></tr></table></figure>
<p>明晰了使用时不能编译器遇到传入double的情况，不会自动做类型转换了</p>
<h2 id="nullptr,有类型的NULL">nullptr,有类型的NULL</h2><p><code>NULL</code>在函数重载时会产生歧义，导致具体逻辑得看编译器实现了。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span>)</span></span>; <span class="comment">//#1</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">char</span> *)</span></span>;<span class="comment">//#2</span></span><br><span class="line"><span class="comment">//C++03</span></span><br><span class="line">f(<span class="number">0</span>); <span class="comment">//二义性</span></span><br><span class="line"><span class="comment">//C++11</span></span><br><span class="line">f(<span class="literal">nullptr</span>) <span class="comment">//无二义性，调用f(char*)</span></span><br></pre></td></tr></table></figure></p>
<h2 id="final/override修饰">final/override修饰</h2><p><code>final</code>的使用不用多说了。<code>override</code>我们当时讨论了很久其存在的必要性。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> A&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"in A"</span> &lt;&lt; <span class="built_in">std</span>::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> B : <span class="keyword">public</span> A &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> a)</span> override </span>&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"in B"</span> &lt;&lt; <span class="built_in">std</span>::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    A* p = <span class="keyword">new</span> B();</span><br><span class="line">    p-&gt;f(<span class="number">1.1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面例子中，最终调用到了B的f，不过如果A的f参数改为<code>double</code>，会由<code>override</code>产生编译错误。<br>如果不加的话，就会绕过B::f。</p>
<h2 id="委托构造函数">委托构造函数</h2><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Student(<span class="keyword">int</span> i, string n): id(i), name(n)&#123;&#125;</span><br><span class="line">    Student(): Student(0, <span class="string">"none"</span>)&#123;&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line">    string name;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>之前一直需要抽出公共的构造部分，有了委托后可以更加高效，因为在初始化列表中便初始化成员了。</p>
<h1 id="新特性">新特性</h1><h2 id="Lambda表达式">Lambda表达式</h2><p>其实在上文中已经使用过了一些，形如：<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="link_label">闭包捕捉</span>](<span class="link_url">参数列表</span>) -&gt; 返回值类型 &#123;函数体&#125;</span><br><span class="line">[](int a, double b) -&gt; double &#123;return a+b;&#125;</span><br></pre></td></tr></table></figure></p>
<p>闭包是指在表达式中可以直接访问到表达式创建时的上下文中的变量，这样可以将特定的参数封在表达式内，调用时更加简洁。<br>在Javascript中，我们可以直接闭包。C++中区分了传值和传引用，所以我们必须通过[]来显式地捕捉外界的变量。<br>规则比较简单，<code>[=]</code>便是传值所有使用的外界变量；<code>[&amp;]</code>传引用；<code>[&amp;,x]</code>表示x传值，其他传引用；<code>[=,&amp;y]</code>表示y传递，其他传值。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">100</span>, b = <span class="number">10</span>;</span><br><span class="line"><span class="comment">// auto 在这里很方便，-&gt;double也可以省去，可以被编译器自动推导</span></span><br><span class="line"><span class="keyword">auto</span> ff = [=](<span class="keyword">int</span> x, <span class="keyword">double</span> y) -&gt;<span class="keyword">double</span> &#123;<span class="keyword">return</span> a+b+x + y;&#125;;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%f\n"</span>, ff(<span class="number">1</span>, <span class="number">2.2</span>));</span><br></pre></td></tr></table></figure>
<p>在使用标准库的高阶函数时，便可以使用函数表达式，省去了函数的申明和需要闭包的变量之前不方便传递的问题。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; nums&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">for_each(nums.begin(), nums.end(), [&amp;sum](<span class="keyword">int</span> a)&#123;sum+=a;&#125;);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, sum);</span><br></pre></td></tr></table></figure></p>
<p>Javascript中非常常见的立即调用表达式。<br><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="collection">[]</span> <span class="collection">&#123; printf<span class="list">(<span class="string">"Hi\n"</span>)</span><span class="comment">; &#125; ();</span></span><br><span class="line"><span class="collection">[]</span><span class="list">(<span class="keyword"><span class="built_in">int</span></span> i)</span> <span class="collection">&#123; printf<span class="list">(<span class="string">"Hi%d\n"</span>, i)</span><span class="comment">; &#125; (100);</span></span></span></span><br></pre></td></tr></table></figure></p>
<h2 id="右值引用">右值引用</h2><p><a href="http://harttle.com/2015/10/11/cpp11-rvalue.html" target="_blank" rel="external">详细的介绍可参考这里</a>，写得很详细。 </p>
<p>这个右值引用应该还是很好的特性。不过需要使用者明白自己究竟在做什么，主要是减少了同类中的一些冗余的拷贝过程。<br>不过我们当时的争论在于如果只是使用指针，也可以达到同样的效果，不过这里便没有类的封装性了，标准库也没办法通过<code>move</code>告知进行内部成员的移动。不过使用智能指针应该是可以达到同样的效果。<br>当时还认为如果内部变量是new获得的，应该自行管理不能传递，不过我认为这里的管理都是在同类型中间进行，传递也只是同类的实例传递给另外一个同类，所以管理是封闭在类的内部的，是符合自行管理new创造的对象的。</p>
<h2 id="元组">元组</h2><p>可以用来返回多个返回值。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="built_in">std</span>::tuple&lt; <span class="keyword">int</span> , <span class="keyword">double</span>, <span class="built_in">string</span>       &gt; tuple_1;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">std</span>::tuple&lt; <span class="keyword">char</span>, <span class="keyword">short</span> , <span class="keyword">const</span> <span class="keyword">char</span> * &gt; tuple_2;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    tuple_1 t1;</span><br><span class="line">    tuple_2 t2 &#123;<span class="string">'X'</span>, <span class="number">2</span>, <span class="string">"Hola!"</span>&#125;; <span class="comment">// ()或是&#123;&#125;初始化都可以，不过建议使用新的&#123;&#125;统一初始化</span></span><br><span class="line">    t1 = t2 ; <span class="comment">// 第三个字串元素可由'const char *'隐式转换</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>摘自Wikipedia。</p>
<h1 id="增强的标准库">增强的标准库</h1><h2 id="并发库（线程、锁、原子操作）">并发库（线程、锁、原子操作）</h2><h2 id="正则表达式库">正则表达式库</h2><h2 id="通用智能指针">通用智能指针</h2><h2 id="散列表">散列表</h2><h2 id="随机数生成">随机数生成</h2><h2 id="变长参数模板">变长参数模板</h2><h2 id="多态函数对象包装器">多态函数对象包装器</h2><h1 id="其他">其他</h1><p>最近希望做到动态的、有不同函数签名的函数的动态调用，后来只能使用switch case实现。<br>看到C++17标准中有一个<code>invoke</code>，似乎是动态地通过参数列表调用一个<code>callable</code>对象，也许以后还会加入GC和reflect。</p>
<p><a href="https://zh.wikipedia.org/wiki/C%2B%2B11" target="_blank" rel="external">更多改动可参考Wikipedia</a><br><a href="http://coolshell.cn/articles/5265.html" target="_blank" rel="external">Coolshell</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>我学的第一门语言便是C++，不过由于后期一直没有使用C++写过较大的项目，一直处于入门阶段。最近实习，第一个小项目便是搭建一个代理服务器，Manager处于对性能的要求，希望我用C++实现。当时比较懒，觉得用C++重写代理服务器进展会比较慢，便说服Manager让我使用Go]]>
    </summary>
    
      <category term="cpp" scheme="http://yqf3139.github.io/tags/cpp/"/>
    
      <category term="programming" scheme="http://yqf3139.github.io/categories/programming/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hack Shanghai 体验 2015]]></title>
    <link href="http://yqf3139.github.io/2015/11/09/hackshanghai-2015/"/>
    <id>http://yqf3139.github.io/2015/11/09/hackshanghai-2015/</id>
    <published>2015-11-09T11:18:56.000Z</published>
    <updated>2015-11-09T15:17:23.659Z</updated>
    <content type="html"><![CDATA[<p><img src="/images/hackshanghai-2015/logo_purple.png" alt="hackshanghai"></p>
<h2 id="什么是Hackathon？">什么是Hackathon？</h2><p>产品/服务开发需要耗费大量的人力，但经常一个很好的商业模式或是产品，都萌发自一两个人的小小想法，短时间内拿出一个Prof of Concept的原型，去证明你的想法，发现问题非常重要。</p>
<p>Hackathon就是程序员集中在一起，快速进行ideas 2 reality的活动，并且相互交流的过程。它通常由一个主办者发起，有大量的赞助商支持，通过严格的条件，比如限定24小时完成，限定方向和开发平台，来筛选出优秀的想法和开发者。当然，作为回报，Hackathon通常有优厚的奖品或是实习机会来吸引活跃的程序员。</p>
<p>应该来说每人都会经历自己的Hackathon，这个并不仅仅是软件行业。当你产生一个想法，并且你特别希望bring it to reality的时候，一次Hackathon就开始了。时间有长有短，可以是任何事情。</p>
<p>这一过程中的各个阶段：初期想法的产生，具体化细节，寻找合作伙伴，交流，推广，获取到别人的支持，反思评价都很有意思。其中还夹杂着很多情绪，兴奋，喜悦，妥协，各种压力，都会在短短的限定时间内爆发。走下去不放弃是必须的，当然这并不包括发现自己的想法不能实现，如果是这样，那你至少证明了它没有意义，或是有几个世界级的瓶颈。</p>
<p>所以大家都应该抓住机会参加一次Hackathon，能从这一过程和各种人身上学到很多，也能接触到很多新的平台和技术。</p>
<h2 id="Hack_Shanghai_2014">Hack Shanghai 2014</h2><p>2014年的11月初，我和颢神、苗姐、冰神等在参加完软创大赛后，直接飞来上海，和姚神碰面参加Hack Shanghai 2014。想法在去之前有所讨论，但仍然不够清晰，是从我一个小小的技术尝试萌发的。</p>
<p>我们希望提升现有的网页视频播放的体验。通过定制化的界面，用户看到的是一个聚合好的视频库，资源来自各大视频网站。再通过智能手机充当遥控器，你便可以舒服得靠在沙发上，通过滑动屏幕、挥动手机进行视频的，进度拖动等操作。</p>
<p>经历了24小时的鏖战（睡了不到三小时），我们达到预期的效果了。姚神交互界面非常酷炫，颢神将各大视频站的资源破解使用，苗姐制作了美工并且准备了制胜法宝——PPT，我则开发Android上的遥控器，将触屏和加速度的数据处理后发到浏览器中控制视频。</p>
<p>第一次通宵熬夜，早上六七点时异常的难受。不过姚神一夜没睡，仍在战斗。随着代码合并，产品成型，效果超出了我们的预期。<br>产品展示环节我们站在自己的Booth旁边，不断向旁人展示我们的应用，其他组的产品创意也很好，有利用pebble手表进行阅读的应用，通过不断改变显示的文字，人眼可以在一个小屏幕上面舒适地阅读文章。<br>还有利用Leap Motion做厨房教学应用的点子，在hackathon上，很多硬件产品可以租借，利用一个全新的平台做出应用，这是开发商非常希望看到的。</p>
<p>被选入前九后，也就意味着我们要在评委和所有的250个Hacker面前再展示一次。姚哥进行了产品的阐述，我在一旁demo，效果很赞，评委们也很有兴趣地问了我们一些技术实现细节。</p>
<p><img src="/images/hackshanghai-2015/1.png" alt="hackshanghai"></p>
<p><img src="/images/hackshanghai-2015/2.png" alt="hackshanghai"></p>
<p>打开youku就能看到一个更好的视频界面。视频浏览页面，可以左右滑动。</p>
<p>上海纽约大学的确让第一届Hackathon Shanghai成为了现实，中国和外国志愿者们都非常热心，<br>最后我们拿到了很不错的奖品，一行五人，去人民广场开心地吃了顿日料，返程回校。</p>
<h2 id="Hack_Shanghai_2015">Hack Shanghai 2015</h2><p>由于正好在上海实习，我便和冰神、火只和苗姐组队，再一次踏上hackathon之旅。</p>
<p>这次前期我们设想了很多Leap Motion的应用。</p>
<ul>
<li>进行数据可视化的互动，将一份金融或是教育领域的数据进行可视化，通过Leap Motion，利用手来与数据进行三维的互动，并且多人协同，可以共同编辑一份数据。</li>
<li>或是用两根手指进行足球对抗赛，两只手指可以控制前进、后退或是射门，另外一只手可以控制奔跑的方向，也是可以在网页上进行多人的对抗。</li>
<li>或是两根手指滑雪，进行神庙逃亡等等。</li>
</ul>
<p>还有一些稀奇古怪的想法，</p>
<ul>
<li>利用Leap Motion教会你正确的刷牙姿势。不过一个Leap Motion似乎难以进行脸和手的相对位置的定位，由于手头没有Leap Motion，以后可以试试是否可行。我脑洞一开，觉得可以弄棍子穿着Leap Motion进行模拟刷牙，这样它捕捉的人脸的一部分应该足以计算出他们的相对位置。不过也难以进行尝试和实现。</li>
<li>多人工作时候的协作，需求还不太明确。</li>
<li>用头部姿态玩一些汽车的姿态控制游戏（画面太美）。</li>
<li>任意网页弹幕。通过架设一个私人服务器，让在多地的相互认识的人能愉快的在同一个网页上弹幕，可以是小说，视频等等，还可以同步播放进度，发射弹幕聊天，自动进行鼠标位置的告知，对某些网页内容进行涂鸦，一个很好的应用便是异地的情侣，他们可以共同观看一个电影等，当然还可以加上实时的语音功能，不过得过滤掉网页上的媒体声音。</li>
</ul>
<p>开幕式后，我们便继续讨论比较中意的Leap Motion应用，可是后来并没有借到Leap Motion。后来发现图灵机器人提供的Api还比较有趣的，它号称人工智能，能够进行情感的理解和表达。</p>
<p>我们最终做了Robot T，想做一个Web浏览器上的Google Now on Tap，<br>大致想法是让图灵机器人阅读你正在阅读的内容，像是一个你信任的好朋友站在身边，和你一起浏览。</p>
<p><img src="/images/hackshanghai-2015/3.png" alt="hackshanghai"><br><img src="/images/hackshanghai-2015/4.png" alt="hackshanghai"><br><img src="/images/hackshanghai-2015/5.png" alt="hackshanghai"><br><img src="/images/hackshanghai-2015/9.png" alt="hackshanghai"><br>比如知乎闲逛的时候，它会对你关注的问题主动地提出自己的看法，也许能惊艳到你。</p>
<p><img src="/images/hackshanghai-2015/8.png" alt="hackshanghai"><br>或者你滑词提示它阅读一些内容。</p>
<p><img src="/images/hackshanghai-2015/6.png" alt="hackshanghai"><br>他会在你午餐时间，基于你浏览的餐馆信息，向你推荐菜谱和餐馆。</p>
<p><img src="/images/hackshanghai-2015/7.png" alt="hackshanghai"><br>告示天气变化。</p>
<p>还有比如在你进行理财的时候，主动告诉你一些你可能会感兴趣的经济信息。</p>
<p>不过图灵机器人很多方面做得还是不如百度小度机器人，希望他们继续努力吧。</p>
<p>实现过程同样艰苦，我们奋斗到三点，终于熬不住去三楼找了个沙发躺了四个小时。早上起来的时候各种不好，不过还好没喝红牛，苗姐提示它含有激素。</p>
<p>本次的演示只有三分钟，三个外国教授进行评价。应该来说评委对我们的产品思想比较感兴趣，不过由于图灵机器人只能理解中文，我们只做了中文知乎和工商银行的网页的自动阅读和提示。</p>
<p>实现过程中我也有所失误，好长时间没写UI，抓耳挠腮写不出好看的，还好火只后期帮忙。<br>还有就是过于重视实现了，展现效果却比较差。使用者无法瞬间get这个应用的point。<br>和外国教授交流的时候也深深感受到了自己口语的拙技。</p>
<p>本次还看到了几个不错的项目。</p>
<ul>
<li>两人协同的平衡球游戏。看了知乎回答，的确24小时实现不简单。两个人协作让一个小球滚入洞中。你可以把一个小球从一个手机倒入另一个。由于手机的相对位置还可以移动，他们需要解决利用两个手机的传感器进行相对位置的计算。Web实现，微信分享链接就能一起玩，关卡设置花样很多，如果推广一下能火。</li>
<li>一个利用Leap Motion让很多传感器上方的区域变成可点击的区域。比如上面摆着几本书，便可以选中其中一本。不过其实有点杀鸡用牛刀了。他们对使用场景还进了商业化的设想。团队四人来自清华，队长非常积极和健谈。和上海纽约大学的一位多媒体实验室的老师谈一些人机交互的技术。老师拿出了一个Project Tango设备进行展示。队长口语非常不错。</li>
<li>还有一个是一个Chrome扩展，能在你百度搜索一些电影的时候，将背景变为trailer进行展示，效果很震撼，估计百度前段要哭了。不过视频的加载需要时间，内容需要提前分发到浏览器本地缓存。他们还做了很多的商业设想，我很佩服，虽然短时间内没办法全部实现展示，但这个意识非常好。</li>
</ul>
<p>今天看了相关的知乎问题，共同经历了过hackathon，通过其他Hacker的心路历程，我们也能学到很多。<br><a href="http://www.zhihu.com/question/37271008" target="_blank" rel="external">http://www.zhihu.com/question/37271008</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="/images/hackshanghai-2015/logo_purple.png" alt="hackshanghai"></p>
<h2 id="什么是Hackathon？">什么是Hackathon？</h2><p>产品/服务开发需要耗费大量的人力]]>
    </summary>
    
      <category term="hackathon" scheme="http://yqf3139.github.io/tags/hackathon/"/>
    
      <category term="flood" scheme="http://yqf3139.github.io/categories/flood/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[美味小笼包]]></title>
    <link href="http://yqf3139.github.io/2015/11/04/yummy-xiaolongbao/"/>
    <id>http://yqf3139.github.io/2015/11/04/yummy-xiaolongbao/</id>
    <published>2015-11-04T13:30:05.000Z</published>
    <updated>2015-11-05T15:54:58.947Z</updated>
    <content type="html"><![CDATA[<p><img src="/images/yummy-xiaolongbao.jpg" alt="小笼包"></p>
<p>我作为一个在南京长大的人，小笼包是没少吃的。我妈单位离刘长兴店近，经常会下班的时候给我带上一笼解馋。<br>我会立即冲去倒醋，立即吃掉其中的两个，剩下的留到第二天作为早餐。一直算不上好好品味过小笼包的滋味，<br>并且近年经常惊讶地发现小笼包在变小，真的是越来越小了，也许是我长大了吧。</p>
<p>所以当Yongnian邀请我们几个实习生吃个午饭，并且是去吃号称上海最好吃的蟹黄小笼包时，我还是小小激动了一把。<br>Yongnian是我们的Manager，他微微发福，能说会道，对待工作拥有极大的热情，这次的借口是为Jie回南京考试践行，并且请我们几个一次。</p>
<p>于是我们一行五人，中午十一点不到就搭上William的车出发了。Yongnian催促我们早点走，说去晚了就吃不到了。</p>
<p>吃不到了，难道有钱不赚？</p>
<p>这家店的确就是这么有性格。一路上Yongnian形容了他上次没吃到招牌小笼包的遗憾。<br>“上次我是周末来的，开车一个多小时，人特别多。他们早上7店开卖，到中午就收摊了，只做一顿。”<br>“他们的主厨原来是城隍庙的店的厨师，后来自己出来单干了，就只在郊外摆个小摊，不为赚钱只为一乐。”</p>
<p>开车20分钟，我们便到了这个小小的旅游景点，小小的店中只有几张桌子，却已经坐满了人。我们站在门口就能闻道蟹黄小笼包的香味，热情的阿姨在人群中忙碌着。<br>我不由得咽下了口水。站在门口看阿姨飞速地包着各色小笼包。</p>
<p>“你们先去景点内转转吧，等会有位置的话叫你们”，Yongnian对我们说。</p>
<p>一个很江南水乡的小景区，但有点开发过度的感觉。我们看着各色小吃，还是想着没入嘴的小笼包。</p>
<p>很快我们就回去点餐了。Yongnian熟练地用上海话点餐，我们在旁边艰难地解码上海方言。我们一共要了六笼各色小笼包。<br>各种小笼包还挺讲究的，编号从1到20多，有用虾仁扇贝等海鲜做的，更多的是蟹粉汤包，更有公蟹膏和母蟹黄配出的龙凤小笼包。<br>我们每人还点了酒酿豆沙汤，和云吞。</p>
<p>慕名而来的食客的确挤爆了这个小小的店铺，我们占据了一张大桌。旁边的食客已经在品尝小笼包了。似乎老年人偏多，看来都是老上海才找得到这种偏门小店。</p>
<p>很快上了三种醋，果醋、姜醋等，阿姨嘱咐我们到时候要听她话，用对应的醋才能品尝到最佳的美味。每人还给倒了一碟新鲜的柠檬酱，据说吃完后一口闷便可以去除蟹的肥腻。<br>我们边喝着提前上的酒酿豆沙汤，边听阿姨介绍各种流程。我旁边已经站好了排队的食客，他们也不急，而是耐心地咨询各色小笼包的特点，Yongnian和他们讨论得不亦乐乎。</p>
<p>正说着小笼包便上了，我们每人手持一个小碟子，舀上对应的醋，小心翼翼的夹起盛满汤汁的小笼包。不知道是手艺好还是蒸的技术高超，<br>每个小笼包被筷子的摩擦力稳稳的提起，不漏出一滴精华。我大概吃的第一个就是招牌的蟹粉小笼包，这是用蟹肉和猪肉混合做的，性价比很高。我往上面又滴了一点醋。<br>然后小心翼翼的用牙去咬这个小小的美味，诶，汤汁流出来了，我赶忙一整个吞下，好烫。我咝着嘴，立马感受到了非常猪肉和蟹肉混合的鲜美。小碟子中的汤汁也被我一饮而尽。</p>
<p>扇贝小笼包和鲜虾小笼包也十分美味，各自像是寿司一样，在包子的褶子处装饰着对应的食材，好看又美味。<br>阿姨说她们当时在日本开店的，她非常标准的说着“chotto matte”，意思是稍等一下。</p>
<p>最后招牌龙凤小笼包上了，一个小笼包中包裹着两只蟹的美味，比单纯吃蟹过瘾。所有的食材都是手工挑出，包括蟹肉，这可能也是她们无法扩张的一个原因吧。</p>
<p>旁边的食客看着我们吃，一个劲得安慰我们慢慢吃，这样才能品出味道。</p>
<p>最后吃的云吞，似乎是从天堂掉入人间。饱腹之后的我们，带着美好的记忆和嘴中柠檬的清香，返回公司继续上班。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="/images/yummy-xiaolongbao.jpg" alt="小笼包"></p>
<p>我作为一个在南京长大的人，小笼包是没少吃的。我妈单位离刘长兴店近，经常会下班的时候给我带上一笼解馋。<br>我会立即冲去倒醋，立即吃掉其中的两个，剩下的留到]]>
    </summary>
    
      <category term="food" scheme="http://yqf3139.github.io/tags/food/"/>
    
      <category term="flood" scheme="http://yqf3139.github.io/categories/flood/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[妄想整理  选择]]></title>
    <link href="http://yqf3139.github.io/2012/07/13/delusion-of-choices/"/>
    <id>http://yqf3139.github.io/2012/07/13/delusion-of-choices/</id>
    <published>2012-07-13T12:12:49.000Z</published>
    <updated>2015-11-02T14:47:51.737Z</updated>
    <content type="html"><![CDATA[<p>现在寂寞时才发现难逢一人讲讲话。</p>
<p>最近真懒，这才第二篇，也是没头没尾不成系统。</p>
<p>刚才看完几个ted演讲，突然又想起今天看到的讲什么文科女工科男的文章。<br>以前也看到有这样的段子，文科难工科男对掐，互相说对方不懂什么，然后展现自己的特长。故意要分清界限似的。<br>我也得承认，以前我也有这类的思想，感觉班上的某些女生好什么什么，感觉某个人怎么怎么，不过我基本上都一笑了之，不做口头上的表达。<br>大家也都经常会这样，看人不爽两人闹点别扭，吵嘴甚至动动手。天师也有时对某女生的娇气和装萌直接口头表达意见，或比较形象地批评某些人。</p>
<p>依我现在看来，我甚至会对这一切都一笑了之什么都不说了。</p>
<p>为什么呢？因为选择。<br>在我一开始有这种想法时，我会想：这是这个人的各种生理心理因素决定的，由十几年的环境塑造的，在现在这种时空下的一种必然表现，她发嗲，因为她是女生，她受的教育或她的妈妈，姐姐对她的间接影响。他怎么怎么，想想似乎都很顺乎自然，这是他们的选择，虽然不完全是他们自己造成的，但似乎合理不需要干涉。<br>这样一看，似乎社会就很和谐了。不会有冲突了，大家相互理解和平共处。</p>
<p>可是，还需要不断修正这种观点。<br>问题是，我不可能要求人们全用这种观点看问题。不然社会就混乱了，我的观点就不成立了。<br>我忽视了我的主观性，毕竟我不是上帝，我需要有一定的态度。<br>比如说吧，警察如果对犯人都这样，那如何主持正义公道和法律？教师也不能对犯错的学生不管。<br>所以，每个人的对其他的人的态度的选择也很重要。<br>警察对犯人审问，法庭除以公正的判决，这符合我们这个时代的需要与期望。<br>教师对学生教导和鼓励，也是社会的需要与期望，而且也是自身的选择。需要我们的尊敬。除非他不管不顾，而且体罚过分辱骂，那社会对他们是排斥的。</p>
<p>所有我的有时不管不顾的思想也是一种选择，但有些事不能一笑了之。</p>
<p>有时有些事的争吵也不是个人利益，大家都是为了国家社会人类，当然不可避免地会有自己。<br>比如新文化运动的时候，旧思想和新思想的问题。比如一些看似极端的问题，比如一些人提出的极端思想。<br>有人那时说打倒孔家店，我们现在一看就说过了过了，可老师有次提示我们，那时旧思想的影响很大，需要比较极端的思想来冲击。冲击过后，社会会慢慢找到平衡点。<br>那这样来看，我们的确不需要嘲笑一些极端的思想，他们对社会的提示性和维稳性很值得我们肯定，他们需要我们尊敬。就像屈原，想很多看似很极端的人。<br>社会的车轮总是向前，有时候看似后退也在螺旋上升。<br>社会的天平很是公平，有时你费心好意说给人家不听的话，以后命运会教会他理解。</p>
<p>这么看，上帝这么多年的不管不顾就是他的选择。挺聪明的。<br>不过统治者想无为而治不太可能长久，因为我们毕竟是人。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>现在寂寞时才发现难逢一人讲讲话。</p>
<p>最近真懒，这才第二篇，也是没头没尾不成系统。</p>
<p>刚才看完几个ted演讲，突然又想起今天看到的讲什么文科女工科男的文章。<br>以前也看到有这样的段子，文科难工科男对掐，互相说对方不懂什么，然后展现自己的特长。故意要]]>
    </summary>
    
      <category term="delusion" scheme="http://yqf3139.github.io/categories/delusion/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[妄想整理  克隆]]></title>
    <link href="http://yqf3139.github.io/2012/06/28/delusion-of-clone/"/>
    <id>http://yqf3139.github.io/2012/06/28/delusion-of-clone/</id>
    <published>2012-06-28T05:07:40.000Z</published>
    <updated>2015-11-02T14:47:59.257Z</updated>
    <content type="html"><![CDATA[<p>开始由一些奇怪的话题写一下自己的妄想。</p>
<p>【克隆】<br>报纸上的姐妹花考到相同的分，人们习惯以双胞胎的心灵感应来解释。不过似乎没有一种可靠的解释来说明或应用，不过如果能有那是很好。</p>
<p>以前讲到克隆技术，我一般都很兴奋。克隆是一个旧的概念，原意是复制。</p>
<p>的确，世界有很多克隆的现象。它维护了一定时空下的稳定，和变异一起和谐地推动发展。</p>
<p>为了让这个话题有意思一点，我们来说克隆人。</p>
<p>克隆的实物物体很常见，一般人都希望你买的电子产品最好和广告上说的一样好，产品品质要保证同样高就需要做完美的拷贝。所以流水线作业生产的产品品质相近，表现能力也一样，对外界的反映也几乎相同。</p>
<p>当然每个人的手机又不同，因为你对它倾注了时间与精力，它就是你的手机。当然在数字化的时代，电子产品的不同是可以很好的量化的，所以备份和云存储可以让你瞬间把其他的同型号手机变成你自己的。不过一般的产品不那么容易同步，所以人们很留念以前自己使用过的东西。</p>
<p>不过我们也追求个性化与小众，产品的特殊也很受关注，比如各种限量的什么什么。而这些，显然显然也是我们熵增的一种渠道。很必须，因为我们人是唯一的。我们不想也不能被同质化，不过现实条件也总是矛盾的。</p>
<p>所以人的克隆很复杂，其他的生物与非生物也不简单，稍微容易一点。</p>
<p>人是什么？是一堆物质的集合吗，肯定不是。人不是一堆物质的混合，而是有特定结构顺序的。比如我们的基因基本决定了我们长什么样，可能还有很多很多。</p>
<p>人还具有碎片性，你并不完全在“你”里面，你还在其他人心中有碎片化的镜像。相同地，你也包含了很多很多人的碎片，宽泛地说，要想有一个你，这世界所有的都不可缺少，当然这一般没有实用意义。</p>
<p>有了基因你就能完全克隆出一个人吗？可能，不过那是生物学意义上的，而社会学上这又要麻烦很多。</p>
<p>所以其实克隆技术还只是浅层次的拷贝，不过由于一般很难处理伦理关系，也有很多人权的问题，我们并不支持。</p>
<p>有些纳粹分子想复活希特勒，但那是不可能的。他们选取希特勒的基因培育儿童，进行教导，还原希特勒的生活背景，但社会大背景变了。并且从蝴蝶效应我们知道，一点点初始变量的改变，在复杂的系统中长时间会造成很大的差异。何况是人这么复杂的生物，怎么能做到完全的相似。</p>
<p>所以小说中社会背景很重要。背景影响人，人反映背景。</p>
<p>好吧，我现在想要克隆一个人，那怎么办。那就在某一个时刻，对某一个人全部地进行分子量级的扫描，而后就在那个时刻，进行分子化的重建，并且和那个本体同时被唤醒，并且没有人知道谁是谁，那才是接近完美的，也是不可做到的。不过其他的小非生物东西应该还有可能。数据量，科技什么的都是限制。</p>
<p>但让我们来看看这个大自然给我们的礼物–同卵双生的双胞胎。</p>
<p>太不可思议了，一枚受精卵受了刺激一分为二并且独立生长。就像双星一样。除了先后关系，他们几乎接受了同样的基因，同样的背景，教育，各种外界的反映。</p>
<p>于是我们得到了世界上已经很完美的复制人。不过随着年龄增大与蝴蝶效应，相似程度会降低，不过人做不到大自然如此的完美，而又合乎伦理。至少是现在的伦理。</p>
<p>所以他们对同一件事情作出相同的反应并不足为奇。跟电子产品有点类似。</p>
<p>不过人们觉得很美好，虽然是同质化，但很不常见。</p>
<p>小猫小狗的克隆也是如此，世界上你是我的唯一。除非分子克隆，不然它不是它。</p>
<p>就算分子克隆出了一个一个原子都不多不少的你的宠物，它也不是它。</p>
<p>因为你是唯一的，心中在激动后不能接受。</p>
<p>很多东西不唯一也就失去意义了。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>开始由一些奇怪的话题写一下自己的妄想。</p>
<p>【克隆】<br>报纸上的姐妹花考到相同的分，人们习惯以双胞胎的心灵感应来解释。不过似乎没有一种可靠的解释来说明或应用，不过如果能有那是很好。</p>
<p>以前讲到克隆技术，我一般都很兴奋。克隆是一个旧的概念，原意是复制]]>
    </summary>
    
      <category term="delusion" scheme="http://yqf3139.github.io/categories/delusion/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[所谓的小结]]></title>
    <link href="http://yqf3139.github.io/2012/01/11/a-summary-2012/"/>
    <id>http://yqf3139.github.io/2012/01/11/a-summary-2012/</id>
    <published>2012-01-11T10:06:00.000Z</published>
    <updated>2015-11-05T11:54:50.927Z</updated>
    <content type="html"><![CDATA[<p>整理evernote时发现了这次期末老师让我们写的小结，那天睡前花了15分钟随便扯了一点自己的思维片段出来。以后慢慢整理，先贴这里。的确生活中有很多零星的想法，以后有时间一定要写周记。</p>
<p>应该说这学期繁忙而又平淡,感觉没做什么贡献,也谈不上有什么成绩.高三时总会想”我现在做的事情有什么意义”,似乎肯定有人要说现代教育的种种缺点,我觉得都有道理.当然在我所说的一个历史背景下,有些事情暂时还很难改变,于是我发现高考以及在它引领下的绝大多数人的教育,还是有一点用处的,至少它将中国国情摆在这儿,并让我们做出选择,让我们适应,并可能在日后去改变它.</p>
<p>今后都要走上社会,高考这个产物便是我们做出选择与适应国情的一次机会,有的人怎么样,有的人又怎么样,当然,出国也是一种不错的选择.</p>
<p>选择是个很有趣的词.一个选择包含的信息无法估计.没有正确的或是错误的选择,但又的确有区分.我发现它们都是你的投影.也别后悔做出的选择,正是它使你与众不同.只要接下来的事情都一步步做好,的确回头看时,没有正确与错误之辩了.</p>
<p>同时我们还是应该要在自己的理解范围内,去尊重他人的选择,因为熵增是一个必然的诉求.<br>不同的环境是自然熵增的结果,人也一样要与众不同.这便可以解释很多人类社会中奇奇怪怪的事情.不过人世间的熵减我还没想明白.想到这里,对于很多事情便可以释然,你大可不必对某人某事说忍受不了,成人之美让他熵增.不过不同的人有不同的选择,也有不同的社会期望.我如果是他的老师,就也许要批评教育他,或是引导他.一切又看你的选择,而这个选择由谁决定的?还不得而知.</p>
<p>你心中的其他人的形象很大程度是你自己.我们活在一种期望中.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>整理evernote时发现了这次期末老师让我们写的小结，那天睡前花了15分钟随便扯了一点自己的思维片段出来。以后慢慢整理，先贴这里。的确生活中有很多零星的想法，以后有时间一定要写周记。</p>
<p>应该说这学期繁忙而又平淡,感觉没做什么贡献,也谈不上有什么成绩.高三时总会]]>
    </summary>
    
      <category term="flood" scheme="http://yqf3139.github.io/categories/flood/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[数据意识]]></title>
    <link href="http://yqf3139.github.io/2011/07/12/consciousness-of-data/"/>
    <id>http://yqf3139.github.io/2011/07/12/consciousness-of-data/</id>
    <published>2011-07-12T13:06:00.000Z</published>
    <updated>2015-11-04T15:38:45.661Z</updated>
    <content type="html"><![CDATA[<p>还是经常会看到有同学在网上抱怨手机偷了电话号码没了，电脑不行了以前的数据找不到了。由于各种各样的原因，我们会经常找不到我们以前的东西，数据这个东西也是如此。<br>在这个快速发展的社会，有时一小包数据可能改变一个公司一个人的命运。那是往大了说，但从小方面来说，数据的整理与保护已经成为一个很重要的技能，它能使你的生活工作效率翻倍，在有些时候可以剩下很多没必要的劳累。<br>比如说我现在在写东西，网络会帮我定时保存，拿word客户端也会这样，不过有时也会出差错。怎么才能完全保护数据的安全呢？我们需要想清可能发生的几乎所有极端情况。<br>手机上有很多数据，联系人，短消息，各种笔记日历图片视频等等，手机一丢就和他们说再见？然后买新的慢慢敲联系人？我几乎没这耐心。<br>对我来说，我是没有这种忧虑的，首先我没手机，我能用的就是爸妈的手机，这让我更关注我数据的安全。联系人都是在网盘邮箱与同步软件中备份的，笔记图片录音直接上传到evernote，doitim就是我的日历与计划表，并每月备份到更安全的网盘，电脑与硬盘。我没理由丢失这部分数据。<br>电脑上更是如此。吸取的google和mac的价值观后，我的桌面就是我的工作台，上面就是一个回收站和最近使用的数据，用过的都放入快盘备份，我在每台机子的数据也几乎都在快盘中，只有一些软件的偏好设置和用户数据由软件自己云备份，几乎能导出的数据都备份了。快盘上活跃的1.7G数据与T盘上备份的20G数据让我不会丢失数据，同样他们会自动的备份到云端，在我家两台pc间同步，并定期进入外挂盘备份。</p>
<p>上面说的是数据的<code>保护</code>意识，接下来也就是数据的<code>采集</code>意识了。</p>
<p>我们知道，现实生活中的东西不好整理与查找，而数据却易于管理与调阅。建立强大的数据库有利于你今后的发展。<br>自己的文档，查找的资料，浏览器的书签与扩展，拍的照片视频还有录音等，都是可被保存的。我甚至以后要将我有用的各种实物数字化保存，方便查阅及时以后他们不在我的身边。数据就是一小包代码，多一点无害处，且你不知会在什么时候用到他们，比如ckk要全班人的联系方式，我就想起我从一次班级文件中截获整理的所有人的电话，不用课代表一个个去问，而只是几秒钟的事。</p>
<p>除了数据的保护与采集意识，数据的可获取性和共享性也是我很兴奋与关注的。这也是我为什么所有数据都在云上有备份，并经常共享图片与课件还有一些数据到群上。可随时获取并共享的数据才更有价值和活力。</p>
<p>现在，我可以说这么一句话，<code>我不会失去原始与加工的数据，我所失去的只会是几个副本和他们存在的形式与顺序</code>。<br>数据意识的重要性，我想在未来，会越来越多的影响我们，</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>还是经常会看到有同学在网上抱怨手机偷了电话号码没了，电脑不行了以前的数据找不到了。由于各种各样的原因，我们会经常找不到我们以前的东西，数据这个东西也是如此。<br>在这个快速发展的社会，有时一小包数据可能改变一个公司一个人的命运。那是往大了说，但从小方面来说，数据的整理与保]]>
    </summary>
    
      <category term="data" scheme="http://yqf3139.github.io/tags/data/"/>
    
      <category term="techtalk" scheme="http://yqf3139.github.io/categories/techtalk/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[那朵云]]></title>
    <link href="http://yqf3139.github.io/2011/02/02/the-cloud-2011/"/>
    <id>http://yqf3139.github.io/2011/02/02/the-cloud-2011/</id>
    <published>2011-02-02T02:53:00.000Z</published>
    <updated>2015-11-04T16:02:14.825Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>这是我在2011年春节时写的三篇博客，现在整理如下。当时站在纯使用者的角度，对Web技术、浏览器和<br>  云服务产生了极大的研究兴趣。推崇Chrome OS这个点子。</p>
</blockquote>
<h2 id="Day_1">Day 1</h2><p>写些什么呢，最近很长时间没写东西了，不过最近见识了很多有意思的东西，所以准备写些下来分享一下。</p>
<p>为了体现云的特点，我将于三十，初一，初二，在三台电脑上完成这组日志，每天写一些，输入法以及图都将来自云端。</p>
<p>那就开始吧。</p>
<p>首先从我认为的云的三个方面说起，我想大概可以分成云服务，云计算，云存储，就从最大的云服务开始说起。</p>
<p>其实你可以想想，你每天上网是在干什么，你开机，等上一两分钟，然后打开浏览器上网，你可以看视频，织围脖，玩社交网站，搜索信息，玩在线小游戏等等，在你电脑里的浏览器便成了你最长面对一个软件，他可以很强大，强大的超过你的想象。大多数中国的网民都是用IE，多上网的用火狐，用apple的会用safari，当然我也试过opera等一堆浏览器，不过chrome彻底改变了我对浏览器的想法。</p>
<p>我问你浏览器可以干什么，你或许会说他可以干以上的事情，其实它可以做的更多，甚至他可以做一切你在其他软件上做的事，让我来展示一下。</p>
<p>比如说在线处理文档，wordppt什么的，我们一直都是打开office然后开始工作，程序文件存档都保存在客户这里，如果你没装office，如果你的文件丢失，那么你都无法进行工作。不过如果你有一个浏览器，有个网速不错的互联网，那你只要打开个网页你就能做到。</p>
<p><img src="/images/the-cloud-2011/1.png" alt="Web"></p>
<p><img src="/images/the-cloud-2011/2.png" alt="Web"></p>
<p><img src="/images/the-cloud-2011/3.png" alt="Web"></p>
<p><img src="/images/the-cloud-2011/4.png" alt="Web"></p>
<p><img src="/images/the-cloud-2011/5.png" alt="Web"><br>比如说这个googledocs，在墙内访问还有很大困难，不过他彻底颠覆了office，你输入了几个字，网站会立即帮你保存，你可以与其他人分享文档，或一起写一份文档。</p>
<p><img src="/images/the-cloud-2011/6.png" alt="Web"></p>
<p>在线的相册，这个我们大家都用过</p>
<p>你也可以娱乐一下，玩些游戏<br><img src="/images/the-cloud-2011/7.png" alt="Web"></p>
<p><img src="/images/the-cloud-2011/8.png" alt="Web"></p>
<p>或者做些很cool的事情</p>
<p><img src="/images/the-cloud-2011/9.png" alt="Web"></p>
<p>google的在线人体浏览</p>
<p><img src="/images/the-cloud-2011/10.png" alt="Web"></p>
<p>这些都在你的Chrome Apps中<br><img src="/images/the-cloud-2011/11.png" alt="Web"></p>
<p>其实更强大的在扩展程序中，</p>
<p>这个浏览器起始页码，功能很多<br><img src="/images/the-cloud-2011/12.png" alt="Web"><br>read later<br><img src="/images/the-cloud-2011/13.png" alt="Web"></p>
<p><img src="/images/the-cloud-2011/14.png" alt="Web"><br>让我随时知道室外的温度与湿度<br><img src="/images/the-cloud-2011/15.png" alt="Web"></p>
<p><img src="/images/the-cloud-2011/16.png" alt="Web"></p>
<p><img src="/images/the-cloud-2011/17.png" alt="Web"></p>
<p><img src="/images/the-cloud-2011/18.png" alt="Web"></p>
<p><img src="/images/the-cloud-2011/19.png" alt="Web"><br>直接可以通过扩展程序看地球<br><img src="/images/the-cloud-2011/20.png" alt="Web"><br>告诉你每个网站的地址信息<br><img src="/images/the-cloud-2011/21.png" alt="Web"></p>
<p>小窗口弹出<br><img src="/images/the-cloud-2011/22.png" alt="Web"></p>
<p><img src="/images/the-cloud-2011/23.png" alt="Web"></p>
<p><img src="/images/the-cloud-2011/24.png" alt="Web"></p>
<p>在线播放器<br><img src="/images/the-cloud-2011/25.png" alt="Web"></p>
<p>他还能做什么，我不知道，我只知道他能做的不止于此，它可以几乎取代你的操作系统，他可以让你在短时间内完成几台电脑的书签与apps，偏好同步，还有密码，the same experience every where,就是这样。</p>
<p>以后Chrome OS会取代视窗么，也许吧，在下面我要来介绍更近一步的服务，一个完全基于网页的os</p>
<p>Webqq 2.0</p>
<p><img src="/images/the-cloud-2011/26.png" alt="Web"></p>
<p><img src="/images/the-cloud-2011/27.png" alt="Web"></p>
<p><img src="/images/the-cloud-2011/28.png" alt="Web"></p>
<p>在线读杂志<br><img src="/images/the-cloud-2011/29.png" alt="Web"></p>
<p><img src="/images/the-cloud-2011/30.png" alt="Web"></p>
<p><img src="/images/the-cloud-2011/31.png" alt="Web"></p>
<p>也就是说你只要登录，不论你用什么电脑，什么浏览器，你都能得到the same experience every where。</p>
<p>从这方面来讲，chrome将你的系统搬到了浏览器上，webqq2将他搬到了网页上，这一切都是基于网速，</p>
<p>那么我可以大胆的想象一下，当网速达到一定程度时，我可以把你的电脑搬到云端，只给你留下屏幕等交互的硬件。</p>
<p><img src="/images/the-cloud-2011/32.png" alt="Web"></p>
<p><img src="/images/the-cloud-2011/33.png" alt="Web"></p>
<h2 id="Day_2">Day 2</h2><p>今天不过只是在我家另一台电脑的我爸的账号里，他用的也是chrome10。我输入web2.qq.com，并快速开始今天的文章。</p>
<p>今天我随便说说我对云计算和云存储的理解。</p>
<p>其实昨天说的云服务都是基于云计算和存储，不过他们一般消耗资源不是很大。昨天我翻订约时，我哥在一旁指着关于甲骨文云计算的文章问我什么是云计算，我说大概就是把本来给你要计算的内容发到云上的服务器上，再快速返回给你结果，我们自身并不需消耗过多的资源。这和搜索是一回事，不过搜索引擎的数据库是在他那，我给他关键词，他运算后返给结果。</p>
<p>云计算可以是群组内的协作，像双核或四核电脑一样，一个庞大的任务，统一分配给电脑们，再收上结果来汇总，这对于网吧和机房来说就可以干很多大型计算机干的事。云计算也可以是像前面一样的单个电脑的访问，让主要运算跑在服务器上，自身轻松干大事。比如说我前些日子看了个视频，一个android上直接玩魔兽世界，不要觉得不可能，用云计算轻松做到，前提是网速要高，并有那样的服务器，说实话，云计算可以让高配机与顶配机没有区别，让我那台可怜的03年出产的二手小机跑点他以前一跑就死机的程序，这一切以后会实现的。到那时，你的配置有多高也许没什么意义。你家的未来的androidTV可以干所有的事。</p>
<p>云存储很简单，我现在打的文字，上传的照片视频，都是在云端，这一切是为了不会有数据丢失，也是为了方便提取。云存储的制约因素还是网络，我哥有同学费劲地把视频往touch中倒，看完再删，如果网速可以的话，我完全可以随时随地看任何视频，可以看一段缓存删掉，那谁还在乎你是多少个G的touch呢，现在电脑动不动就是300多个g的硬盘，我说我的电脑可以有好几个T，近些天金山出了T盘，我很快把我的一个g的资料与精选图片的压缩传穿了上去，我还准备把我的以前的资料数字化后传上去保存，以后随时可以提取使用。传图基本是秒下，传3m的ppt也是很快，那我可以说有网的地方我就带了一个1t的硬盘，真的那时谁还在乎你是多少g硬盘的电脑呢？当然前提是网速好和隐私不泄密。</p>
<p>云存储和云计算都无限地扩大了我们电脑和智能移动设备的性能，只要以后网速够，你再有一个较好的操作系统和浏览器，还有什么不能做呢？</p>
<p>明天我来写写信息的聚合吧。</p>
<h2 id="Day_3">Day 3</h2><p>今天是在外婆家的电脑上，电脑的配置很不错。我很快下好了最新版的chromium，设置帐号同步。大概在5分钟，我的书签以及偏好配置就已经下来了，因为chromium可以同步密码，我打开空间开始写今天的文章。</p>
<p>拿我来说，每天打开电脑第一时间就打开阅读空间和微博的特别收听，大概花十分钟处理一下我的订阅。这些信息都是我所关注的，所以效率较高。这就是快速聚合的力量。</p>
<p>我们上网，浏览与搜集我们需要与感兴趣的信息，一开始大概是浏览博客。不同博主所关注的方面不同，而我们只需关注他们就可以得到我们想要的最新的信息，但每次去打开书签十分繁琐，所以就出现了rss订阅，每天只要打开订阅器，就很快知道他们进行了什么更新。他将我获得资讯的速度上升为几个小时，不过局限也是有的。不能评论，不方便与其他人讨论，而且有的博文太长，不适合现在快节奏的生活方式–快速的获得资讯。不过他与微博相比有更大的灵活性，不受是哪家提供商的制约，也方便导出订阅，可以在googlereader中看，也可以在阅读空间中看。</p>
<p>那微博怎么就出现了呢，首先140字，保证了信息的简明精炼，还有图片视频链接很生动，第二它本身就是一个很高效的信息聚合器，通过收听不同的人，很容易获得自己想要的信息。他方便评论交流，与他人的互动。使我们与名人之间的距离大大缩小。在这里我想说，微博对于我们普通大众来说作为信息聚合器的作用更大于信息发布器，他更适用于评论与交流。而晒心情什么的，还是留给sns吧。</p>
<p>sns什么的我在这就不多说了，其本质与微博基本相同，不过交流的人群不一样，有一部分的交集。（刚才电源被刚上小学的弟弟拔了，亏了云，我流失的数据不多。）</p>
<p>在这里我还是看好腾讯微博，因为微博流量大，但盈利空间不大，没有太大资金支持的新浪可能暂时不占优势。</p>
<p>总之，如何把信息更好地聚合给需要的人是rss与微博致力于的事，而如何不让人们看到他们不该看的事，看来是和谐的事，不过这一直是件难事。</p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>这是我在2011年春节时写的三篇博客，现在整理如下。当时站在纯使用者的角度，对Web技术、浏览器和<br>  云服务产生了极大的研究兴趣。推崇Chrome OS这个点子。</p>
</blockquote>
<h2 id="Day_1">Day 1]]>
    </summary>
    
      <category term="chrome" scheme="http://yqf3139.github.io/tags/chrome/"/>
    
      <category term="cloud" scheme="http://yqf3139.github.io/tags/cloud/"/>
    
      <category term="techtalk" scheme="http://yqf3139.github.io/categories/techtalk/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[开学]]></title>
    <link href="http://yqf3139.github.io/2010/08/31/term-begins/"/>
    <id>http://yqf3139.github.io/2010/08/31/term-begins/</id>
    <published>2010-08-31T07:00:00.000Z</published>
    <updated>2015-11-04T14:40:27.236Z</updated>
    <content type="html"><![CDATA[<p>我准备开学，豆子准备入学，即将成为小学生的他异常兴奋，甚至于想当班长想到跌跤擦破了手臂，我说到了高中每人会想当班长，我妈建议他从小组长做起，他还是勉强地答应了。<br>带他去我家玩，并捎小姨去地铁站。我们两家本来只相距3分钟车程，现在为了他的小学，他们需要去住城里的70平米的老房了。<br>车刚开出不远，小姨就接了电话。<br>“喂，张老师，对我是他的妈妈，你好，嗯，有什么事么，哦，好，行，那我去买吧，不不，我全买了，那个桌布是大概，嗯10张一包，我买6包可以吗，嗯好好，还有什么需要的么，报纸没事我带些来，行，那还有什么需要我们做的吗？没事不客气，那好好诶再见。”<br>“什么事啊？”我妈问，“他们开学，要桌布报纸布置现场，小朋友要做文化衫什么的，我们家还没报纸。”小姨改了热情的语调，若有所思地说。“我们家有报纸。让他回去时带着吧。”<br>报道后，我爸拿着报纸回家，说“老师发个短信，家长就去大扫除了。家长不容易啊。”我接过报纸，细细读着。</p>
<p>想起以前读过的文章，莫小米《鞭长莫及》</p>
<blockquote>
<p>去年底，接到朋友电话，不像平时的从容聊天，那个电话是心急火燎的。她说你在媒体工作多年，新华社有关系吗？我说分社有一点儿。<br>  总社呢？没有。<br>  外交部有关系吗？没有。<br>  哎呀呀，愁死人了。<br>  问清原委，原来是大好事。她的孩子硕士毕业，报考外交部，接到面试通知了；报考新华社，也接到面试通知了。<br>  我说恭喜恭喜，女儿多优秀啊，人家家长羡慕还来不及。<br>  她说羡慕什么啊，接下来的面试、试用期，淘汰比率仍然很高，上去的人肯定关系铁硬……唉唉，北京，一点都够不着，我亲戚朋友熟人电话打一圈了。还有，你估估看哪里把握大些，我们着重做工作，扎牢一头，可不要两头脱空。<br>  到了今年1月，快过年时，朋友忧心忡忡的电话又来了：新华社有一点希望，但不能敲定；外交部一点信息没有，关系也找不到。你看怎么办？<br>  看来，这个年她也过不好了，我拼命宽慰也不管用。<br>  朋友是劳碌命。女儿从小到大的学习，都是她一手操办。女儿上幼儿园时她就帮老师的孩子织过毛衣，为此特意学来别致的花样。女儿升小学、升中学、包括高考，她都进行全方位考察，提前挑选学校、班级，拜托相关人士，建立良好关系。<br>  过节送点东西那是小儿科，她是用心良苦的，曾帮助老师办过护照、打过官司、装修过房子……这样实打实地做过她才心安。<br>  她的女儿果然步步顺利，学业优秀，各方面都很出色，她觉得，一切都是自己铺垫的结果。<br>  而现在，她总觉得该做点什么，不能听天由命，可这次鞭长莫及了。<br>  春节过后不久，她女儿打来电话：阿姨，两边都录取了，我准备去外交部。<br>  又说：幸亏这次妈妈没有托到关系，其实每次我都跟她讲不用这样做，她从来一意孤行。我总算有个机会来证明我自己了。），<br>  想起看过的小品，蔡明郭达的《送礼》。</p>
</blockquote>
<p>里面的家长为了孩子花样百出以给老师以好印象，以为孩子的成功是自己一手铺垫的，其实到头来没有太多帮助，反而可能被人误解。<br>现在老师直接发令，家长自然乐意效劳，老师也并不担心，因为一定有家长会效力，为了孩子家长开始做很多以前家长从未做过的事，比如打扫卫生，采购，或者利用人脉做些什么事。打扫卫生不够，校领导还要检查评比，那学校不出清洁员，又怕累着老师，伤到孩子，那到底是在比谁呢，是比哪个班的家长会做事，是听话的好孩子？<br>不管怎么说，家长这么做都是在意孩子的表现，现在在我房间胡闹的豆子也许还不懂，我想我妈说的有些话是对的。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>我准备开学，豆子准备入学，即将成为小学生的他异常兴奋，甚至于想当班长想到跌跤擦破了手臂，我说到了高中每人会想当班长，我妈建议他从小组长做起，他还是勉强地答应了。<br>带他去我家玩，并捎小姨去地铁站。我们两家本来只相距3分钟车程，现在为了他的小学，他们需要去住城里的70平米]]>
    </summary>
    
      <category term="flood" scheme="http://yqf3139.github.io/categories/flood/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[世博之人]]></title>
    <link href="http://yqf3139.github.io/2010/07/29/expo-people/"/>
    <id>http://yqf3139.github.io/2010/07/29/expo-people/</id>
    <published>2010-07-29T02:17:00.000Z</published>
    <updated>2015-11-05T14:51:14.503Z</updated>
    <content type="html"><![CDATA[<p>下面是有趣的人：</p>
<p><img src="/images/expo-people/1.jpg" alt="Expo"><br>我随手丢包里的小螺丝刀，就这样被和谐了，意外之喜是裸眼拍到了这么好的图<br><img src="/images/expo-people/2.jpg" alt="Expo"><br>买的是集邮册<br><img src="/images/expo-people/3.jpg" alt="Expo"><br>看表演的人真多<br><img src="/images/expo-people/4.jpg" alt="Expo"><br>新西兰馆外的玉石<br><img src="/images/expo-people/5.jpg" alt="Expo"><br>没有护照，没关系，直接敲手臂上<br><img src="/images/expo-people/6.jpg" alt="Expo"><br>黑人小伙<br><img src="/images/expo-people/7.jpg" alt="Expo"><br>意大利馆内现场制鞋的师傅<br><img src="/images/expo-people/8.jpg" alt="Expo"><br>脸上笑容流光<br><img src="/images/expo-people/9.jpg" alt="Expo"><br>看看老外吃什么<br><img src="/images/expo-people/10.jpg" alt="Expo"><br>午休的小男孩<br><img src="/images/expo-people/11.jpg" alt="Expo"><br>意大利的巨大穹顶<br><img src="/images/expo-people/12.jpg" alt="Expo"><br>德国馆排队期间，多亏有这个德国帅哥<br><img src="/images/expo-people/13.jpg" alt="Expo"><br>还有一个<br><img src="/images/expo-people/14.jpg" alt="Expo"><br>法国帅哥记者不忘发型<br><img src="/images/expo-people/15.jpg" alt="Expo"></p>
<p><img src="/images/expo-people/16.jpg" alt="Expo"></p>
<p><img src="/images/expo-people/17.jpg" alt="Expo"><br>模拟驾驶<br><img src="/images/expo-people/18.jpg" alt="Expo"><br>一位铁路老员工的肺腑之言<br><img src="/images/expo-people/19.jpg" alt="Expo"></p>
<p><img src="/images/expo-people/20.jpg" alt="Expo"><br>单车表演<br><img src="/images/expo-people/21.jpg" alt="Expo"><br>韩国企业馆的互动大屏幕<br><img src="/images/expo-people/22.jpg" alt="Expo"><br>国家电网馆下密密麻麻的人群<br><img src="/images/expo-people/23.jpg" alt="Expo"></p>
<p><img src="/images/expo-people/24.jpg" alt="Expo"></p>
<p><img src="/images/expo-people/25.jpg" alt="Expo"><br>小女孩被吓了一跳<br><img src="/images/expo-people/26.jpg" alt="Expo"></p>
<p><img src="/images/expo-people/27.jpg" alt="Expo"></p>
<p><img src="/images/expo-people/28.jpg" alt="Expo"><br>丹麦上的喷泉，小朋友玩的很开心</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>下面是有趣的人：</p>
<p><img src="/images/expo-people/1.jpg" alt="Expo"><br>我随手丢包里的小螺丝刀，就这样被和谐了，意外之喜是裸眼拍到了这么好的图<br><img src="/images/expo-people/]]>
    </summary>
    
      <category term="photography" scheme="http://yqf3139.github.io/tags/photography/"/>
    
      <category term="travel" scheme="http://yqf3139.github.io/categories/travel/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[世博之景]]></title>
    <link href="http://yqf3139.github.io/2010/07/29/expo-scene/"/>
    <id>http://yqf3139.github.io/2010/07/29/expo-scene/</id>
    <published>2010-07-29T01:52:00.000Z</published>
    <updated>2015-11-04T14:35:30.824Z</updated>
    <content type="html"><![CDATA[<p>世博才两天半就回来了，真是有些意犹未尽。平均睡眠6小时，不按时吃饭(除了早餐)，除了排队就是看馆还有我妈辛勤的敲章。除了和我哥确立了每年7月26号为脚掌受难日，默哀3分钟外，世博也没把我怎么样。看了大大小小不少场馆，每天过目的人也有几万人吧。</p>
<p>看了非洲联合馆，美国馆，意大利馆，法国馆，德国馆，卢森堡，荷兰，丹麦，芬兰，捷克，斯洛伐克，葡萄牙，白俄罗斯，泰国，澳大利亚，新加坡，新西兰，世博轴，尼泊尔，以色列，黎巴嫩，伊朗，朝鲜，亚洲联合，日本，日本产业，韩国产业，国家电网，太空家园，中国铁路，远大馆，案例馆也看了一个，不关怎么说，算是走马观花都绕了一遍。当然，为了省时间，不拆的中国馆和耗时的沙特馆没去。</p>
<p>人是很多，干什么都要排队，聪明点的话，可以看得更多。</p>
<p>下面是景物：</p>
<p><img src="/images/expo-scene/1.jpg" alt="Expo"><br>入园时正值夕阳西下，风将国旗全带向一边<br><img src="/images/expo-scene/2.jpg" alt="Expo"><br>如果是早晨，这里就不会这么空了吧<br><img src="/images/expo-scene/3.jpg" alt="Expo"><br>东方之冠沐浴在夕阳余晖中<br><img src="/images/expo-scene/4.jpg" alt="Expo"><br>尼泊尔馆<br><img src="/images/expo-scene/5.jpg" alt="Expo"><br>古色古香的长廊<br><img src="/images/expo-scene/6.jpg" alt="Expo"><br>佛像上被人们装点<br><img src="/images/expo-scene/7.jpg" alt="Expo"><br><img src="/images/expo-scene/8.jpg" alt="Expo"><br>很精美，摇一摇会怎么样呢<br><img src="/images/expo-scene/9.jpg" alt="Expo"><br>韩国馆夜景很美<br><img src="/images/expo-scene/10.jpg" alt="Expo"><br>澳大利亚馆内的展示历史的漫画小人<br><img src="/images/expo-scene/11.jpg" alt="Expo"><br>澳大利亚内的剧场，可以看看<br><img src="/images/expo-scene/12.jpg" alt="Expo"><br>夜间的世博轴<br><img src="/images/expo-scene/13.jpg" alt="Expo"><br>意大利馆中简单的线条美<br><img src="/images/expo-scene/14.jpg" alt="Expo"><br>玻璃工艺<br><img src="/images/expo-scene/15.jpg" alt="Expo"><br>法拉利California<br><img src="/images/expo-scene/16.jpg" alt="Expo"><br>机器人在组装中国国旗拼图<br><img src="/images/expo-scene/17.jpg" alt="Expo"><br>把尖顶放在桂冠中，别有趣味，俯拍很有力量感，云中露出一洞蓝天<br><img src="/images/expo-scene/18.jpg" alt="Expo"></p>
<p><img src="/images/expo-scene/19.jpg" alt="Expo"><br>卢森堡的花园<br><img src="/images/expo-scene/20.jpg" alt="Expo"><br>荷兰馆的工作人员向下望着<br><img src="/images/expo-scene/21.jpg" alt="Expo"><br>英国馆中似有一个米字<br><img src="/images/expo-scene/22.jpg" alt="Expo"><br>法国园艺<br><img src="/images/expo-scene/23.jpg" alt="Expo"><br>乌云带来力量感<br><img src="/images/expo-scene/24.jpg" alt="Expo"><br>镜面效果，两个被连接的空间<br><img src="/images/expo-scene/25.jpg" alt="Expo"><br>法国馆中爱哭的小机器人<br><img src="/images/expo-scene/26.jpg" alt="Expo"><br>俄罗斯，没进去看<br><img src="/images/expo-scene/27.jpg" alt="Expo"><br>游园表演<br><img src="/images/expo-scene/28.jpg" alt="Expo"><br>德国动力之源<br><img src="/images/expo-scene/29.jpg" alt="Expo"><br>在呼喊中，球体开始摇晃<br><img src="/images/expo-scene/30.jpg" alt="Expo"><br>小美人鱼，未能一睹芳容<br><img src="/images/expo-scene/31.jpg" alt="Expo"><br>丹麦馆上的景色很美<br><img src="/images/expo-scene/32.jpg" alt="Expo"><br>流光溢彩的喷泉<br><img src="/images/expo-scene/33.jpg" alt="Expo"></p>
<p><img src="/images/expo-scene/34.jpg" alt="Expo"><br>我们就是动车去高铁回的<br><img src="/images/expo-scene/35.jpg" alt="Expo"><br>上海产业联合馆的大机器人<br><img src="/images/expo-scene/36.jpg" alt="Expo"></p>
<p><img src="/images/expo-scene/37.jpg" alt="Expo"><br>国家电网的如水般荡漾的外墙<br><img src="/images/expo-scene/38.jpg" alt="Expo"></p>
<p><img src="/images/expo-scene/39.jpg" alt="Expo"><br>韩国企业内的屏幕出了点小问题<br><img src="/images/expo-scene/40.jpg" alt="Expo"></p>
<p><img src="/images/expo-scene/41.jpg" alt="Expo"></p>
<p><img src="/images/expo-scene/42.jpg" alt="Expo"></p>
<p><img src="/images/expo-scene/43.jpg" alt="Expo"><br>大温度计<br><img src="/images/expo-scene/44.jpg" alt="Expo"></p>
<p><img src="/images/expo-scene/45.jpg" alt="Expo"></p>
<p><img src="/images/expo-scene/46.jpg" alt="Expo"></p>
<p><img src="/images/expo-scene/47.jpg" alt="Expo"><br>沙特馆你好，沙特馆再见<br><img src="/images/expo-scene/48.jpg" alt="Expo"><br>它的回答是，人人还是人<br><img src="/images/expo-scene/49.jpg" alt="Expo"><br>意大利馆内的雕塑<br><img src="/images/expo-scene/50.jpg" alt="Expo"></p>
<p><img src="/images/expo-scene/51.jpg" alt="Expo"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>世博才两天半就回来了，真是有些意犹未尽。平均睡眠6小时，不按时吃饭(除了早餐)，除了排队就是看馆还有我妈辛勤的敲章。除了和我哥确立了每年7月26号为脚掌受难日，默哀3分钟外，世博也没把我怎么样。看了大大小小不少场馆，每天过目的人也有几万人吧。</p>
<p>看了非洲联合馆，]]>
    </summary>
    
      <category term="photography" scheme="http://yqf3139.github.io/tags/photography/"/>
    
      <category term="travel" scheme="http://yqf3139.github.io/categories/travel/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[圣战游戏]]></title>
    <link href="http://yqf3139.github.io/2010/06/13/jehad-is-just-a-game/"/>
    <id>http://yqf3139.github.io/2010/06/13/jehad-is-just-a-game/</id>
    <published>2010-06-13T09:53:00.000Z</published>
    <updated>2015-11-04T13:37:04.920Z</updated>
    <content type="html"><![CDATA[<p>69圣战早早地听说了，网上开战还算环保，圣战一词倒是为这一战增添了不少宗教气息。<br>圣战的原因想必大家也都知道，一些疯狂的粉丝们为看表演怎么怎么了，其实追星到不一定是那么可怕，可怕在粉丝们什么都不顾了，一心疯狂地指向明星，可以花钱，花时间，志同道合地打倒警察，将志同道合的同类粉丝踩到脚下不顾她们的死活。<br>国人很愤怒，这种有损形象的新闻也被外国媒体大加报道。<br>于是诞生了圣战。<br>我一直很有感于韩国的造星艺术，人家就是能造的出来，将国内的人们迷得晕头转向。这也是一种文化入侵吧，韩国对于文化的玩弄艺术是国内很多公司很想学的。电视交友节目也开始吵起来了，他们也进来分一杯羹，娱乐娱乐大众，炒作些人物也不顾对社会的影响了，他们生活得很滋润，但我看还不如放人们回去追星。</p>
<p>圣战是为了什么呢？我不知道。那天我还饶有兴致地ping了十几分钟官网，纯属娱乐了。一帮的黑客红客还有360的安全人员跳了出来，发动圣战，一波过去了，他们很高兴地与摆渡的切磋了一场，攻破后刷了200多页的贴，吃饱回家睡觉了，摆渡的一收拾餐具，就过去了。该追星的继续追，黑客红客们继续找借口在网上打打闹闹，摆渡与360网易等有提升了知名度，明星们就像看一场闹剧，我们又找到东西写了，各方皆大欢喜，约定以后继续玩。<br>圣战是一个借口，网民玩了一场游戏。<br>什么时候gameover，我们的网络力量才能真正地再多干些实事。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>69圣战早早地听说了，网上开战还算环保，圣战一词倒是为这一战增添了不少宗教气息。<br>圣战的原因想必大家也都知道，一些疯狂的粉丝们为看表演怎么怎么了，其实追星到不一定是那么可怕，可怕在粉丝们什么都不顾了，一心疯狂地指向明星，可以花钱，花时间，志同道合地打倒警察，将志同道合]]>
    </summary>
    
      <category term="flood" scheme="http://yqf3139.github.io/categories/flood/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[制作DNA]]></title>
    <link href="http://yqf3139.github.io/2010/06/05/making-of-DNA/"/>
    <id>http://yqf3139.github.io/2010/06/05/making-of-DNA/</id>
    <published>2010-06-05T13:30:00.000Z</published>
    <updated>2015-11-04T15:41:16.049Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>高中生物课学过DNA的基本结构后，老师让每人制作一个模型上交，所以便有了这次小制作。</p>
</blockquote>
<p>感谢家中T43p的辛苦工作<br>感谢Google Sketchup的技术支持<br>感谢爸的教导与捣乱<br>感谢那逝去的５个小时</p>
<p><img src="/images/making-of-DNA/1.jpg" alt="DNA"></p>
<p>诞生</p>
<p><img src="/images/making-of-DNA/2.jpg" alt="DNA"></p>
<p>附身来一张</p>
<p><img src="/images/making-of-DNA/3.jpg" alt="DNA"></p>
<p>近距离来一张</p>
<p><img src="/images/making-of-DNA/4.jpg" alt="DNA"></p>
<p>还有我可爱的工作台</p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>高中生物课学过DNA的基本结构后，老师让每人制作一个模型上交，所以便有了这次小制作。</p>
</blockquote>
<p>感谢家中T43p的辛苦工作<br>感谢Google Sketchup的技术支持<br>感谢爸的教导与捣乱<br>感谢那逝]]>
    </summary>
    
      <category term="make" scheme="http://yqf3139.github.io/categories/make/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[我需不需要知道]]></title>
    <link href="http://yqf3139.github.io/2010/05/14/known/"/>
    <id>http://yqf3139.github.io/2010/05/14/known/</id>
    <published>2010-05-14T11:30:58.000Z</published>
    <updated>2015-11-04T13:09:55.892Z</updated>
    <content type="html"><![CDATA[<p>那天又听到哪处的小学有人持刀伤人了，民间传传，网上也不知哪个稍隐蔽的角落有，想必该封的也封了，那是和谐的力量。<br>我是在去年才意识到和谐的力量的。从网上各种事件，到同学笑着说发的心情关键词变成了*，昨天上网查一道物理题摆渡不出，摆渡的对我说“什么也没查到”，我问谷歌和搜搜，他们说有。不知道里面有什么关键词，反正是被和谐了。<br>前几天发现谷歌的快照不能用了，相机被拿走了。<br>而那件小学的事呢，韩寒说他查了只有模糊的信息，政府出面后就不明朗了。<br>邮箱广播中听到有人说上面下了命令，“扯了论坛中的讨论迎世博”，“新闻用通稿”，当时看到时还真是兴奋。<br>后来想到，这些负面的新闻被封，也许是为了另外一批人。<br>恐怖的事件不断在世界发生，很大程度是不断的重复，那是处于同样状况的人一时性起的模仿，有人不满与自生的现状与社会，又看这样做有人关注，便也拿着刀冲了出去。如果没有第一个人，也许他们也很难想到，传播开来就像噬菌体，用了你的内心的愤怒，并且把你毁了，还散发出更多的病毒去祸害别人。<br>那么这些伤害事件也许也与此相同，世界上很多恐怖的事件发生与当今发达的媒体也许也很有关联。<br>当然政府掩盖事实是不对的，和谐的力量也让人很不解与突然，可和谐，还是使不少恐怖事件葬于摇篮。<br>那么，在当今信息爆炸的时代，最难的是什么呢？<br>最难的是让人们获取到他们需要的，对他们有益的信息，不让人们看到他们不该看的信息。而由于人与人的不同，要做到太难了。所以才出现了上面武断的和谐之力。<br>当然，一个风气较为和谐的社会恐怖事件一定很难发生（除非有外力），但一定要用这种方式吗，能通过更好的方式比如教育来阻止恐怖事情发生吗，我知道这很难，所以现在我们还是要了解自己的需要，问问自己要不要知道，要不要模仿，继续忍受和谐的力量。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>那天又听到哪处的小学有人持刀伤人了，民间传传，网上也不知哪个稍隐蔽的角落有，想必该封的也封了，那是和谐的力量。<br>我是在去年才意识到和谐的力量的。从网上各种事件，到同学笑着说发的心情关键词变成了*，昨天上网查一道物理题摆渡不出，摆渡的对我说“什么也没查到”，我问谷歌和搜]]>
    </summary>
    
      <category term="flood" scheme="http://yqf3139.github.io/categories/flood/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[随便写写]]></title>
    <link href="http://yqf3139.github.io/2010/03/19/random-thoughts/"/>
    <id>http://yqf3139.github.io/2010/03/19/random-thoughts/</id>
    <published>2010-03-19T09:42:00.000Z</published>
    <updated>2015-11-04T13:05:43.432Z</updated>
    <content type="html"><![CDATA[<h3 id="一">一</h3><p>老爸出差去了，我天天问他何时回。<br>他要下礼拜回，我知道，还是天天问。<br>这礼拜事很多，很多次要用电脑。<br>他带走了大本。<br>我只能用奔三512内存的小本。<br>有一次当我正对老爸慨叹小本的慢时，<br>我突然沉默了，<br>我在思念什么呢？</p>
<h3 id="二">二</h3><p>楼下一棵梧桐被拦腰砍断。从家中看的不再是茂密的枝冠，而是一圈圈的年轮。<br>我昨天才看的树上的嫩芽随卡车走了。<br>那个弯曲的主干还在。<br>我们楼前似乎多了几分燥热。<br>我好像小学时还在树荫下骑过车。</p>
<h3 id="三">三</h3><p>手艺人修车，是在修车。<br>修车人修车，只换零件。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="一">一</h3><p>老爸出差去了，我天天问他何时回。<br>他要下礼拜回，我知道，还是天天问。<br>这礼拜事很多，很多次要用电脑。<br>他带走了大本。<br>我只能用奔三512内存的小本。<br>有一次当我正对老爸慨叹小本的慢时，<br>我突然沉默了，<b]]>
    </summary>
    
      <category term="flood" scheme="http://yqf3139.github.io/categories/flood/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[夜赏光雕]]></title>
    <link href="http://yqf3139.github.io/2010/02/26/enjoy-light-sculpture/"/>
    <id>http://yqf3139.github.io/2010/02/26/enjoy-light-sculpture/</id>
    <published>2010-02-26T12:04:20.000Z</published>
    <updated>2015-11-04T12:59:44.092Z</updated>
    <content type="html"><![CDATA[<p>这是上周五的事了，我们一家在下午五点拼入玄武湖，为的是我爸春节前就一直念的光雕，顺便拍拍夜景。七点才开始的光雕，我们早了两个小时就进去了，只是为</p>
<p>了票价上的差价。这些都不重要，重要在这个美丽的日落时分，那些美好的景与记忆。</p>
<p><img src="/images/enjoy-light-sculpture/1.jpg" alt="图片"></p>
<p>夕阳即将落入楼宇间</p>
<p><img src="/images/enjoy-light-sculpture/2.jpg" alt="图片"></p>
<p>淡淡余晖洒满码头，游人走下游船</p>
<p><img src="/images/enjoy-light-sculpture/3.jpg" alt="图片"></p>
<p>湖面呈现独特的倒影，游船走出s弯，涟漪抹去那水墨般的一笔</p>
<p><img src="/images/enjoy-light-sculpture/4.jpg" alt="图片"></p>
<p>惬意</p>
<p><img src="/images/enjoy-light-sculpture/5.jpg" alt="图片"></p>
<p>水波映射夕阳与蓝天交融的紫色余晖</p>
<p><img src="/images/enjoy-light-sculpture/6.jpg" alt="图片"></p>
<p>回首发现飞机划出十字</p>
<p><img src="/images/enjoy-light-sculpture/7.jpg" alt="图片"></p>
<p>夜色中的南京站，模糊的睡水中的倒影</p>
<p><img src="/images/enjoy-light-sculpture/8.jpg" alt="图片"></p>
<p>激光在快门中画出一道扇形</p>
<p><img src="/images/enjoy-light-sculpture/9.jpg" alt="图片"></p>
<p>幽蓝，黑色夜中那么美</p>
<p>这还不是最美。想象一下，在湖水泛起的静静微波中，倒影微微抖动着。有一艘快艇驶过，打破寂静。驶过去了。<br>波浪慢慢的泛过来了，互相重叠，整个湖面就快被它涨满，光线被折叠，扭曲，如波似缕。整个湖面都是的，然后在是平静。</p>
<p>美么</p>
<p><img src="/images/enjoy-light-sculpture/10.jpg" alt="图片"></p>
<p>光雕正式开始</p>
<p><img src="/images/enjoy-light-sculpture/11.jpg" alt="图片"></p>
<p>月牙弯中一弯新月</p>
<p><img src="/images/enjoy-light-sculpture/12.jpg" alt="图片"></p>
<p>光线似乎层叠了</p>
<p><img src="/images/enjoy-light-sculpture/13.jpg" alt="图片"></p>
<p>透视</p>
<p><img src="/images/enjoy-light-sculpture/14.jpg" alt="图片"></p>
<p><img src="/images/enjoy-light-sculpture/15.jpg" alt="图片"></p>
<p><img src="/images/enjoy-light-sculpture/16.jpg" alt="图片"></p>
<p>欧式风格</p>
<p><img src="/images/enjoy-light-sculpture/17.jpg" alt="图片"></p>
<p><img src="/images/enjoy-light-sculpture/18.jpg" alt="图片"></p>
<p>色彩会变换</p>
<p><img src="/images/enjoy-light-sculpture/19.jpg" alt="图片"></p>
<p><img src="/images/enjoy-light-sculpture/20.jpg" alt="图片"></p>
<p><img src="/images/enjoy-light-sculpture/21.jpg" alt="图片"></p>
<p><img src="/images/enjoy-light-sculpture/22.jpg" alt="图片"></p>
<p><img src="/images/enjoy-light-sculpture/23.jpg" alt="图片"></p>
<p><img src="/images/enjoy-light-sculpture/24.jpg" alt="图片"></p>
<p><img src="/images/enjoy-light-sculpture/25.jpg" alt="图片"></p>
<p>借这个被碰掉灯罩的led灯，我们可以知道它色彩怎么变换的</p>
<p>红绿蓝三组led灯，蓝绿各三红四</p>
<p><img src="/images/enjoy-light-sculpture/26.jpg" alt="图片"></p>
<p><img src="/images/enjoy-light-sculpture/27.jpg" alt="图片"></p>
<p>最后再来两张梦幻般的</p>
<p>美，当光影与水结合的时候。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>这是上周五的事了，我们一家在下午五点拼入玄武湖，为的是我爸春节前就一直念的光雕，顺便拍拍夜景。七点才开始的光雕，我们早了两个小时就进去了，只是为</p>
<p>了票价上的差价。这些都不重要，重要在这个美丽的日落时分，那些美好的景与记忆。</p>
<p><img src="/]]>
    </summary>
    
      <category term="photography" scheme="http://yqf3139.github.io/tags/photography/"/>
    
      <category term="flood" scheme="http://yqf3139.github.io/categories/flood/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[踏雪寻梅梅未开]]></title>
    <link href="http://yqf3139.github.io/2010/02/14/wintersweet-in-snow/"/>
    <id>http://yqf3139.github.io/2010/02/14/wintersweet-in-snow/</id>
    <published>2010-02-14T06:09:00.000Z</published>
    <updated>2015-11-04T12:46:22.152Z</updated>
    <content type="html"><![CDATA[<p>大年初一的雪来的是很及时，不仅将空气洗净，也将喜气固定在脚下的冰雪之中。南京城银装素裹地迎来了虎年。­</p>
<p>一早爸就与住的近的小姨夫联系，商讨一起去梅花谷踏雪寻梅，当然主要是出去放松。很快，我们就做好了出发的准备。­<br>来到楼下，发现居委会的大娘正在铲雪，为居民出行作出通道­</p>
<p>大年初一的雪来的是很及时，不仅将空气洗净，也将喜气固定在脚下的冰雪之中。南京城银装素裹地迎来了虎年。­</p>
<p>一早爸就与住的近的小姨夫联系，商讨一起去梅花谷踏雪寻梅，当然主要是出去放松。很快，我们就做好了出发的准备。­</p>
<p><img src="/images/wintersweet-in-snow/1.jpg" alt="图片"></p>
<p>来到楼下，发现居委会的大娘正在铲雪，为居民出行作出通道­</p>
<p><img src="/images/wintersweet-in-snow/2.jpg" alt="图片"></p>
<p>我爸也拿过雪铲铲起雪来，­</p>
<p>我也一试，可不足3分钟我的手腕便酸起来，不过还是将道路拓宽了不少­</p>
<p>之后我们一车五人便来到了梅花谷，活动开始­</p>
<p><img src="/images/wintersweet-in-snow/3.jpg" alt="图片"></p>
<p>桥上封满积雪­</p>
<p><img src="/images/wintersweet-in-snow/4.jpg" alt="图片"><br><img src="/images/wintersweet-in-snow/5.jpg" alt="图片"></p>
<p>发现水鸟比我们起得更早­</p>
<p><img src="/images/wintersweet-in-snow/6.jpg" alt="图片"></p>
<p>雪中梅花在狂舞­</p>
<p><img src="/images/wintersweet-in-snow/7.jpg" alt="图片"></p>
<p>同去的还有小弟豆子，小孩走路你看不到脚印，一路在前面开道，被我爸扔的雪正中­</p>
<p><img src="/images/wintersweet-in-snow/8.jpg" alt="图片"></p>
<p>茫茫雪原还没有人经过­</p>
<p><img src="/images/wintersweet-in-snow/9.jpg" alt="图片"><br><img src="/images/wintersweet-in-snow/10.jpg" alt="图片"><br><img src="/images/wintersweet-in-snow/11.jpg" alt="图片"></p>
<p>那就开始滚雪球­</p>
<p><img src="/images/wintersweet-in-snow/12.jpg" alt="图片"></p>
<p>自己滚下山坡，投入河流的怀抱­</p>
<p><img src="/images/wintersweet-in-snow/13.jpg" alt="图片"></p>
<p>再来一个，我登顶了­</p>
<p><img src="/images/wintersweet-in-snow/14.jpg" alt="图片"></p>
<p>两条路­</p>
<p><img src="/images/wintersweet-in-snow/15.jpg" alt="图片"></p>
<p>找到了休息的地方，可以歇一下了­</p>
<p><img src="/images/wintersweet-in-snow/16.jpg" alt="图片"></p>
<p>做出的各种脚印­</p>
<p><img src="/images/wintersweet-in-snow/17.jpg" alt="图片"></p>
<p>雪中赏梅诵书，好兴致­</p>
<p><img src="/images/wintersweet-in-snow/18.jpg" alt="图片"></p>
<p>梅花还没开，在冰雪中等待着­</p>
<p><img src="/images/wintersweet-in-snow/19.jpg" alt="图片"></p>
<p>腊梅在雪中坚持地释放最后几缕清香­</p>
<p><img src="/images/wintersweet-in-snow/20.jpg" alt="图片"></p>
<p>红灯笼上的白雪­</p>
<p><img src="/images/wintersweet-in-snow/21.jpg" alt="图片"></p>
<p>他手中的是雪电钻？，别惊讶，我做的手枪­</p>
<p><img src="/images/wintersweet-in-snow/22.jpg" alt="图片"></p>
<p>深径中的来人，雪冻结了车轮­</p>
<p><img src="/images/wintersweet-in-snow/23.jpg" alt="图片"></p>
<p>两个小时后，我们一起回了外婆家，喝一碗热汤，再在外婆的唠叨中换上干衣，这才叫过年哪。­</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>大年初一的雪来的是很及时，不仅将空气洗净，也将喜气固定在脚下的冰雪之中。南京城银装素裹地迎来了虎年。­</p>
<p>一早爸就与住的近的小姨夫联系，商讨一起去梅花谷踏雪寻梅，当然主要是出去放松。很快，我们就做好了出发的准备。­<br>来到楼下，发现居委会的大娘正在铲雪，为居]]>
    </summary>
    
      <category term="photography" scheme="http://yqf3139.github.io/tags/photography/"/>
    
      <category term="flood" scheme="http://yqf3139.github.io/categories/flood/"/>
    
  </entry>
  
</feed>
